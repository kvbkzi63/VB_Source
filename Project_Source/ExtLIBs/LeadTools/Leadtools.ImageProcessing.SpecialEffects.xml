<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.ImageProcessing.SpecialEffects</name>
  </assembly>
  <members>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags">
      <summary>
        <para>Enumeration that indicates the type of plasma effect, and the color pattern to use.</para>
      </summary>
      <remarks>
            You can use a bitwise OR (|) to specify one flag from each group.
            <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Type of Plasma</td><td>Vertical, Horizontal, Diagonal, Cross, Circular, Random1, Random2</td></tr><tr><td>Color Patterns</td><td>Hue, Rgb1, Rgb2, CustomColor</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Vertical">
      <summary>
            Create vertical lines of plasma.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Horizontal">
      <summary>
            Create horizontal lines of plasma.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Diagonal">
      <summary>
            Create diagonal lines of plasma.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Cross">
      <summary>
            Create crossed lines of plasma.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Circular">
      <summary>
            Create circles of plasma.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Random1">
      <summary>
            Create randomly shaped plasma.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Random2">
      <summary>
            Create a different type of randomly shaped plasma.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Hue">
      <summary>
            Use the first predefined color pattern.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Rgb1">
      <summary>
            Use the second predefined color pattern.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.Rgb2">
      <summary>
            Use the third predefined color pattern.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags.CustomColor">
      <summary>
            Use the frequency properties (RedFrequency, GreenFrequency, BlueFrequency) of the PlasmaCommand class to generate user-defined plasma colors.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand">
      <summary>
            Applies color patterns that blend into each other like plasma. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>As an example, suppose you call the PlasmaCommand method, using an <see cref="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.Opacity" /> value of 0, which means that no image is to be used, and you use the following settings:<br /><table><tr><td><b>Parameters</b></td><td><b>Value</b></td></tr><tr><td><i>Shift</i></td><td>0</td></tr><tr><td><i>Opacity</i></td><td>0</td></tr><tr><td><i>Size</i></td><td>1000</td></tr><tr><td><i>Flags</i></td><td>Random1 | Rgb1</td></tr></table><br />
            The following figure results: <br /><img src="PlasmaFilterBitmap.jpg" /><br /></description>
          </item>
          <item>
            <description>The <see cref="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.Opacity" /> value will always be considered to be 0, unless specified otherwise by a value between (and including) 0 to 100.</description>
          </item>
          <item>
            <description>Use the RedFrequency, GreenFrequency, and BlueFrequency to create a custom color pattern. To use them, pass the CustomeColor flag to PlasmaCommand. Otherwise, their values will be ignored.</description>
          </item>
          <item>
            <description>The Hue value is a predefined color pattern that is based on the HLS color space. It creates plasma patterns by changing hue values.</description>
          </item>
          <item>
            <description>The Rgb1 value is a predefined color pattern that is based on the RGB color space. Different combinations of red, green and blue frequencies produce different results.</description>
          </item>
          <item>
            <description>Like the Rgb1 value, the Rgb2 value is based on the RGB color space, but uses a different combination of red, green and blue frequencies.</description>
          </item>
          <item>
            <description>The color palette used for <see cref="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.Shift" /> is a continuous cylindrical color palette. In the following figures, one shows where on the palette a value of 0 lies, and the other one shows where on the palette the maximum value lies:<br /><img src="uShift.jpg" /></description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PlasmaCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As New PlasmaCommand

      ' Draw crossed plasma colors of size 10 over the current image, use Rgb1 predefined
      ' color pattern without any shifting, and blend the effect into the current image
      ' with opacity of 80%
      command.Flags = PlasmaCommandFlags.Rgb1 Or PlasmaCommandFlags.Cross
      command.Opacity = 80
      command.Size = 1000
      command.Shift = 0
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PlasmaCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PlasmaCommand command = new PlasmaCommand();

         // Draw crossed plasma colors of size 10 over the current image, use Rgb1 predefined
         // color pattern without any shifting, and blend the effect into the current image
         // with opacity of 80%
         command.Flags = PlasmaCommandFlags.Rgb1 | PlasmaCommandFlags.Cross;
         command.Opacity = 80;
         command.Size = 1000;
         command.Shift = 0;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PlasmaCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.#ctor">
      <summary>
            Initializes a new PlasmaCommand with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags)">
      <summary>
            Initializes a new PlasmaCommand with explicit parameters.
            </summary>
      <param name="opacity">A percentage value that indicates the amount of blending between the plasma color patterns and the original image. Possible values range from 0 to 100. Use 0 when not using an image, and 100 when not using the plasma values.</param>
      <param name="size">Value greater than 0 that represents the plasma size. (The value is divided internally by 100). The value, after it has been divided by 100, represents the size in pixels.</param>
      <param name="shift">The amount of color shift in the plasma color pattern. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. A value of 0 means there is no color shift. </param>
      <param name="redFrequency">Value that indicates which frequencies of red color should be used to create plasma patterns. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. Use 0 to turn off processing for the red frequencies.</param>
      <param name="greenFrequency">Value that indicates which frequencies of green color should be used to create plasma patterns. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255.  Use 0 to turn off processing for the green frequencies.</param>
      <param name="blueFrequency">Value that indicates which frequencies of blue color should be used to create plasma patterns. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. Use 0 to turn off processing for the blue frequencies.</param>
      <param name="flags">Enumeration that indicates which type of plasma effect to create, and which color pattern to use.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PlasmaConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      ' Draw crossed plasma colors of size 15 over the current image, use CustomColor flag
      ' to be able to define color frequencies for color pattern, shift color pattern 50 steps,
      ' and blend the effect into the current image with opacity of 70%
      Dim command As PlasmaCommand = New PlasmaCommand(70, 1000, 50, 2000, 0, 6000, PlasmaCommandFlags.Cross Or PlasmaCommandFlags.CustomColor)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PlasmaConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         // Draw crossed plasma colors of size 15 over the current image, use CustomColor flag
         // to be able to define color frequencies for color pattern, shift color pattern 50 steps, 
         // and blend the effect into the current image with opacity of 70%
         PlasmaCommand command = new PlasmaCommand(80, 1000, 50, 2000, 0, 6000, PlasmaCommandFlags.Cross | PlasmaCommandFlags.CustomColor);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PlasmaCommand.PlasmaConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>String that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.Opacity">
      <summary>
            Gets or sets the blending percent between plasma color and original image.
            </summary>
      <value>A percentage value that indicates the amount of blending between the plasma color patterns and the original image. Possible values range from 0 to 100. Use 0 when not using an image, and 100 when not using the plasma values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.Size">
      <summary>
            Gets or sets the size of plasma.
            </summary>
      <value>Value greater than 0 that represents the plasma size. (The value is divided internally by 100). The value, after it has been divided by 100, represents the size in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.Shift">
      <summary>
            Gets or sets the amount of color-shift in plasma color pattern.
            </summary>
      <value>The amount of color shift in the plasma color pattern. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. A value of 0 means there is no color shift.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.RedFrequency">
      <summary>
            Gets or sets the frequency of red color.
            </summary>
      <value>Value that indicates which frequencies of red color should be used to create plasma patterns. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. Use 0 to turn off processing for the red frequencies.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags)" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.GreenFrequency">
      <summary>
            Gets or sets the frequency of green color.
            </summary>
      <value>Value that indicates which frequencies of green color should be used to create plasma patterns. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255.  Use 0 to turn off processing for the green frequencies.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags)" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.BlueFrequency">
      <summary>
            Gets or sets the frequency of blue color.
            </summary>
      <value>Value that indicates which frequencies of blue color should be used to create plasma patterns. Valid range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. Use 0 to turn off processing for the blue frequencies.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.PlasmaCommandFlags)" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand.Flags">
      <summary>
            Gets or sets the type of plasma effect, and the color pattern to use.
            </summary>
      <value>Enumeration that indicates which type of plasma effect to create, and which color pattern to use.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags">
      <summary>
        <para>Flags that determine the type of brick edge to use, and which mortar style to use.</para>
      </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Brick edge type</td><td>SolidEdges SmoothedInEdges SmoothedOutEdges</td></tr><tr><td>Mortar type</td><td>TransparentMortar ColoredMortar</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags.None">
      <summary>
            No flags.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags.SolidEdges">
      <summary>
            Solid edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags.SmoothedOutEdges">
      <summary>
            Edges faded from out to in.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags.SmoothedInEdges">
      <summary>
            Edges faded from in to out.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags.TransparentMortar">
      <summary>
            Transparent Mortars.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags.ColoredMortar">
      <summary>
            Use solid color <see cref="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.MortarColor" /> to draw the Mortar.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand">
      <summary>
             Creates a brick texture that makes the image look like it has been drawn on a brick wall. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command creates a brick-like texture. Edges that are in the angle of the light source are 
             brightened and the others are darkened. Apply this texture to an image by using image as the source image. You can 
             obtain the best result by applying this command on a medium brightness image.</description>
          </item>
          <item>
            <description>Using the shading option of BricksTextureCommandFlags.SmoothedOutEdges results in bricks that have 
             a more chiseled look than the same settings with a shading option of BricksTextureCommandFlags.SmoothedInEdges.</description>
          </item>
          <item>
            <description>As an example, suppose you were to start with a gray image, like the following figure:<br /><img src="GraySourceImage.jpg" /><br /></description>
          </item>
          <item>
            <description>Now suppose you call the BricksTextureCommand command. The following settings apply to all of the following figures:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>OffsetX</td><td>0</td></tr><tr><td>OffsetY</td><td>0</td></tr><tr><td>RowDifference</td><td>35</td></tr><tr><td>BricksWidth</td><td>60</td></tr><tr><td>BricksHeight</td><td>20</td></tr></table></description>
          </item>
          <item>
            <description>If you were to use the following additional settings:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>MortarRoughness</td><td>0</td></tr><tr><td>MortarRoughnessEvenness</td><td>0</td></tr><tr><td>BricksRoughness</td><td>0</td></tr><tr><td>BricksRoughnessEvenness</td><td>0</td></tr><tr><td>Flags</td><td>BricksTextureCommandFlags.SmoothedOutEdges</td></tr></table><br />
             The following figure results:<br /><img src="BTBzeroes.jpg" /></description>
          </item>
          <item>
            <description>Note how smooth the surface of both the mortar and the bricks is. In the following figure, the only change from the previous settings is the value of BricksRoughness, which is set to 196:<br /><img src="BTBrough.jpg" /></description>
          </item>
          <item>
            <description>In the following figure, BricksRoughness remains set to 196 and in addition, BricksRoughnessEvenness is set to 4:<br /><img src="BTBsmoothed.jpg" /></description>
          </item>
          <item>
            <description>The next two figures show the difference between the BricksTextureCommandFlags.SmoothedOutEdges flag and the BricksTextureCommandFlags.SmoothedInEdges flag. For these figures the following settings are used:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>MortarRoughness</td><td>0</td></tr><tr><td>MortarRoughnessEvenness</td><td>0</td></tr><tr><td>BricksRoughness</td><td>250</td></tr><tr><td>BricksRoughnessEvenness</td><td>0</td></tr><tr><td>EdgeWidth</td><td>7</td></tr><tr><td>MortarWidth</td><td>4</td></tr></table><br /><item><description>In the following figure the BricksTextureCommandFlags.SmoothedOutEdges flag is set:<br /><img src="BTBSmoothedOut.jpg" /></description></item><br /><item><description>In the following figure the BricksTextureCommandFlags.SmoothedInEdges flag is set:<br /><img src="BTBSmoothedIn.jpg" /></description></item></description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information Refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
             </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> on an empty gray image.</para>
        <code lang="VB">   Public Sub BricksCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim cmd As New FillCommand(New RasterColor(128, 128, 128))
      cmd.Run(leadImage)
      Dim command As BricksTextureCommand = New BricksTextureCommand
      command.BricksWidth = 60
      command.BricksHeight = 20
      command.OffsetX = 0
      command.OffsetY = 0
      command.EdgeWidth = 3
      command.MortarWidth = 4
      command.ShadeAngle = 315
      command.RowDifference = 33
      command.MortarRoughness = 20
      command.MortarRoughnessEvenness = 0
      command.BricksRoughness = 10
      command.BricksRoughnessEvenness = 0
      command.MortarColor = New RasterColor(0, 0, 0)
      command.Flags = BricksTextureCommandFlags.SmoothedOutEdges Or BricksTextureCommandFlags.TransparentMortar
      'Apply Bricks Texture on the Image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BricksCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FillCommand cmd = new FillCommand(new RasterColor(128, 128, 128));
         cmd.Run(image);
         BricksTextureCommand command = new BricksTextureCommand();
         command.BricksWidth = 60;
         command.BricksHeight = 20;
         command.OffsetX = 0;
         command.OffsetY = 0;
         command.EdgeWidth = 3;
         command.MortarWidth = 4;
         command.ShadeAngle = 315;
         command.RowDifference = 33;
         command.MortarRoughness = 20;
         command.MortarRoughnessEvenness = 0;
         command.BricksRoughness = 10;
         command.BricksRoughnessEvenness = 0;
         command.MortarColor = new RasterColor(0, 0, 0);
         command.Flags = BricksTextureCommandFlags.SmoothedOutEdges | BricksTextureCommandFlags.TransparentMortar;
         //Apply Bricks Texture on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BricksCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
             <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> class object with explicit parameters.
            </summary>
      <param name="bricksWidth">Flat area of the brick width, in pixels. Valid range is from 0 to the image width. This parameter only accepts positive values.</param>
      <param name="bricksHeight">Flat area of the brick height, in pixels. Valid range is from 0 to the image height. This parameter only accepts positive values.</param>
      <param name="edgeWidth">Perceived edge width, in pixels, which represents the brick edge width when the brick is viewed from the perpendicular to the front of the brick. Minimum value is 1. See the following figure:<br /><img src="EdgeWidth.jpg" /></param>
      <param name="mortarWidth">Mortar width, or the space between two adjacent bricks. This parameter only accepts positive values.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> on an empty gray image.</para>
        <code lang="VB">   Public Sub BricksConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim cmd As New FillCommand(New RasterColor(128, 128, 128))
      cmd.Run(leadImage)
      Dim command As BricksTextureCommand = New BricksTextureCommand(60, 20, 3, 4)
      'Apply Bricks Texture on the Image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BricksConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FillCommand cmd = new FillCommand(new RasterColor(128, 128, 128));
         cmd.Run(image);
         BricksTextureCommand command = new BricksTextureCommand(60, 20, 3, 4);
         //Apply Bricks Texture on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BricksCommand.BricksConstructor_S1-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> class object with explicit parameters.
            </summary>
      <param name="bricksWidth">Flat area of the brick width, in pixels. Valid range is from 0 to the image width. This parameter only accepts positive values.</param>
      <param name="bricksHeight">Flat area of the brick height, in pixels. Valid range is from 0 to the image height. This parameter only accepts positive values.</param>
      <param name="edgeWidth">Perceived edge width, in pixels, which represents the brick edge width when the brick is viewed from the perpendicular to the front of the brick. Minimum value is 1. See the following figure:<br /><img src="EdgeWidth.jpg" /></param>
      <param name="mortarWidth">Mortar width, or the space between two adjacent bricks. This parameter only accepts positive values.</param>
      <param name="mortarRoughness">Mortar roughness. Valid range is from 0 to 300. At 0, the mortar looks completely smooth. Use higher values to increase the roughness.</param>
      <param name="mortarRoughnessEvenness">Weathering factor for the mortar. Valid range is from 0 to 10. The higher the value the more weathered the mortar looks.</param>
      <param name="bricksRoughness">Brick roughness. Valid range is from 0 to 300. At 0, the brick looks completely smooth. Use higher values to increase the roughness of the brick surface.</param>
      <param name="bricksRoughnessEvenness">Weathering factor for the bricks. Valid range is from 0 to 10. The higher the value the more weathered the bricks look.</param>
      <param name="shadeAngle">Angle, in degrees, that identifies from which side the light will hit the brick edges, resulting in a brightening of the opposite angle edges, and the darkening of the other edges. Valid range is from 0 to 360.</param>
      <param name="mortarColor">Fill color that specifies the mortar color.</param>
      <param name="flags">Flags that indicate which type of brick edge to use, and which mortar style to use.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> on an empty gray image.</para>
        <code lang="VB">   Public Sub BricksConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim cmd As New FillCommand(New RasterColor(128, 128, 128))
      cmd.Run(leadImage)
      Dim command As BricksTextureCommand = New BricksTextureCommand(60, 20, 3, 4, 315, 20, 0, 10, 0, New RasterColor(0, 0, 0), BricksTextureCommandFlags.SmoothedOutEdges Or BricksTextureCommandFlags.TransparentMortar)
      'Apply Bricks Texture on the Image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BricksConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FillCommand cmd = new FillCommand(new RasterColor(128, 128, 128));
         cmd.Run(image);
         BricksTextureCommand command = new BricksTextureCommand(60, 20, 3, 4, 315, 20, 0, 10, 0, new RasterColor(0, 0, 0), BricksTextureCommandFlags.SmoothedOutEdges | BricksTextureCommandFlags.TransparentMortar);
         //Apply Bricks Texture on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BricksCommand.BricksConstructor_S2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommandFlags,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> class object with explicit parameters.
            </summary>
      <param name="bricksWidth">Flat area of the brick width, in pixels. Valid range is from 0 to the image width. This parameter only accepts positive values.</param>
      <param name="bricksHeight">Flat area of the brick height, in pixels. Valid range is from 0 to the image height. This parameter only accepts positive values.</param>
      <param name="edgeWidth">Perceived edge width, in pixels, which represents the brick edge width when the brick is viewed from the perpendicular to the front of the brick. Minimum value is 1. See the following figure:<br /><img src="EdgeWidth.jpg" /></param>
      <param name="mortarWidth">Mortar width, or the space between two adjacent bricks. This parameter only accepts positive values.</param>
      <param name="mortarRoughness">Mortar roughness. Valid range is from 0 to 300. At 0, the mortar looks completely smooth. Use higher values to increase the roughness.</param>
      <param name="mortarRoughnessEvenness">Weathering factor for the mortar. Valid range is from 0 to 10. The higher the value the more weathered the mortar looks.</param>
      <param name="bricksRoughness">Brick roughness. Valid range is from 0 to 300. At 0, the brick looks completely smooth. Use higher values to increase the roughness of the brick surface.</param>
      <param name="bricksRoughnessEvenness">Weathering factor for the bricks. Valid range is from 0 to 10. The higher the value the more weathered the bricks look.</param>
      <param name="shadeAngle">Angle, in degrees, that identifies from which side the light will hit the brick edges, resulting in a brightening of the opposite angle edges, and the darkening of the other edges. Valid range is from 0 to 360.</param>
      <param name="mortarColor">Fill color that specifies the mortar color.</param>
      <param name="flags">Flags that indicate which type of brick edge to use, and which mortar style to use.</param>
      <param name="offsetX">The X distance between the image origin and the first brick origin, in pixels. This parameter only accepts positive values.</param>
      <param name="offsetY">The Y distance between the image origin and the first brick origin, in pixels. This parameter only accepts positive values.</param>
      <param name="rowDifference">Horizontal distance between the first brick of the first row and the first brick on the next row, in pixels. Setting this value to zero will make a grid-like wall. Valid range is from 0 to image width.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> on an empty gray image.</para>
        <code lang="VB">   Public Sub BricksConstructorExample_S3()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim cmd As New FillCommand(New RasterColor(128, 128, 128))
      cmd.Run(leadImage)
      Dim command As BricksTextureCommand = New BricksTextureCommand(60, 20, 0, 0, 3, 4, 315, 33, 20, New RasterColor(0, 0, 0), BricksTextureCommandFlags.None, 0, 0, BricksTextureCommandFlags.SmoothedOutEdges Or BricksTextureCommandFlags.TransparentMortar)
      'Apply Bricks Texture on the Image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BricksConstructorExample_S3()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FillCommand cmd = new FillCommand(new RasterColor(128, 128, 128));
         cmd.Run(image);
         BricksTextureCommand command = new BricksTextureCommand(60, 20, 0, 0, 3, 4, 315, 33, 20, new RasterColor(0, 0, 0), BricksTextureCommandFlags.None, 0, 0, (int) (BricksTextureCommandFlags.SmoothedOutEdges | BricksTextureCommandFlags.TransparentMortar));
         //Apply Bricks Texture on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BricksCommand.BricksConstructor_S3-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.BricksWidth">
      <summary>
            Gets or sets the flat area of the brick width, in pixels.
            </summary>
      <value>The flat area of the brick width, in pixels. Valid range is from 0 to the image width. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.BricksHeight">
      <summary>
            Gets or sets the flat area of the brick height, in pixels.
            </summary>
      <value>Flat area of the brick height, in pixels. Valid range is from 0 to the image height. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.OffsetX">
      <summary>
            Gets or sets the X distance between the image origin and the first brick origin, in pixels.
            </summary>
      <value>The X distance between the image origin and the first brick origin, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.OffsetY">
      <summary>
            Gets or sets the Y distance between the image origin and the first brick origin, in pixels.
            </summary>
      <value>The Y distance between the image origin and the first brick origin, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.EdgeWidth">
      <summary>
            Gets or sets the perceived edge width, in pixels.
            </summary>
      <value>Perceived edge width, in pixels, which represents the brick edge width when the brick is viewed from the perpendicular to the front of the brick. Minimum value is 1. See the following figure:<br /><img src="EdgeWidth.jpg" /></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.MortarWidth">
      <summary>
            Gets or sets the Mortar width or the space between two adjacent bricks.
            </summary>
      <value>Mortar width or the space between two adjacent bricks. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.ShadeAngle">
      <summary>
            Gets or sets the angle, in degrees.
            </summary>
      <value>Angle, in degrees, that identifies from which side the light will hit the brick edges, resulting in a brightening of the opposite angle edges, and the darkening of the other edges. Valid range is from 0 to 360.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.RowDifference">
      <summary>
            Gets or sets the horizontal distance between the first brick of the first row and the first brick on the next row, in pixels. Setting this value to zero will make a grid-like wall. Valid range is from 0 to image width.
            </summary>
      <value>Horizontal distance between the first brick of the first row and the first brick on the next row, in pixels. Setting this value to zero will make a grid-like wall. Valid range is from 0 to image width.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.MortarRoughness">
      <summary>
            Gets or sets the mortar roughness.
            </summary>
      <value>Mortar roughness. Valid range is from 0 to 300. At 0, the mortar looks completely smooth. Use higher values to increase the roughness.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.MortarRoughnessEvenness">
      <summary>
            Gets or sets the weathering factor for the mortar.
            </summary>
      <value>Weathering factor for the mortar. Valid range is from 0 to 10. The higher the value the more weathered the mortar looks.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.BricksRoughness">
      <summary>
            Gets or sets the Brick roughness.
            </summary>
      <value>Brick roughness. Valid range is from 0 to 300. At 0, the brick looks completely smooth. Use higher values to increase the roughness of the brick surface.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.BricksRoughnessEvenness">
      <summary>
            Gets or sets the weathering factor for the bricks.
            </summary>
      <value>Weathering factor for the bricks. Valid range is from 0 to 10. The higher the value the more weathered the bricks look.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.MortarColor">
      <summary>
            Gets or sets the fill color that specifies the mortar color.
            </summary>
      <value>Fill color that specifies the mortar color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand.Flags">
      <summary>
            Gets or sets the flags that indicate which type of brick edge to use, and which mortar style to use.
            </summary>
      <value>Flags that indicate which type of brick edge to use, and which mortar style to use.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags">
      <summary>
            Flags that indicate how to handle peripherally exposed areas, how to handle centrally exposed areas and the type of bending.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how to handle peripherally exposed areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>Flags that indicate how to handle an exposed center</td><td>Rotate, WithoutRotate</td></tr><tr><td>Flags that indicate how the image is bent</td><td>Normal, Horizontal, Vertical</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.Color">
      <summary>
             Fill any exposed areas with the fill color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.Repeat">
      <summary>
             Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.Rotate">
      <summary>
            Rotate the image inside the arc pattern.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.WithoutRotate">
      <summary>
            Fill the exposed center as you would any other exposed area. This is determined by setting the Color, Repeat or NoChange flags.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.Normal">
      <summary>
            Stretch the image along the vertical and horizontal planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.Horizontal">
      <summary>
            Stretch the image along the horizontal plane.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags.Vertical">
      <summary>
            Stretch the image along the vertical plane.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand">
      <summary>
            Warps the active image along a curved plane, centered on the pivot point. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command bends the image around the specified CenterPoint. The center point must be defined inside the image or inside the region, if the image has a region. If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub BendCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As BendCommand = New BendCommand
      command.Value = 100
      ' bend the image around it is center.
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Flags = BendCommandFlags.Repeat Or BendCommandFlags.WithoutRotate Or BendCommandFlags.Normal
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BendCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         BendCommand command = new BendCommand();
         command.Value         = 100;
         // bend the image around it is center.
         command.CenterPoint   = new LeadPoint(image.Width  / 2, image.Height / 2);
         command.Flags         = BendCommandFlags.Repeat | BendCommandFlags.WithoutRotate | BendCommandFlags.Normal;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BendCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BendCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BendCommand.#ctor(System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" /> class object with explicit parameters.
            </summary>
      <param name="value">Amount of stretching, where positive values stretch the pixels toward the edges, and negative values stretch the pixels toward the center. Possible values are range in between -500 and 500.</param>
      <param name="centerPoint">Contains the center of the arc. This is ignored when either <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags" />.Horizontal or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags" />.Vertical is set in the flags parameter.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle peripherally exposed areas, how to handle centrally exposed areas and the type of bending. You can use a bitwise OR (|) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub BendConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As BendCommand = New BendCommand
      command.Value = -250
      ' bend the Image around it is center.
      command.CenterPoint = New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer))
      command.Flags = BendCommandFlags.Color Or BendCommandFlags.WithoutRotate Or BendCommandFlags.Normal
      command.FillColor = New RasterColor(255, 0, 0)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BendConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         BendCommand command = new BendCommand();
         command.Value = -250;
         // bend the image around it is center.
         command.CenterPoint = new LeadPoint(image.Width / 2, image.Height / 2);
         command.Flags = BendCommandFlags.Color | BendCommandFlags.WithoutRotate | BendCommandFlags.Normal;
         command.FillColor = new RasterColor(255,0,0);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BendCommand.BendConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BendCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>String that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BendCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BendCommand.Value">
      <summary>
            Gets or sets the amount of stretching.
            </summary>
      <value>Amount of stretching, where positive values stretch the pixels toward edges, and negative values stretch the pixels toward the center. Possible values are range in between -500 and 500.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BendCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the center of the arc.
            </summary>
      <value>Point structure that contains the center of the arc. This is ignored when either <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags" />.Horizontal or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommandFlags" />.Vertical is set in the Flags property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BendCommand.FillColor">
      <summary>
            Gets or sets a value that represents the fill color for any exposed areas.
            </summary>
      <value>Value that represents the fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BendCommand.Flags">
      <summary>
            Gets or sets a value that indicates how to handle peripherally exposed areas, how to handle centrally exposed areas and the type of bending.
            </summary>
      <value>Value that indicates how to handle peripherally exposed areas, how to handle centrally exposed areas and the type of bending. You can use a bitwise OR (|) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags">
      <summary>
            This enumeration contains all flags that are needed by the VignnetCommand.
            It includes values used to select the shape of the vignette object and 
            the type of color filling.
            </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Drawing Shape</td><td>Square, Rectangle, Circle, Ellipse</td></tr><tr><td>Color Filling</td><td>Fillin, FillOut</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags.Square">
      <summary>
            Use a square vignette shape.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags.Rectangle">
      <summary>
            Use a rectangular vignette shape.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags.Circle">
      <summary>
            Use a circular vignette shape.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags.Ellipse">
      <summary>
            Use an elliptical vignette shape.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags.Fillin">
      <summary>
            Use the VignetteColor property to fill the inside of the vignette object.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags.FillOut">
      <summary>
            Use the VignetteColor property to fill the outside of the vignette object.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand">
      <summary>
            Draws a specified shape and feathers it to the image. This method is 
            available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method can be used to draw a circle, ellipse, 
            rectangle or square to create a vignette shape and then a color is feathered
            to the image, filling either the inside or the outside of the vignette shape.
            </description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> on an image.</para>
        <code lang="VB">   Public Sub VignnetCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As VignnetCommand = New VignnetCommand
      command.Origin = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Fading = 50
      command.FadingRate = 100
      command.Width = 20
      command.Height = 20
      command.VignetteColor = New RasterColor(0, 0, 0)
      command.Flags = VignnetCommandFlags.Ellipse Or VignnetCommandFlags.Fillin
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void VignnetCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         VignnetCommand command = new VignnetCommand();
         command.Origin = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Fading        = 50;
         command.FadingRate    = 100;
         command.Width         = 20;
         command.Height        = 20;
         command.VignetteColor = new RasterColor(0,0,0);
         command.Flags         = VignnetCommandFlags.Ellipse | VignnetCommandFlags.Fillin;

         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.VignnetCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.#ctor">
      <summary>
            Initializes a new VignnetCommand with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags)">
      <summary>
            Initializes a new VignnetCommand with explicit parameters.
            </summary>
      <param name="origin">Center point for all vignette objects (circle, ellipse, rectangle, and square).</param>
      <param name="fading">Represents the percent of feathering in towards or outward from 
            the vignette object. Negative values mean that the feathering will start 
            outside the boundaries of the object and increase toward the object. 
            Positive values mean that the feathering will start on the boundaries of 
            the object and increase away from the object. Possible values range 
            from -100 to 100.</param>
      <param name="fadingRate">Represents the value that indicates the fading rate. This value is 
            used to controlling the fading process. It will be divided by 100 
            internally. The valid range is from 0 to 100.</param>
      <param name="width">Represents the value that indicates the dimension of the vignette object
            in pixels.</param>
      <param name="height">Represents the value that indicates the height in pixels of the vignette 
            ellipse or rectangle objects.This property is ignored if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags">VignnetCommandFlags.Circle</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags">VignnetCommandFlags.Square</see>
             flag is set.</param>
      <param name="vignetteColor">Represents the value that specifies the vignette object color.</param>
      <param name="flags">Enumeration that specifies how to apply the Vignnet effect.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> on an image.</para>
        <code lang="VB">   Public Sub VignnetConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As VignnetCommand = New VignnetCommand(New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), 50, 100, 20, 20, New RasterColor(0, 0, 0), VignnetCommandFlags.Ellipse Or VignnetCommandFlags.Fillin)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void VignnetConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         VignnetCommand command = new VignnetCommand(new LeadPoint((image.Width / 2), (image.Height / 2)), 50, 100, 20, 20, new RasterColor(0, 0, 0), VignnetCommandFlags.Ellipse | VignnetCommandFlags.Fillin);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.VignnetCommand.VignnetConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags)">
      <summary>
            Initializes a new VignnetCommand with explicit parameters.
            </summary>
      <param name="origin">Center point for all vignette objects (circle, ellipse, rectangle, and square).</param>
      <param name="fading">Represents the percent of feathering in towards or outward from 
            the vignette object. Negative values mean that the feathering will start 
            outside the boundaries of the object and increase toward the object. 
            Positive values mean that the feathering will start on the boundaries of 
            the object and increase away from the object. Possible values range 
            from -100 to 100.</param>
      <param name="fadingRate">Represents the value that indicates the fading rate. This value is 
            used to controlling the fading process. It will be divided by 100 
            internally. The valid range is from 0 to 100.</param>
      <param name="width">Represents the value that indicates the dimension of the vignette object
            in pixels.</param>
      <param name="vignetteColor">Represents the value that specifies the vignette object color.</param>
      <param name="flags">Enumeration that specifies how to apply the Vignnet effect.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> on an image.</para>
        <code lang="VB">   Public Sub VignnetConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As VignnetCommand = New VignnetCommand(New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), 50, 100, 20, 20, New RasterColor(0, 0, 0), VignnetCommandFlags.Ellipse Or VignnetCommandFlags.Fillin)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void VignnetConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         VignnetCommand command = new VignnetCommand(new LeadPoint((image.Width / 2), (image.Height / 2)), 50, 100, 20, 20, new RasterColor(0, 0, 0), VignnetCommandFlags.Ellipse | VignnetCommandFlags.Fillin);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.VignnetCommand.VignnetConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.Origin">
      <summary>
            Gets or sets the center point for all vignette objects (circle, ellipse, rectangle, and square).
            </summary>
      <value>Center point for all vignette objects (circle, ellipse, rectangle, and square).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.Fading">
      <summary>
            Gets or sets the value that represents the percent of feathering in towards or outward from the 
            vignette object. 
            </summary>
      <value>Represents the percent of feathering in towards or outward from 
            the vignette object. Negative values mean that the feathering will start 
            outside the boundaries of the object and increase toward the object. 
            Positive values mean that the feathering will start on the boundaries of 
            the object and increase away from the object. Possible values range 
            from -100 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.FadingRate">
      <summary>
            Gets or sets the value that represents the value which indicates the fading rate.
            </summary>
      <value>Represents the value that indicates the fading rate. This value is 
            used to controlling the fading process. It will be divided by 100 
            internally. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.Width">
      <summary>
            Gets or sets the value that represents the value which indicates the dimension of the vignette object
            in pixels.
            </summary>
      <value>Represents the value that indicates the dimension of the vignette object
            in pixels.
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, Width property contains:</b></td></tr><tr><td vlign="top" hlign="center"><b>VignnetCommandFlags.Square</b></td><td vlign="top" hlign="center"><b>Square width</b></td></tr><tr><td vlign="top" hlign="center"><b>VignnetCommandFlags.Rectangle</b></td><td vlign="top" hlign="center"><b>Rectangle width</b></td></tr><tr><td vlign="top" hlign="center"><b>VignnetCommandFlags.Circle</b></td><td vlign="top" hlign="center"><b>Circle radius.</b></td></tr><tr><td vlign="top" hlign="center"><b>VignnetCommandFlags.Ellipse</b></td><td vlign="top" hlign="center"><b>Ellipse width.</b></td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.Height">
      <summary>
            Gets or sets the value that represents the height in pixels of the vignette 
            ellipse or rectangle objects. 
            </summary>
      <value>Represents the value that indicates the height in pixels of the vignette 
            ellipse or rectangle objects.This property is ignored if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags">VignnetCommandFlags.Circle</see> or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommandFlags">VignnetCommandFlags.Square</see> flag is set.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.VignetteColor">
      <summary>
            Gets or sets the value that represents the vignette object color.
            </summary>
      <value>Represents the value that specifies the vignette object color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand.Flags">
      <summary>
            Gets or sets the enumeration that contains all the flags that are needed by the VignnetCommand.
            It includes the values used to select the shape of the vignette object and 
            the type of color filling.
            </summary>
      <value>Enumeration containing all flags that are needed by the VignnetCommand.
            It includes the values used to select the shape of the vignette object and 
            the type of color filling.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommandType">
      <summary>
            This enumeration indicates how to handle exposed areas.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RippleCommandType.Color">
      <summary>
            Fill any exposed areas with the color stored in the FillColor property
            of the RippleCommand class, or the fillColor parameter if you are using the appropriate RippleCommand Constructor.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RippleCommandType.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RippleCommandType.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand">
      <summary>
            Warps the image in concentric rings. This command is available in the 
            <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command will warp the image as a series of rings 
            radiating out from the center point. The center point must be defined 
            inside the image or inside the region, if the image has a region.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied 
            on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images.
            Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the
            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RippleCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RippleCommand = New RippleCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Amplitude = 20
      command.Frequency = 10
      command.Phase = 0
      command.Attenuation = 0
      command.FillColor = New RasterColor(0, 0, 0)
      command.Type = RippleCommandType.Repeat
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RippleCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RippleCommand command = new RippleCommand();
         command.CenterPoint = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Amplitude     = 20;
         command.Frequency     = 10;
         command.Phase         = 0;
         command.Attenuation   = 0;
         command.FillColor     = new RasterColor(0,0,0);
         command.Type          = RippleCommandType.Repeat;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RippleCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.#ctor">
      <summary>
            Initializes a new RippleCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.RippleCommandType)">
      <summary>
            Initializes a new RippleCommand class object with explicit parameters.
            </summary>
      <param name="amplitude">Wave magnitude(amount of displacement). Only 
            positive values are accepted.</param>
      <param name="frequency">Number of repeated waves along the radial line.
            Only positive values are accepted.</param>
      <param name="phase">Wave phase shift, in hundredths of degrees. The 
            valid range is from -36000 to 36000 (The value in degrees is phase 
            divided by 100).</param>
      <param name="attenuation">Attenuation value. The attenuation value 
            indicates how rapidly the wave amplitude decays as the wave travels 
            along the radial line. The values range from 0 - 1000.</param>
      <param name="centerPoint">The center of the Ripple wave.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="type">Value that indicates how to handle exposed areas.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RippleConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RippleCommand = New RippleCommand(20, 10, 0, 0, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), New RasterColor(0, 0, 0), RippleCommandType.Repeat)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RippleConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RippleCommand command = new RippleCommand(20, 10, 0, 0, new LeadPoint((image.Width / 2), (image.Height / 2)), new RasterColor(0,0,0), RippleCommandType.Repeat);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RippleCommand.RippleConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.Amplitude">
      <summary>
            Gets or sets the wave magnitude(amount of displacement). 
            </summary>
      <value>Wave magnitude(amount of displacement). Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.Frequency">
      <summary>
            Gets or sets the number of repeated waves along the radial line.
            </summary>
      <value>Number of repeated waves along the radial line. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.Phase">
      <summary>
            Gets or sets the wave phase shift, in hundredths of degrees.
            </summary>
      <value>Wave phase shift, in hundredths of degrees. The valid range is
            from -36000 to 36000 (The value in degrees is Phase property  
            divided by 100).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.Attenuation">
      <summary>
            Gets or sets the attenuation value. The attenuation value indicates how rapidly the wave 
            amplitude decays as the wave travels along the radial line.
            </summary>
      <value>Attenuation value. The attenuation value indicates how rapidly
            the wave amplitude decays as the wave travels along the radial line. 
            The values range from 0 - 1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.CenterPoint">
      <summary>
            Gets or sets the center of the Ripple wave.
            </summary>
      <value>The center of the Ripple wave.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RippleCommand.Type">
      <summary>
            Gets or sets a flag that indicates how to handle exposed areas.
            </summary>
      <value>Value that indicates how to handle exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags">
      <summary>
        <para>Flags that indicate how to handle exposed areas and the type of information contained in WaveLength property or waveLength parameter.</para>
      </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Exposed Areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>WaveLength</td><td>Period, Frequency</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags.Color">
      <summary>
            Fill any exposed areas with <see cref="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.FillColor" />.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags.Period">
      <summary>
            The value of WaveLength property or the waveLength parameter is a wave length given as a percent of the image dimensions. If this flag is used, the valid range for the wavelength value is from 0 to 100.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags.Frequency">
      <summary>
            The value in the WaveLength property or the waveLength parameter is the frequency, or the number of times the wave repeats.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand">
      <summary>
            Distorts the image by the wave specified in the amplitudes array and the rotation angle. 
            This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command applies the wave in the amplitudes array. You can repeat and rotate the wave in any direction. The amplitudes data can be obtained from the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetCurvePoints(System.Int32[],Leadtools.LeadPoint[],Leadtools.ImageProcessing.Effects.CurvePointsType)" /> utility method.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" /> on an image and apply triangular wave on the loaded image.</para>
        <code lang="VB">   Public Sub FreeHandWaveCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim UserPoint() As LeadPoint
      ReDim UserPoint(3)

      Dim Amplitudes() As Integer
      ReDim Amplitudes(12)

      Dim command As FreeHandWaveCommand = New FreeHandWaveCommand

      ' Fill UserPoint array with points that define a triangular wave
      UserPoint(0).X = 0
      UserPoint(0).Y = 0
      UserPoint(1).X = 3
      UserPoint(1).Y = 10
      UserPoint(2).X = 9
      UserPoint(2).Y = -10
      UserPoint(3).X = 12
      UserPoint(3).Y = 0

      'Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array
      EffectsUtilities.GetCurvePoints(Amplitudes, UserPoint, CurvePointsType.Linear)

      command.Amplitudes = Amplitudes
      command.Scale = 100
      command.WaveLength = 10
      command.Angle = 0
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = FreeHandWaveCommandFlags.Repeat Or FreeHandWaveCommandFlags.Frequency
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreeHandWaveCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] UserPoint = new LeadPoint[4];
         int[]   Amplitudes = new int[13];

         FreeHandWaveCommand command = new FreeHandWaveCommand();

         // Fill UserPoint array with points that define a triangular wave
         UserPoint[0].X = 0;
         UserPoint[0].Y = 0;
         UserPoint[1].X = 3;
         UserPoint[1].Y = 10;
         UserPoint[2].X = 9;
         UserPoint[2].Y = -10;
         UserPoint[3].X = 12;
         UserPoint[3].Y = 0;

         //Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array.
         EffectsUtilities.GetCurvePoints(Amplitudes, UserPoint, CurvePointsType.Linear);

         command.Amplitudes = Amplitudes;
         command.Scale = 100;
         command.WaveLength = 10;
         command.Angle = 0;
         command.FillColor = new RasterColor(0, 0, 0);
         command.Flags = FreeHandWaveCommandFlags.Repeat | FreeHandWaveCommandFlags.Frequency;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreeHandWaveCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.#ctor">
      <summary>
            Initializes a new FreeHandWaveCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.#ctor(System.Int32[],System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags)">
      <summary>
            Initializes a new FreeHandWaveCommand class object with explicit parameters.
            </summary>
      <param name="amplitudes">Array of integers that represent wave values. The real value of the array elements is divided by 1000. These values are generally obtained from the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetCurvePoints(System.Int32[],Leadtools.LeadPoint[],Leadtools.ImageProcessing.Effects.CurvePointsType)" /> utility method.</param>
      <param name="scale">Factor used to increase or decrease the various amplitude values in the amplitudes array. Each value in the amplitudes array is multiplied by this factor. 
            The real factor value is the Scale value divided by 100. This property only accepts positive values.</param>
      <param name="waveLength">Value that represents the wave length, if <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags">FreeHandWaveCommandFlags.Period</see> flag is set. Possible values range from 1 - 100 and give the wavelength as a percentage of the image dimensions. If <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags">FreeHandWaveCommandFlags.Frequency</see> flag is set, this value is the number of repeated waves.</param>
      <param name="angle">Wave rotation angle in hundredths of a degree (+/-). The valid range is from -36000 to 36000. The value in degrees is angle divided by 100.</param>
      <param name="fillColor">RasterColor object that specifies the fill color for any exposed areas.</param>
      <param name="flags">FreeHandWaveCommandFlags enumeration that indicate how to handle exposed areas, and the type of information contained in waveLength parameter.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" /> on an image and apply triangular wave on the loaded image.</para>
        <code lang="VB">   Public Sub FreeHandWaveConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim userPoint() As LeadPoint
      ReDim userPoint(3)
      ' Fill UserPoint array with points that define a triangular wave
      userPoint(0).X = 0
      userPoint(0).Y = 0
      userPoint(1).X = 3
      userPoint(1).Y = 10
      userPoint(2).X = 9
      userPoint(2).Y = -10
      userPoint(3).X = 12
      userPoint(3).Y = 0

      Dim amplitudes() As Integer
      ReDim amplitudes(12)
      'Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array
      EffectsUtilities.GetCurvePoints(amplitudes, userPoint, CurvePointsType.Linear)

      Dim command As FreeHandWaveCommand
      command = New FreeHandWaveCommand(amplitudes, 100, 10, 0, New RasterColor(0, 0, 0), FreeHandWaveCommandFlags.Repeat Or FreeHandWaveCommandFlags.Frequency)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreeHandWaveConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] userPoint = new LeadPoint[4];
         // Fill UserPoint array with points that define a triangular wave
         userPoint[0].X = 0;
         userPoint[0].Y = 0;
         userPoint[1].X = 3;
         userPoint[1].Y = 10;
         userPoint[2].X = 9;
         userPoint[2].Y = -10;
         userPoint[3].X = 12;
         userPoint[3].Y = 0;

         int[] amplitudes = new int[13];
         //Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array.
         EffectsUtilities.GetCurvePoints(amplitudes, userPoint, CurvePointsType.Linear);

         FreeHandWaveCommand command = new FreeHandWaveCommand(amplitudes, 100, 10, 0, new RasterColor(0, 0, 0), FreeHandWaveCommandFlags.Repeat | FreeHandWaveCommandFlags.Frequency);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreeHandWaveCommand.FreeHandWaveConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.Amplitudes">
      <summary>
            Gets or sets an array of integers that represent wave values.
            </summary>
      <value>Array of integers that represent wave values. The real value of the array elements is divided by 1000, and the valid value of each element in the array is between -1000 and 1000. These values are generally obtained from the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetCurvePoints(System.Int32[],Leadtools.LeadPoint[],Leadtools.ImageProcessing.Effects.CurvePointsType)" /> utility method. They may also be obtained through the FreeHandWave Dialog.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.Scale">
      <summary>
            Gets or sets a value used to increase or decrease the various amplitude values in the Amplitudes array.
            </summary>
      <value>Factor used to increase or decrease the various amplitude values in the Amplitudes array. Each value in the Amplitudes array is multiplied by this factor. The real factor value is the Scale value divided by 100. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.WaveLength">
      <summary>
            Gets or sets a value that represents the wave length.
            </summary>
      <value>Value that represents the wave length, if <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags">FreeHandWaveCommandFlags.Period</see> is set in the Flags property. Possible values range from 1 - 100 and give the wavelength as a percentage of the image dimensions. If <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommandFlags">FreeHandWaveCommandFlags.Frequency</see> is set in Flags property, this value is the number of repeated waves.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.Angle">
      <summary>
            Gets or sets the wave rotation angle in hundredths of a degree (+/-).
            </summary>
      <value>Wave rotation angle in hundredths of a degree (+/-). The valid range is from -36000 to 36000. The value in degrees is Angle divided by 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.FillColor">
      <summary>
            Gets or sets a RasterColor object that specifies the fill color for any exposed areas.
            </summary>
      <value>RasterColor object that specifies the fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand.Flags">
      <summary>
            Gets or sets a value that indicates how to handle exposed areas, and the type of information contained in the WaveLength property.
            </summary>
      <value>Value that indicates how to handle exposed areas, and the type of information contained in the WaveLength property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle">
      <summary>
            Enumerated value indicating the direction of the light source producing the shadow. 
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.East">
      <summary>
            East.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.NorthEast">
      <summary>
            Northwest.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.North">
      <summary>
            North.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.NorthWest">
      <summary>
            Northeast.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.West">
      <summary>
            West.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.SouthWest">
      <summary>
            Southwest.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.South">
      <summary>
            South.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle.SouthEast">
      <summary>
            Southeast.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType">
      <summary>
            Enumerated values that indicate the type of the shadow.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType.GrayShadow">
      <summary>
            Shadows are grayscale.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType.ColoredShadow">
      <summary>
            Shadows are colored.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand">
      <summary>
            Adds shadows to the image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command applies a convolution matrix upon each color component and then combines the results in order to add shadows.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ShadowCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ShadowCommand = New ShadowCommand
      command.Angle = ShadowCommandAngle.SouthEast
      command.Threshold = 0
      command.Type = ShadowCommandType.GrayShadow
      ' Apply  shadow effect  to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ShadowCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ShadowCommand command = new ShadowCommand();
         command.Type = ShadowCommandType.GrayShadow;
         command.Angle = ShadowCommandAngle.SouthEast;
         command.Threshold = 0;
         //Apply shadow effect  to the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ShadowCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand.#ctor(Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle,System.Int32,Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" /> class object with explicit parameters.
            </summary>
      <param name="angle">Angle value indicating the direction of the light source producing the shadow.</param>
      <param name="threshold">Threshold value used to determine which pixels will be affected . Valid values range from 0 through 255. When Type = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType" />.ColoredShadow, any component (R, G, or B) of a pixel with a value less than the Threshold value is not affected. When Type = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType" />.GrayShadow, any pixel where the master channel value is less than the Threshold value is not affected.</param>
      <param name="type">Type of the shadow.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ShadowConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ShadowCommand = New ShadowCommand(ShadowCommandAngle.SouthEast, 0, ShadowCommandType.GrayShadow)
      ' Apply  shadow effect to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ShadowConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ShadowCommand command = new ShadowCommand(ShadowCommandAngle.SouthEast, 0, ShadowCommandType.GrayShadow);
         // Apply  shadow effect to the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ShadowCommand.ShadowConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand.Angle">
      <summary>
            Gets or sets a value indicating the direction of the light source producing the shadow.
            </summary>
      <value>Angle value indicating the direction of the light source producing the shadow.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand.Threshold">
      <summary>
            Gets or sets a threshold value used to determine which pixels will be affected.
            </summary>
      <value>Threshold value used to determine which pixels will be affected . Valid values range from 0 through 255. When Type = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType" />.ColoredShadow, any component (R, G, or B) of a pixel with a value less than the Threshold value is not affected. When Type = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandType" />.GrayShadow, any pixel where the master channel value is less than the Threshold value is not affected.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand.Type">
      <summary>
            Gets or sets a value that represents the type of the shadow.
            </summary>
      <value>Type of the shadow.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags">
      <summary>
            This enumeration indicates how to apply the puzzle effect to an image.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags.None">
      <summary>
            No Flags selected.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags.Border">
      <summary>
            Draw borders around the puzzle blocks. Use the BorderColor property 
            of the PuzzleEffectCommand class, or the borderColor parameter if you are using the appropriate Constructor, to set the border color. If the 
            Resize flag is not set and the edge blocks have a different 
            size than the inner blocks, the border will not be drawn for the 
            right and the bottom edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags.Shuffle">
      <summary>
            Shuffle the blocks around, controlling the randomization process by the 
            Randomize property of the PuzzleEffectCommand class, or the randomize parameter of the appropriate Constructor. If this flag 
            is not set, the blocks will stay in their original position. 
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags.Size">
      <summary>
            Apply the puzzle effect using the XBlock and YBlock properties of 
            the PuzzleEffectCommand class, or the xblock and yblock parameters if you are using the appropriate Constructor, as the width and height of each block, 
            in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags.Count">
      <summary>
            Apply the puzzle effect using the XBlock and YBlock properties of 
            the PuzzleEffectCommand class, or the xblock and yblock parameters if you are using th appropriate Constructor, as the number of blocks per row and per 
            column.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags.Resize">
      <summary>
            Resize the image to be sure that all blocks have equal size. If this 
            flag is not set then the remainder of the image (edge blocks) will be
            manipulated differently than the inner blocks.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand">
      <summary>
            Splits the image into square blocks and randomizes these blocks
            inside the image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above
            toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command can process the whole image or a region 
            of the image. If the image has a region, the effect is applied only to 
            the region.</description>
          </item>
          <item>
            <description>Splits the image into a certain number of blocks 
            according to the flags. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags">PuzzleEffectCommandFlags.Size</see> flag
            is set, then the image will be divided into blocks using the XBlock and 
            YBlock properties (or the xblock and yblock parameters if you are using the appropriate Constructor) for the dimensions of the blocks. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags">PuzzleEffectCommandFlags.Count</see> flag 
            is set, then the image will be divided into blocks using the xblock and 
            ybBlock values for the number of blocks per row and number of blocks 
            per column.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags">PuzzleEffectCommandFlags.Resize</see> flag is not set, the edge blocks 
            might have a different size than the inner blocks. This means the edge 
            blocks will be manipulated differently than the inner blocks. The inner 
            blocks that have the same dimensions will be shuffled around. The right 
            edge blocks will be shuffled together and the bottom edge blocks will be 
            shuffled together.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags">PuzzleEffectCommandFlags.Resize</see> flag is set, the image will be 
            resized to be sure that all blocks have the same dimensions. In this 
            case, the edge blocks will not be treated differently than the inner 
            blocks.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags">PuzzleEffectCommandFlags.Border</see> flag is set, borders will be drawn 
            with the color set in the BorderColor property (or the borderColor parameter if you are using the appropriate Constructor). If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Border 
            flag is not set, no borders will be drawn.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Shuffle flag is not set, the blocks will 
            appear in their original positions. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Shuffle flag is set then 
            the blocks will appear randomized. The randomization process will be 
            controlled by the Randomize property, or the randomize parameter if you are using the appropriate Constructor, as follows:</description>
          </item>
          <item>
            <description>If the randomize value is 0, the command will 
            select the starting point for the randomize process. You will get a 
            different result every time you call the command with the randomize 
            value = 0.</description>
          </item>
          <item>
            <description>If the randomize value is greater than 0,
            the command will use this value as a starting point for the randomize 
            process. You will get the same result every time you call the command 
            with the same randomize value &gt; 0.</description>
          </item>
          <item>
            <description>Edge blocks that have the same size as inner blocks 
            might move into the middle of the resulting image. Edge blocks with a 
            different size than inner blocks will remain on the edge.</description>
          </item>
          <item>
            <description>You must set the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Size flag or the Count flag (but 
            not both) for the command to affect the image. If you set the flags 
            to 0, the command leaves the image unchanged.</description>
          </item>
          <item>
            <description>This command supports all bits/pixel supported by 
            LEADTOOLS.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PuzzleEffectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PuzzleEffectCommand = New PuzzleEffectCommand
      command.XBlock = 10
      command.YBlock = 10
      command.Randomize = 0
      command.Flags = PuzzleEffectCommandFlags.Border Or PuzzleEffectCommandFlags.Shuffle Or PuzzleEffectCommandFlags.Count Or PuzzleEffectCommandFlags.Resize
      command.BorderColor = New RasterColor(0, 0, 0)

      ' Apply Puzzle Effect to this image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PuzzleEffectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PuzzleEffectCommand command  = new PuzzleEffectCommand();
         command.XBlock      = 10;
         command.YBlock      = 10;
         command.Randomize   = 0;
         command.Flags       = PuzzleEffectCommandFlags.Border |
            PuzzleEffectCommandFlags.Shuffle |
            PuzzleEffectCommandFlags.Count   |
            PuzzleEffectCommandFlags.Resize;
         command.BorderColor = new RasterColor(0,0,0);

         // Apply Puzzle Effect to this image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PuzzleEffectCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.#ctor">
      <summary>
            Initializes a new PuzzleEffectCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags,Leadtools.RasterColor)">
      <summary>
            Initializes a new PuzzleEffectCommand class object with explicit parameters.
            </summary>
      <param name="xblock">If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Size flag is set, this value represents the width of 
            the each block, in pixels. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Count flag is set, it 
            represents the number of blocks per row. Only positive values are accepted.</param>
      <param name="yblock">If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Size flag is set, this value represents the height
            of the each block, in pixels. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Count flag is set, it 
            represents the number of blocks per column. Only positive values are accepted.</param>
      <param name="randomize">The starting point for the randomization process. Valid values 
            range from 0 through 500. Use 0 to have the command select the 
            starting point. Only positive values are accepted.</param>
      <param name="flags">Flags that indicate how to apply the puzzle 
            effect.</param>
      <param name="borderColor">If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Border flag is set, this value 
            represents the color of the border that will be drawn around the blocks.
            This parameter is ignored if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Border flag is not set.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PuzzleEffectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PuzzleEffectCommand = New PuzzleEffectCommand(16, 16, 0, PuzzleEffectCommandFlags.Border Or PuzzleEffectCommandFlags.Shuffle Or PuzzleEffectCommandFlags.Count Or PuzzleEffectCommandFlags.Resize, New RasterColor(0, 0, 0))
      ' Apply Puzzle Effect to this image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PuzzleEffectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PuzzleEffectCommand command = new PuzzleEffectCommand(16, 16, 0, PuzzleEffectCommandFlags.Border | PuzzleEffectCommandFlags.Shuffle | PuzzleEffectCommandFlags.Size | PuzzleEffectCommandFlags.Resize, new RasterColor(0,0,0));
         // Apply Puzzle Effect to this image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PuzzleEffectCommand.PuzzleEffectConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.XBlock">
      <summary>
            Gets or sets the width of the each block in pixels or the number of 
            blocks per row.
            </summary>
      <value>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Size flag is set, this value represents the width of 
            the each block, in pixels. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Count flag is set, it 
            represents the number of blocks per row. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.YBlock">
      <summary>
            Gets or sets the height of the each block in pixels or the number of 
            blocks per column.
            </summary>
      <value>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Size flag is set, this value represents the height
            of the each block, in pixels. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Count flag is set, it 
            represents the number of blocks per column. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.Randomize">
      <summary>
            Gets or sets the starting point for the randomization process.
            </summary>
      <value>The starting point for the randomization process. Valid values 
            range from 0 through 500. Use 0 to have the command select the 
            starting point. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.BorderColor">
      <summary>
            Gets or sets the color of the border that will be drawn around the blocks.
            </summary>
      <value>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Border flag is set in the Flags property, this value 
            represents the color of the border that will be drawn around the blocks.
            This property is ignored if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommandFlags" />.Border flag is not set.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand.Flags">
      <summary>
            Gets or sets flags that specify how to apply the puzzle effect.
            </summary>
      <value>Flags that specify how to apply the puzzle effect.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommandType">
      <summary>
        <para>Enumeration that indicates the lens type</para>
      </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommandType.Type1">
      <summary>
            Standard lens.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommandType.Type2">
      <summary>
            Moderate wide-angle lens.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommandType.Type3">
      <summary>
            Moderate telephoto lens.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand">
      <summary>
            Simulates the secondary reflections caused when bright lights are facing the camera lens.
             The lens flare is refracted into a series of lightened circles that surround the flare. 
             This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Secondary reflections are caused when bright lights are facing
                        the camera lens. These reflections can show up as spots or banding. The
                        command adds this effect to the image by controlling their number,
                        position, brightness and size of the spots or banding. Each lens type has
                        its own spot distribution and ray thickness.</description>
          </item>
          <item>
            <description>
                            This command supports 12- and 16-bit grayscale and 48- and 64-bit color
                            images. Support for 12- and 16-bit grayscale and 48- and 64-bit color
                            images is available only in the
                            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see>
                            toolkits.
                        </description>
          </item>
          <item>
            <description>This command does not support signed data
                        images.</description>
          </item>
          <item>
            <description>
                            For an example, see the following figure: 
                            <para><img src="Lens_Before.jpg" /></para></description>
          </item>
          <item>
            <description>
                            The following figure shows the same image, after the effect has been
                            applied: 
                            <para><img src="Lens_After.jpg" /></para></description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale
                        images.</description>
          </item>
        </list>For more information, refer to
                <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LensFlareCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As LensFlareCommand = New LensFlareCommand
      'Set the center point in the middle of the first square.
      command.CenterPoint = New LeadPoint(leadImage.Width \ 4, leadImage.Height \ 4)
      command.Brightness = 100
      command.Type = LensFlareCommandType.Type1
      command.Color = New RasterColor(100, 150, 10)
      ' Apply the lens flare effect to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LensFlareCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LensFlareCommand command = new LensFlareCommand();
         //Set the center point in the middle of the first square.
         command.CenterPoint = new LeadPoint(image.Width / 4, image.Height / 4);
         command.Brightness = 100;
         command.Type = LensFlareCommandType.Type1;
         command.Color = new RasterColor(100, 150, 10);
         // Apply the lens flare effect to the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.LensFlareCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.#ctor">
      <summary>
            Initializes a new LensFlareCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.#ctor(Leadtools.LeadPoint,System.Int32,Leadtools.ImageProcessing.SpecialEffects.LensFlareCommandType,Leadtools.RasterColor)">
      <summary>
            Initializes a new LensFlareCommand class object with explicit parameters.
            </summary>
      <param name="centerPoint">Point around which the effect is centered.</param>
      <param name="brightness">The brightness of the flare. This value is divided internally by 100. 
            This parameter affects the brightness of both the flare, and any lightened circles surrounding the flare. This parameter only accepts positive values.</param>
      <param name="type">Flag that indicates the lens type.</param>
      <param name="color">Specifies the color of the main flare.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LensFlareConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As LensFlareCommand = New LensFlareCommand(New LeadPoint(CType((leadImage.Width \ 4), Integer), CType((leadImage.Height \ 4), Integer)), 100, LensFlareCommandType.Type1, New RasterColor(100, 150, 10))
      ' Apply the lens flare effect to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LensFlareConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LensFlareCommand command = new LensFlareCommand(new LeadPoint(image.Width / 4, image.Height / 4), 100, LensFlareCommandType.Type1, new RasterColor(100, 150, 10));
         // Apply the lens flare effect to the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.LensFlareCommand.LensFlareConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.CenterPoint">
      <summary>
            Gets or sets the point around which the effect is centered.
            </summary>
      <value>Point structure that contains the point around which the effect is centered.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.Brightness">
      <summary>
            Gets or sets the brightness of the flare.
            </summary>
      <value>The brightness of the flare. This value is divided internally by 100. This parameter affects the brightness of both the flare, and any lightened circles surrounding the flare. This parameter only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.Type">
      <summary>
            Gets or sets a value that indicates the lens type.
            </summary>
      <value>Value that indicates the lens type.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand.Color">
      <summary>
            Gets or sets the color of the main flare.
            </summary>
      <value>The color of the main flare.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommandFlags">
      <summary>
            Enumeration that indicates what type of data is in the CellWidth and CellHeight properties or the cellWidth and cellHeight parameters.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the type of data in the CellWidth property or the cellWidth parameter of the Constructor</td><td>WidthFrequency, WidthPeriod</td></tr><tr><td>Flags that indicate the type of data in the CellHeight property or the cellHeight parameter of the Constructor</td><td>HeightFrequency, HeightPeriod</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommandFlags.None">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommandFlags.WidthFrequency">
      <summary>
            The CellWidth property or cellWidth parameter is the number of cells along the width of the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommandFlags.WidthPeriod">
      <summary>
            The CellWidth property or the cellWidth parameter is the width of the cell in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommandFlags.HeightFrequency">
      <summary>
            The CellHeight property or the cellHeight parameter is the number of cells along the height of the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommandFlags.HeightPeriod">
      <summary>
            The CellHeight property or the cellHeight parameter is the height of the cell in pixels. 
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand">
      <summary>
             Divides the image into rectangular cells and makes it look as if it is being viewed through glass blocks. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GlassEffectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GlassEffectCommand = New GlassEffectCommand
      command.CellWidth = 20
      command.CellHeight = 10
      command.Flags = GlassEffectCommandFlags.WidthFrequency Or GlassEffectCommandFlags.HeightPeriod
      ' Apply glass effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GlassEffectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GlassEffectCommand command = new GlassEffectCommand();
         command.CellWidth  = 20;
         command.CellHeight = 10;
         command.Flags      = GlassEffectCommandFlags.WidthFrequency | GlassEffectCommandFlags.HeightPeriod;
         // Apply glass effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.GlassEffectCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand.#ctor(System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" /> class object with explicit parameters.
            </summary>
      <param name="cellWidth">Value that represents the width of a cell in pixels or the number of cells present across the width of the image, based on the flags that are set. The valid range is between 2 and half the image width.</param>
      <param name="cellHeight">Value that represents the height of a cell in pixels or the number of cells present across the height of the image, based on the flags that are set. The valid range is between 2 and half the image height.</param>
      <param name="flags">Flags that indicate what type of data is in the cellWidth and cellHeight parameters.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GlassEffectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GlassEffectCommand = New GlassEffectCommand(20, 10, GlassEffectCommandFlags.WidthFrequency Or GlassEffectCommandFlags.HeightPeriod)
      ' Apply glass effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GlassEffectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GlassEffectCommand command = new GlassEffectCommand(20, 20, GlassEffectCommandFlags.WidthFrequency | GlassEffectCommandFlags.HeightPeriod);
         // Apply glass effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.GlassEffectCommand.GlassEffectConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand.CellWidth">
      <summary>
            Gets or sets a value that represents the width of a cell in pixels or the number of cells present across the width of the image.
            </summary>
      <value>Value that represents the width of a cell in pixels or the number of cells present across the width of the image, based on the flags set in the Flags property. The valid range is between 2 and half the image width.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand.CellHeight">
      <summary>
            Gets or sets a value that represents the height of a cell in pixels or the number of cells present across the height of the image.
            </summary>
      <value>Value that represents the height of a cell in pixels or the number of cells present across the height of the image, based on the flags set in the Flags property. The valid range is between 2 and half the image height.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand.Flags">
      <summary>
            Flags that indicate what type of data is in the CellWidth and CellHeight properties.
            </summary>
      <value>Value that indicates what type of data is in the CellWidth and CellHeight properties.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand">
      <summary>
            Averages an image with its shifted copies. This method is available 
            in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            This method creates four copies of an image. Each copy is shifted by the offset amount into one of the four 
            directions: top, left, bottom and right. Then the image is averaged with its shifted copies.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method can process the whole image or a region 
            of the image. If the image has a region, the effect is applied only to 
            the region.</description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FragmentCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As FragmentCommand = New FragmentCommand
      command.Offset = 4
      command.Opacity = 75
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FragmentCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FragmentCommand command  = new FragmentCommand();
         command.Offset    = 4;
         command.Opacity   = 75;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FragmentCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.CombineWarpCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand.#ctor">
      <summary>
            Initializes a new FragmentCommand with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new FragmentCommand with explicit parameters.
            </summary>
      <param name="offset">Value that indicates the number of pixels the copied image is shifted.</param>
      <param name="opacity">Value that indicates the transparency, in percent, of the copy in comparison to the 
            original image. Possible values are range from 0 to 100. A value of 0 means the resulting image will be black. 
            A value of 100 means that each copy's value will comprise 25<![CDATA[&#37;]]> of the result.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FragmentConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As FragmentCommand = New FragmentCommand(4, 75)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FragmentConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FragmentCommand command  = new FragmentCommand(4, 75);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FragmentCommand.FragmentConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand.Offset">
      <summary>
            Gets or sets the value that indicates the number of pixels the copied image is shifted.
            </summary>
      <value>Value that indicates the number of pixels the copied image is shifted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand.Opacity">
      <summary>
            Gets or sets the value that indicates the transparency, in percent.
            </summary>
      <value>Value that indicates the transparency, in percent, of the copy in comparison to the original image.
            The valid range is from 0 to 100. A value of 0 means the resulting image will be black. 
            A value of 100 means that each copy's value will comprise 25<![CDATA[&#37;]]> of the result.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand">
      <summary>
             Simulates painting an image with the watercolor dry brush technique. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command simulates what would happen if the image had just been painted with paints and the paints were allowed to dry.  The colors become darker, with less brightness.</description>
          </item>
          <item>
            <description>The effect can be controlled by specifying the size of the neighborhood that is used for calculating each pixel value.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand" /> on an image with a neighborhood Dimensions = 5x5 pixels.</para>
        <code lang="VB">   Public Sub DryCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DryCommand = New DryCommand
      command.Dimension = 5
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DryCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DryCommand command = new DryCommand();
         command.Dimension = 5;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DryCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DryCommand.#ctor">
      <summary>
            Initializes a new DryCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DryCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new DryCommand class object with explicit parameters.
            </summary>
      <param name="dimension">Dimensions of the neighborhood used in creating the effect (Dimension x Dimension), in pixels.
             This parameter only accepts nonzero positive values.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand" /> on an image with a neighborhood Dimensions = 5x5 pixels.</para>
        <code lang="VB">   Public Sub DryConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DryCommand
      command = New DryCommand(5)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DryConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DryCommand command = new DryCommand(5);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DryCommand.DryConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DryCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DryCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DryCommand.Dimension">
      <summary>
            Gets or sets the dimensions of the neighborhood used in creating the effect (Dimension x Dimension), in pixels. This property only accepts nonzero positive values.
            </summary>
      <value>Dimensions of the neighborhood used in creating the effect (Dimension x Dimension), in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand">
      <summary>
             Adds a colored glow to an image's light or dark areas, making these areas shine with a neon glow. This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command adds pixels randomly to the image. A glow is added based on a combination of the pixel colors and the glow color.</description>
          </item>
          <item>
            <description>As an example, if you use the following image:<br /><img src="diffuseglowbefore.jpg" /><Br />
             And you were to call DiffuseGlowCommand using the following settings:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>GlowAmount</td><td>50</td></tr><tr><td>ClearAmount</td><td>50</td></tr><tr><td>SpreadAmount</td><td>10</td></tr><tr><td>WhiteNoiseRange</td><td>10</td></tr><tr><td>GlowColor</td><td>white</td></tr></table><br />
             The following figure results:<br /><img src="diffuseglow.jpg" /></description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
             </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> on an image and applies the Diffuse Glow filter.</para>
        <code lang="VB">   Public Sub DiffuseGlowCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim fillColor As New RasterColor(255, 255, 255)
      Dim command As New DiffuseGlowCommand
      command.GlowAmount = 50
      command.ClearAmount = 50
      command.SpreadAmount = 10
      command.WhiteNoiseRange = 10
      command.GlowColor = fillColor
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DiffuseGlowCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor fillColor = new RasterColor(255, 255, 255);
         DiffuseGlowCommand command = new DiffuseGlowCommand () ;
         command.GlowAmount = 50;
         command.ClearAmount = 50;
         command.SpreadAmount = 10;
         command.WhiteNoiseRange = 10;
         command.GlowColor = fillColor;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DiffuseGlowCommand-->
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> class object with explicit parameters.
            </summary>
      <param name="glowAmount">Glow intensity, expressed in tenths of a percent. Possible values range from -1000 - 1000. 
            Use positive values to add glow to the brighter regions of the image, and negative values to add glow to the darker regions of the image.</param>
      <param name="clearAmount">Value that represents how deeply the glow will penetrate into the non-glowing areas, 
            expressed in tenths of a percent. Possible values range from 0 - 1000. A value of 0 indicates total glow diffusion, 
            whereas a value of 1000 indicates the glow does not penetrate into any of the non-glowing areas.</param>
      <param name="spreadAmount">Value that represents the amount of blur in the glow diffusion, from 0 to 100 pixels. 
            Possible values range from 0 - 1000. A value of 0 indicates none of the glow is diffused, whereas a value of 1000 
            indicates maximum diffusion.</param>
      <param name="whiteNoiseRange">Percent of the image to be covered with added pixels, expressed in tenths of a percent. 
            The pixels will be added randomly. Possible values range from 0 - 1000.</param>
      <param name="glowColor">The RasterColor value that specifies the glow color.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> on an image and applies the Diffuse Glow filter.</para>
        <code lang="VB">   Public Sub DiffuseGlowConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim fillColor As New RasterColor(255, 255, 255)
      Dim command As New DiffuseGlowCommand(50, 50, 10, 10, fillColor)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DiffuseGlowConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor fillColor = new RasterColor(255, 255, 255) ;
         DiffuseGlowCommand command = new DiffuseGlowCommand(50, 50, 10, 10, fillColor);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DiffuseGlowCommand.DiffuseGlowConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.GlowAmount">
      <summary>
            Gets or sets the value that indicates the glow intensity.
            </summary>
      <value>Value that indicates the glow intensity, expressed in tenths of a percent. Possible values range from -1000 - 1000. 
            Use positive values to add glow to the brighter regions of the image, and negative values to add glow to the darker regions of the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.ClearAmount">
      <summary>
            Gets or sets a value that 
            represents how deeply the glow will penetrate into the non-glowing areas.
            </summary>
      <value>Value that represents how deeply the glow will penetrate into the non-glowing areas, expressed in tenths of 
            a percent. Possible values range from 0 - 1000. A value of 0 indicates total glow diffusion, whereas a value of 
            1000 indicates the glow does not penetrate into any of the non-glowing areas. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.SpreadAmount">
      <summary>
            Gets or sets the value that indicates the amount of blur in the glow diffusion, from 0 to 100 pixels.
            </summary>
      <value>Value that indicates the amount of blur in the glow diffusion, from 0 to 100 pixels. 
            Possible values range from 0 - 1000. A value of 0 indicates none of the glow is diffused, whereas a value 
            of 1000 indicates maximum diffusion.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.WhiteNoiseRange">
      <summary>
            Gets or sets the value that indicates the percent of the image to be covered with added pixels, expressed in 
            tenths of a percent.
            </summary>
      <value>Value that indicates the percent of the image to be covered with added pixels, expressed in tenths of a 
            percent. The pixels will be added randomly. Possible values range from 0 - 1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand.GlowColor">
      <summary>
            Gets or sets the value that indicates the glow color.
            </summary>
      <value>Value that indicates the glow color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommandType">
      <summary>
        <para>Flags that indicate how to handle exposed areas</para>
      </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommandType.Color">
      <summary>
            Fill any exposed areas with <see cref="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.FillColor" /> or the fillColor parameter of the appropriate ZoomWaveCommand Constructor.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommandType.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommandType.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand">
      <summary>
            Distorts the image with a wave zoomed from the specified center. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command applies a sinusoidal wave zoomed from the specified center. The center point must be defined inside the image, or inside the region, if the image has a region.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ZoomWaveCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ZoomWaveCommand = New ZoomWaveCommand
      command.Amplitude = 20
      ' Apply zoom wave from center of the image.
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.FillColor = New RasterColor(0, 0, 0)
      command.Frequency = 10
      command.Phase = 0
      command.ZoomFactor = 0
      command.Type = ZoomWaveCommandType.Repeat
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ZoomWaveCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ZoomWaveCommand command = new ZoomWaveCommand();
         command.Amplitude   = 20;
         // Apply zoom wave from center of the image.
         command.CenterPoint = new LeadPoint(image.Width / 2, image.Height / 2);
         command.FillColor   = new RasterColor(0, 0, 0);
         command.Frequency   = 10;
         command.Phase       = 0;
         command.ZoomFactor  = 0;
         command.Type        = ZoomWaveCommandType.Repeat;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ZoomWaveCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.#ctor">
      <summary>
            Initializes a new ZoomWaveCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommandType)">
      <summary>
            Initializes a new ZoomWaveCommand class object with explicit parameters.
            </summary>
      <param name="amplitude">Zoom wave magnitude.</param>
      <param name="frequency">The number of repeated waves along the radial line. This parameter only accepts positive values.</param>
      <param name="phase">Wave phase shift. The valid range is from -36000 to 36000. The real value is divided by 100.</param>
      <param name="zoomFactor">The percentage the wave grows as it moves from the image center. The valid range is from 0 to 100. </param>
      <param name="centerPoint">Center point from which the wave is zoomed.</param>
      <param name="fillColor">RasterColor object that specifies the fill color for any exposed areas. </param>
      <param name="type">Flag that indicates how to handle exposed areas.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ZoomWaveConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ZoomWaveCommand = New ZoomWaveCommand(20, 10, 0, 0, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), New RasterColor(0, 0, 0), ZoomWaveCommandType.Repeat)
      ' Apply zoom wave from center of the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ZoomWaveConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ZoomWaveCommand command = new ZoomWaveCommand(20, 10, 0, 0, new LeadPoint(image.Width / 2, image.Height / 2), new RasterColor(0, 0, 0), ZoomWaveCommandType.Repeat);
         // Apply zoom wave from center of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ZoomWaveCommand.ZoomWaveConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.Amplitude">
      <summary>
            Gets or sets the zoom wave magnitude.
            </summary>
      <value>Zoom wave magnitude.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.Frequency">
      <summary>
            Gets or sets the number of repeated waves along the radial line.
            </summary>
      <value>The number of repeated waves along the radial line. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.Phase">
      <summary>
            Gets or sets the wave phase shift.
            </summary>
      <value>Wave phase shift. The valid range is from -36000 to 36000. The real value is divided by 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.ZoomFactor">
      <summary>
            Gets or sets the percentage the wave grows as it moves from the image center.
            </summary>
      <value>The percentage the wave grows as it moves from the image center. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.CenterPoint">
      <summary>
            Center point from which the wave is zoomed.
            </summary>
      <value>Center point from which the wave is zoomed.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.FillColor">
      <summary>
            Gets or sets the RasterColor object that specifies the fill color for any exposed areas.
            </summary>
      <value>RasterColor object that specifies the fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand.Type">
      <summary>
            Gets or sets a value that indicates how to handle exposed areas.
            </summary>
      <value>Value that indicates how to handle exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">
      <summary>
            This enumeration indicates how to apply the Dice effect to an image.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags.None">
      <summary>
            No Flags selected.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags.Size">
      <summary>
            XBlock and YBlock properties (or the xblock and yblock parameters of the Constructor) contain 
            the width and height of each block, in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags.Count">
      <summary>
            XBlock and YBlock properties (or the xblock and yblock parameters of the Constructor) contain the 
            number of blocks per row and per column.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags.Border">
      <summary>
            Draw borders around the dice blocks. The border color is contained in the 
            BorderColor property or the borderColor parameter of the Constructor. 
            Each block will draw the border on the inside of the edges. The 
            border is 1 pixel wide. In places with adjacent blocks, the border 
            will be 2 pixels wide because each block has a 1-pixel border. If 
            the ResizeImage flag is not set and the edge 
            blocks have a different size than the inner blocks, the border will 
            not be drawn for the right and the bottom edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags.ResizeImage">
      <summary>
            If this flag is set then the image will be resized to be sure that all 
            blocks have equal size. If this flag is not set then the edge blocks 
            might have a different size than the inner blocks. If the edge blocks 
            have a different size, they will be manipulated differently. Ror more 
            information refer to the Remarks section of the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" /> .
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand">
      <summary>
            Splits the image into square or rectangular blocks. If the blocks are 
            square, the command rotates each block by 0, 90, 180, or 270 degrees. If the blocks 
            are rectangular, the command flips the blocks around the X-axis or Y-axis. This command
            is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command can process the whole image or a region 
            of the image. If the image has a region, the effect is applied only to 
            the region.</description>
          </item>
          <item>
            <description>This command divides the image into a certain number 
            of blocks according to the Flags property, or the flags parameter of the Constructor. If the  
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Size</see> flag is set 
            then the image will be divided into blocks according to the width and 
            height for each block. The width and height are set in the XBlock and YBlock 
            properties, or can be designated in the Constructor.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Count</see>  flag
            is set then the image is divided into blocks according to the number of blocks 
            per row and number of blocks per column. These values are also set in the XBlock and YBlock 
            properties, or can be designated in the Constructor.</description>
          </item>
          <item>
            <description>The <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Count</see> flag
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Size</see> flag (but not both) must be set.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Border</see> flag is also set, 
            borders will be drawn around the dice blocks and it will be painted using 
            the BorderColor property (or the borderColor parameter of the Constructor). If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see>
            flag is set then the image will be resized so that all blocks have the same 
            size and so there is no remainder in the image, ensuring that all blocks
            in the image will be manipulated in the same way. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see> flag is not set 
            then the edge blocks (which may be a different size than the inner blocks) 
            will be treated differently than the inner blocks.</description>
          </item>
          <item>
            <description>The Dice effect command works in the following manner:</description>
          </item>
          <item>
            <description>It divides the image into a certain number of blocks.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see> flag
            is set, the image is resized to the closest size to have the edge blocks
            have the same size as the inner blocks.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see> flag
            is not set, then the inner blocks might have a different size and shape 
            than the edge blocks. 
            Each block is transformed according to its shape.</description>
          </item>
          <item>
            <description>For each block, a rotation angle is picked at random 
            out of the following values: 0, 90, 180, and 270. The rotation angle is 
            applied depending on the block shape (square or rectangular):</description>
          </item>
          <item>
            <description>If the block is square, it is rotated by the rotation angle.</description>
          </item>
          <item>
            <description>If the block is rectangular, it is transformed as follows:</description>
          </item>
          <item>
            <description>If the rotation angle is 0, the block remains unchanged.</description>
          </item>
          <item>
            <description>If the rotation angle is 90, the block is flipped around the x-axis.</description>
          </item>
          <item>
            <description>If the angle is 180, the block is rotated by 180.</description>
          </item>
          <item>
            <description>If the angle is 270, the block is flipped around the y-axis.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Border</see> flag is set,
            the command draws borders around the blocks.</description>
          </item>
          <item>
            <description>The starting point (or "randomize value") for the random number generator is set in the 
            Randomize property or the randomize parameter of the Constructor).</description>
          </item>
          <item>
            <description>If the randomize value is zero then the command 
            itself selects a random value between 1 and 500 for the randomize value.</description>
          </item>
          <item>
            <description>If the randomize value is &gt; 0, it is used as the starting point.</description>
          </item>
          <item>
            <description>Here are some tips related to the randomize point:</description>
          </item>
          <item>
            <description>The sequence of generated random numbers is the same 
            if you use the same randomize value &gt; 0. In other words, if you call the 
            command twice with the same randomize value, each block will be 
            transformed the same way.</description>
          </item>
          <item>
            <description>Calling the command 4 times with the same image and 
            the same randomize value &gt; 0 will leave the image blocks unchanged. 
            So, if you call the command once, the blocks will be transformed. Call 
            the command 3 more times and each block goes to its original transformation. 
            Of course, if you elected to draw borders, there will be a grid drawn on 
            the image.</description>
          </item>
          <item>
            <description>If you pass 0 for the Flags property or the flags parameter of the Constructor, the command leaves 
            the image unchanged.</description>
          </item>
          <item>
            <description>This command supports all bits/pixel supported by 
            LEADTOOLS.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DiceEffectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DiceEffectCommand = New DiceEffectCommand
      command.XBlock = 16
      command.YBlock = 16
      command.Randomize = 0
      command.Flags = DiceEffectCommandFlags.Count Or DiceEffectCommandFlags.Border
      command.BorderColor = New RasterColor(0, 0, 0)
      ' Apply Dice Effect for this image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DiceEffectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DiceEffectCommand command  = new DiceEffectCommand();
         command.XBlock      = 16;
         command.YBlock      = 16;
         command.Randomize   = 0;
         command.Flags       = DiceEffectCommandFlags.Count |
                                 DiceEffectCommandFlags.Border;
         command.BorderColor = new RasterColor(0, 0, 0);
         // Apply Dice Effect for this image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DiceEffectCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.#ctor">
      <summary>
            Initializes a new DiceEffectCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags,Leadtools.RasterColor)">
      <summary>
            Initializes a new DiceEffectCommand class object with explicit parameters.
            </summary>
      <param name="xblock">If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see> flag is set,
            this parameter represents the width of each block, in pixels. If 
            the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Count</see> flag is set, 
            this parameter represents the number of blocks per row. Only positive values are accepted.</param>
      <param name="yblock">If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see> flag is set, 
            this parameter represents the height of each block, in pixels. If 
            the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Count</see> flag is set, 
            this parameter represents the number of blocks per column. Only positive values are accepted.</param>
      <param name="randomize">The starting point for the randomization process. Valid values
            range from 0 through 500. Use 0 to have the command select the value. Only positive values are accepted.</param>
      <param name="flags">Flag that specifies how to apply 
            the effect.</param>
      <param name="borderColor">Color of the border that will be drawn around 
            the dice blocks. This parameter will be used only if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Border</see> flag is set.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DiceEffectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DiceEffectCommand
      command = New DiceEffectCommand(32, 32, 0, DiceEffectCommandFlags.Size Or DiceEffectCommandFlags.Border, New RasterColor(0, 0, 0))
      ' Apply Dice Effect for this image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DiceEffectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DiceEffectCommand command  = new DiceEffectCommand(32,32,0,DiceEffectCommandFlags.Size | DiceEffectCommandFlags.Border, new RasterColor(0, 0, 0));
         // Apply Dice Effect for this image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DiceEffectCommand.DiceEffectConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.XBlock">
      <summary>
            Gets or sets the width of each block in pixels or the number of 
            blocks per row.
            </summary>
      <value>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see> flag is set,
            this property represents the width of each block, in pixels. If 
            the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Count</see> flag is set, 
            this property represents the number of blocks per row.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.YBlock">
      <summary>
            Gets or sets the height of each block in pixels or the number of 
            blocks per column.
            </summary>
      <value>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.ResizeImage</see> flag is set, 
            this property represents the height of each block, in pixels. If 
            the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Count</see> flag is set, 
            this property represents the number of blocks per column.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.Randomize">
      <summary>
            Gets or sets the starting point, or randomize value for the randomization process.
            </summary>
      <value>The starting point for the randomization process. Valid values
            range from 0 through 500. Use 0 to have the command select the value.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.BorderColor">
      <summary>
            Gets or sets the color of the border that will be drawn around the dice
            blocks.
            </summary>
      <value>The color of the border that will be drawn around 
            the dice blocks. This property will be used only if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommandFlags">DiceEffectCommandFlags.Border</see> flag is set.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand.Flags">
      <summary>
            Gets or sets flags that specify how to apply the effect.
            </summary>
      <value>Value that specifies how to apply the effect.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand">
      <summary>
            Creates thin lines, directed along the specified angle, on the affected image. This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. 
            Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand" /> on an image with a neighborhood Dimensions = 7x7 pixels.</para>
        <code lang="VB">   Public Sub WindCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As WindCommand = New WindCommand
      command.Angle = 4500
      command.Dimension = 40
      command.Opacity = 0
      ' Apply wind effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void WindCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         WindCommand command = new WindCommand();
         command.Angle     = 40;
         command.Dimension = 4500;
         command.Opacity   = 0;
         // Apply wind effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.WindCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WindCommand.#ctor">
      <summary>
            Initializes a new WindCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WindCommand.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new WindCommand class object with explicit parameters.
            </summary>
      <param name="dimension">Size, in pixels, of the thin lines used to create the wind effect. This parameter only accepts positive values.</param>
      <param name="angle">Direction of the thin lines used to create the wind effect, in hundredths of a degree. Possible values range form -36000 to 36000. (The value in degrees divided by 100).</param>\
            <param name="opacity">Density, of the thin lines used to create the wind effect. The valid range is from 0 to 100.</param><example><para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand" /> on an image with a neighborhood Dimensions = 7x7 pixels.</para><code lang="VB">   Public Sub WindConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As WindCommand = New WindCommand(4500, 40, 0)
      ' Apply wind effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code><code lang="CS">      public void WindConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         WindCommand command = new WindCommand(4500, 40, 0);
         // Apply wind effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code><!--ImageProcessing.SpecialEffects.WindCommand.WindConstructor--></example><noremarks /></member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WindCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WindCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WindCommand.Dimension">
      <summary>
            Gets or sets the size, in pixels, of the thin lines used to create the wind effect.
            </summary>
      <value>Size, in pixels, of the thin lines used to create the wind effect. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WindCommand.Angle">
      <summary>
            Gets or sets the direction of the thin lines used to create the wind effect, in hundredths of a degree.
            </summary>
      <value>Direction of the thin lines used to create the wind effect, in hundredths of a degree. Possible values range form -36000 to 36000. (The value in degrees divided by 100).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WindCommand.Opacity">
      <summary>
            Gets or sets the density, of the thin lines used to create the wind effect.
            </summary>
      <value>Density, of the thin lines used to create the wind effect. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand">
      <summary>
            Automatically reduces image size while preserving important features. It can also remove or preserve certain objects chosen by the user without affecting the natural look of the image.
            </summary>
      <keywords>Resize</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>Dark areas are sometimes affected during downscaling since they are considered unimportant. If dark objects are affected during downscaling, the user can apply a Negative effect to the image, apply downscaling, and then apply the Negative effect to the image again to get the colors of original image. Alternatively the user can apply a mask on dark objects to keep them from being affected.</description>
          </item>
          <item>
            <description>Downscaling is limited on images that are too condensed or where the content layout prevents downscaling without harming important aspects of the image.</description>
          </item>
          <item>
            <description>Downscaling using a mask is performed only on width dimension. If the user wants to downscale using a mask on height dimension, rotate the image, downscale it on width dimension and rotate to the original orientation.</description>
          </item>
          <item>
            <description>The color of the area to be removed must be different than colors in the image. </description>
          </item>
          <item>
            <description>The color of the area to be preserved must be different than the colors in the image and different from the color of the area to be removed.</description>
          </item>
          <item>
            <description>If multiple remove objects exist, then all of them have to be the same color of the area being removed. This also applies to a color area that is being preserved.</description>
          </item>
          <item>
            <description>If the user wants the resulting size of a removal to be equal to the original size, then the user has to set new width equal to image width. This does <strong>NOT</strong> apply to preserve area and does <strong>NOT</strong> apply to the upscaling process.</description>
          </item>
          <item>
            <description>Sometimes, letting the program determine the resulting width does not totally delete the area to be removed, the user needs to pass a new width to the original image that is less than the width of the resulting image with remaining portions of the removed area. For instance, if the downscaled image still has few pixels of the remove area after downscaling and its width is 300, the user can redo the downscaling on the original image but with a new width of 290.</description>
          </item>
          <item>
            <description>If mask has an area to be preserved and no area to be removed, then the user has to specify newWidth.</description>
          </item>
          <item>
            <description>It’s recommended to draw the mask over the area to be removed from top to bottom of the image a little larger than the area to be removed. This does not always hold true but it’s a good practice to follow. </description>
          </item>
          <item>
            <description>It’s also recommended to make the mask wide enough to force the downscaling to be only in the remove area. This does not always hold true but it’s a good practice to follow.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub IntelligentDownScaleCommandExample()
      ' Load an image
      RasterCodecs.Startup()
      Dim Codecs As RasterCodecs = New RasterCodecs()
      Codecs.ThrowExceptionsOnInvalidImages = True

      Dim image As RasterImage = Codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path &amp; "Sample3.jpg")

      Dim Command As IntelligentDownScaleCommand = New IntelligentDownScaleCommand()
      Command.DownScalingOrder = 1
      Command.NewWidth = image.Width - 100
      Command.NewHeight = image.Height
      Command.UsePreserveObjectColor = False
      Command.UseRemoveObjectColor = False

      ' Apply the intelligent downscale on the image.
      Command.Run(image)
      Codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path &amp; "IntelligentDownScaleResult.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub
</code>
        <code lang="CS">      public void IntelligentDownScaleCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Sample3.jpg");

         IntelligentDownScaleCommand command = new IntelligentDownScaleCommand();
         command.DownScalingOrder = 1;
         command.NewWidth = image.Width - 100;
         command.NewHeight = image.Height;
         command.UsePreserveObjectColor = false;
         command.UseRemoveObjectColor = false;

         // Apply the intelligent downscale on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "IntelligentDownScaleResult.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.IntelligentDownScaleCommand-->
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub IntelligentDownScaleCommandExample()
      ' Load an image
      RasterCodecs.Startup()
      Dim Codecs As RasterCodecs = New RasterCodecs()
      Codecs.ThrowExceptionsOnInvalidImages = True

      Dim image As RasterImage = Codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path &amp; "Sample3.jpg")

      Dim Command As IntelligentDownScaleCommand = New IntelligentDownScaleCommand()
      Command.DownScalingOrder = 1
      Command.NewWidth = image.Width - 100
      Command.NewHeight = image.Height
      Command.UsePreserveObjectColor = False
      Command.UseRemoveObjectColor = False

      ' Apply the intelligent downscale on the image.
      Command.Run(image)
      Codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path &amp; "IntelligentDownScaleResult.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub
</code>
        <code lang="CS">      public void IntelligentDownScaleCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Sample3.jpg");

         IntelligentDownScaleCommand command = new IntelligentDownScaleCommand();
         command.DownScalingOrder = 1;
         command.NewWidth = image.Width - 100;
         command.NewHeight = image.Height;
         command.UsePreserveObjectColor = false;
         command.UseRemoveObjectColor = false;

         // Apply the intelligent downscale on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "IntelligentDownScaleResult.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.IntelligentDownScaleCommand-->
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.#ctor(Leadtools.RasterImage,Leadtools.RasterColor,Leadtools.RasterColor,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="maskImage">RasterImage object that references mask image.</param>
      <param name="removeObjectColor">RasterColor value that specifies color of the area in the mask image in order to be removed and it has to be different than the rest of the image colors. If no remove color exist, then pass null.</param>
      <param name="preserveObjectColor">RasterColor value that specifies color of the area in the mask image in order to be removed and it has to be different than the rest of the image colors. If no remove color exist, then pass null.</param>
      <param name="useRemoveObjectColor">true to use the removeObjectColor parameter false otherwise.</param>
      <param name="usePreserveObjectColor">true to use the removeObjectColor parameter false otherwise.</param>
      <param name="newWidth"> New width. Range from 1 to width of the image -1.</param>
      <param name="newHeight">New height. Range from 1 to height of the image -1.</param>
      <param name="downScalingOrder">value that determine whether the processing will start with the width first then the height or vice versa. Pass 0 to start with the height, pass 1 to start with the width.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>String that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.MaskImage">
      <summary>
            Gets or sets the RasterImage object that references the mask image. The mask image is the same as original image but with colors on certain areas that need to be deleted.
            </summary>
      <value>RasterImage object that references mask image. The mask image is the same as original image but with colors on certain areas that need to be deleted. If NULL is passed, then there is no mask image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.RemoveObjectColor">
      <summary>
            Gets or sets a value that represents the color of the area to be removed, to be removed and it has to be different than colors in image.
            </summary>
      <value>RasterColor value that specifies color of the area in the mask image. To be removed, the color has to be different than the rest of the image colors. If no remove color exist, then pass null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.PreserveObjectColor">
      <summary>
            Gets or sets a value that represents the color of the area to be preserved. To be preserved, the color  has to be different than colors in image.
            </summary>
      <value>RasterColor value that specifies color of the area in the mask image. To be removed the color has to be different than the rest of the image colors. If no remove color exist, then pass null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.NewWidth">
      <summary>
            Gets or sets the new Width.
            </summary>
      <value>Value that represents the new width. Range from 1 to the width of the image less 1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.UseRemoveObjectColor">
      <summary>
            Gets or sets the value that indicates whether to used the remove object color.
            </summary>
      <value>true to use the remove object color specified in RemoveObjectColor property, otherwise it is false.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.UsePreserveObjectColor">
      <summary>
            Gets or sets the value that indicates whether to used the preserve object color.
            </summary>
      <value>True to use the preserve object color specified in PreserveObjectColor property, otherwise it is false.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.NewHeight">
      <summary>
            Gets or sets the new Height.
            </summary>
      <value>Value that represents the new height. Range from 1 to the height of the image less 1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand.DownScalingOrder">
      <summary>
            Gets or sets the value that determine whether the processing will start with the width first then the height or vice versa.
            </summary>
      <value>Value that determine whether the processing will start with the width first then the height or vice versa. Pass 0 to start with the height, pass 1 to start with the width.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentDownScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommandFlags">
      <summary>
            Flags that indicate the background color and dots type.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Background Color</td><td>BackGroundImage, BackGroundColor</td></tr><tr><td>Dots type</td><td>Sticker, Point</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PointillistCommandFlags.None">
      <summary>
            No flags.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PointillistCommandFlags.BackGroundImage">
      <summary>
            Use the same image as background.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PointillistCommandFlags.BackGroundColor">
      <summary>
            Fill the background by <see cref="P:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.FillColor" /> property only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PointillistCommandFlags.Sticker">
      <summary>
            Dots will block each others like stickers.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PointillistCommandFlags.Point">
      <summary>
            Dots will interleave like bubbles.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand">
      <summary>
             Converts image colors into randomly placed dots to create 
             a pointillist painting. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Pointillism is a painting technique where the image is composed of tiny, separate dots of primary color. 
             Non-primary colors are created by placing primary colors beside each other and allowing the "mixing" to be 
             performed when the image is viewed. </description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>If the image has a region, this method works only on 
             the region. If the image does not have a region, this method works on the
             entire image.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PointillistCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As New PointillistCommand
      command.Size = 25
      command.FillColor = New RasterColor(255, 255, 255)
      command.Flags = PointillistCommandFlags.BackGroundColor Or PointillistCommandFlags.Point
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PointillistCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PointillistCommand command  = new PointillistCommand();
         command.Size = 25;
         command.FillColor = new RasterColor(255,255,255);
         command.Flags = PointillistCommandFlags.BackGroundColor | PointillistCommandFlags.Point;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PointillistCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand">
      </seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.#ctor(System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.PointillistCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> with explicit parameters.
            </summary>
      <param name="size">Dot size.</param>
      <param name="fillColor">Fill color.</param>
      <param name="flags">Flags that indicate the background color and dots type.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PointillistConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As New PointillistCommand(25, New RasterColor(255, 255, 255), PointillistCommandFlags.BackGroundColor Or PointillistCommandFlags.Point)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PointillistConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PointillistCommand command = new PointillistCommand(25, new RasterColor(255, 255, 255),
         PointillistCommandFlags.BackGroundColor | PointillistCommandFlags.Point);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PointillistCommand.PointillistConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.Size">
      <summary>
            Gets or sets a value that represents the dot size.
            </summary>
      <value>Value represents the dot size. Only positive 
            values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.FillColor">
      <summary>
            Gets or sets background color.
            </summary>
      <value>The background color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand.Flags">
      <summary>
            Gets or sets the flags that indicate the background color and dots type.
            </summary>
      <value>Flags that indicate the background color and dots type.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommandType">
      <summary>
            This enumeration will contains all types needed to indicate which background 
            is selected. 
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommandType.Image">
      <summary>
            Use the same image as background.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommandType.Color">
      <summary>
            Fill the background by <see cref="P:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.FillColor" /> property only.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand">
      <summary>
            Gives the image a 3-D depth, as if it exists on a flat 
            plane skewed into different shapes. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>If the image has a region, this method works only on 
            the region. If the image does not have a region, this method works on the
            entire image.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PerspectiveCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim cornerPoints() As LeadPoint
      ReDim cornerPoints(3)
      cornerPoints(0).X = CInt(leadImage.Width * 3 / 9)
      cornerPoints(0).Y = CInt(leadImage.Height * 1 / 12)
      cornerPoints(1).X = CInt(leadImage.Width * 3 / 4)
      cornerPoints(1).Y = CInt(leadImage.Height * 2 / 12)
      cornerPoints(2).X = CInt(leadImage.Width * 2 / 10)
      cornerPoints(2).Y = CInt(leadImage.Height * 8 / 10)
      cornerPoints(3).X = CInt(leadImage.Width * 10 / 11)
      cornerPoints(3).Y = CInt(leadImage.Height * 7 / 10)
      Dim command As New PerspectiveCommand
      command.CornerPoints = cornerPoints
      command.FillColor = New RasterColor(255, 255, 255)
      command.Type = PerspectiveCommandType.Color
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PerspectiveCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] cornerPoint = new LeadPoint[4];
         cornerPoint[0].X = image.Width * 3 / 9;
         cornerPoint[0].Y = image.Height * 1 / 12;
         cornerPoint[1].X = image.Width * 3 / 4;
         cornerPoint[1].Y = image.Height * 2 / 12;
         cornerPoint[2].X = image.Width * 2 / 10;
         cornerPoint[2].Y = image.Height * 8 / 10;
         cornerPoint[3].X = image.Width * 10 / 11;
         cornerPoint[3].Y = image.Height * 7 / 10;
         PerspectiveCommand command  = new PerspectiveCommand();
         command.CornerPoints = cornerPoint;
         command.FillColor = new RasterColor(255, 255, 255);
         command.Type = PerspectiveCommandType.Color;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PerspectiveCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.CombineWarpCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" />  with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.#ctor(Leadtools.LeadPoint[],Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" /> with explicit parameters.
            </summary>
      <param name="cornerPoints">Array of <see cref="T:Leadtools.LeadPoint" /> that determines the new locations of image corners.</param>
      <param name="fillColor">Background color</param>
      <param name="type">The type of background.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PerspectiveConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim cornerPoints() As LeadPoint
      ReDim cornerPoints(3)
      cornerPoints(0).X = CInt(leadImage.Width * 3 / 9)
      cornerPoints(0).Y = CInt(leadImage.Height * 1 / 12)
      cornerPoints(1).X = CInt(leadImage.Width * 3 / 4)
      cornerPoints(1).Y = CInt(leadImage.Height * 2 / 12)
      cornerPoints(2).X = CInt(leadImage.Width * 2 / 10)
      cornerPoints(2).Y = CInt(leadImage.Height * 8 / 10)
      cornerPoints(3).X = CInt(leadImage.Width * 10 / 11)
      cornerPoints(3).Y = CInt(leadImage.Height * 7 / 10)
      Dim command As New PerspectiveCommand(cornerPoints, New RasterColor(255, 0, 0), PerspectiveCommandType.Image)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PerspectiveConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] cornerPoints = new LeadPoint[4];
         cornerPoints[0].X = image.Width * 3 / 9;
         cornerPoints[0].Y = image.Height * 1 / 12;
         cornerPoints[1].X = image.Width * 3 / 4;
         cornerPoints[1].Y = image.Height * 2 / 12;
         cornerPoints[2].X = image.Width * 2 / 10;
         cornerPoints[2].Y = image.Height * 8 / 10;
         cornerPoints[3].X = image.Width * 10 / 11;
         cornerPoints[3].Y = image.Height * 7 / 10;
         PerspectiveCommand command  = new PerspectiveCommand(cornerPoints,
            new RasterColor(255, 0, 0),
            PerspectiveCommandType.Image);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PerspectiveCommand.PerspectiveConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.CornerPoints">
      <summary>
            Array of <see cref="T:Leadtools.LeadPoint" /> values that determine the new 
            locations of image corners.
            </summary>
      <value>Array of <see cref="T:Leadtools.LeadPoint" /> values that determine 
            the new locations of image corners.  It should contain four 
            points; points at indices 0, 1, 2 and 3 determine the new 
            locations of left-top, right-top, left-bottom and right-bottom 
            image corners respectively. The new locations of image corners 
            should keep the relative relation between corners: for example, the point 
            at index 1 should be to the right of the point at index 0 and up from the point 
            at index 3. Also, the point at index 2 should be to the left of the point at
             index 3 and down from the point at index 0 and so on. All new locations 
             should be inside the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.FillColor">
      <summary>
            Gets or sets the backgound color.
            </summary>
      <value>The backgound color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand.Type">
      <summary>
            Gets or sets a value that indicates the type of background to be used.
            </summary>
      <value>
            A <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommandType" /> enumeration value that indicates the type of background to be used.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandType">
      <summary>
        <para>Enumeration that determines the light source type.</para>
      </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.LightCommandType.Spot">
      <summary>
            The light will appear as a spotlight, based on width, height, angle and edge values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.LightCommandType.Directional">
      <summary>
            The light will be applied to the whole image. If this flag is used, the width, height, angle and edge values
            will be ignored.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandData">
      <summary>
            Defines the information used by <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,System.Int32,Leadtools.ImageProcessing.SpecialEffects.LightCommandType)">
      <summary>
            Initializes a new LightCommandData with explicit parameters.
            </summary>
      <param name="centerPoint">Center of the ellipse used to represent the light.</param>
      <param name="width">Value that represents the width of the ellipse used to represent the light. This parameter only accepts positive values.</param>
      <param name="height">Value that represents the height of the ellipse used to represent the light. This parameter only accepts positive values.</param>
      <param name="angle">Angle by which to rotate the ellipse that represents the light. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000. 
            A positive value will rotate the ellipse clockwise, while a negative value will rotate the ellipse counter-clockwise.</param>
      <param name="brightness">Intensity or brightness of the light. This parameter only accepts positive values.</param>
      <param name="edge">Percentage by which to smooth the light border. The valid range is from 0 to 100.</param>
      <param name="fillColor">Specifies the color of the light.</param>
      <param name="opacity">Opacity of the light. This parameter only accepts positive values.</param>
      <param name="type">Flag that determines the light source type.</param>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.SpecialEffects.LightCommand.#ctor(Leadtools.ImageProcessing.SpecialEffects.LightCommandData[],System.Int32,System.Int32,Leadtools.RasterColor)">LightCommand(LightCommandData[] ,int,int,RasterColor)</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Empty">
      <summary>
             Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandData" /> class object with default parameters.
             </summary>
      <value>
             A new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandData" /> class object with default parameters.
             </value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" /> on an image to change the red color by rotating its hue 90 degree.</para>
        <code lang="VB">   Public Sub EmptyPropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Data() As LightCommandData
      ReDim Data(0)
      Data(0) = LightCommandData.Empty
      Dim command As LightCommand = New LightCommand(Data, 100, 100, New RasterColor(255, 255, 255))
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EmptyPropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LightCommandData[] data = new LightCommandData[1];
         data[0] = LightCommandData.Empty;
         LightCommand command = new LightCommand(data, 100, 100, new RasterColor(255, 255, 255));
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.LightCommandData.Empty-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the center of the ellipse used to represent the light.
            </summary>
      <value> Point structure that contains the center of the ellipse used to represent the light. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Width">
      <summary>
            Gets or sets a value that represents the width of the ellipse used to represent the light.
            </summary>
      <value> Value that represents the width of the ellipse used to represent the light. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Height">
      <summary>
            Gets or sets a value that represents the height of the ellipse used to represent the light.
            </summary>
      <value> Value that represents the height of the ellipse used to represent the light.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Angle">
      <summary>
            Gets or sets the angle by which to rotate the ellipse that represents the light.
            </summary>
      <value> Angle by which to rotate the ellipse that represents the light. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000. 
            A positive value will rotate the ellipse clockwise, while a negative value will rotate the ellipse counter-clockwise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Brightness">
      <summary>
            Gets or sets the intensity or brightness of the light.
            </summary>
      <value> Intensity or brightness of the light. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Edge">
      <summary>
            Gets or sets the percentage by which to smooth the light border.
            </summary>
      <value> Percentage by which to smooth the light border. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.FillColor">
      <summary>
            Gets or sets the color of the light.
            </summary>
      <value> The color of the light.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Opacity">
      <summary>
            Gets or sets the opacity of the light.
            </summary>
      <value> Opacity of the light. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommandData.Type">
      <summary>
            Gets or sets a flag that determines the light source type.
            </summary>
      <value> Value that determines the light source type.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand">
      <summary>
            Adds many spots of directed light sources to the image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" /> on an image to change the red color by rotating its hue 90 degree.</para>
        <code lang="VB">   Public Sub LightCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Data() As LightCommandData
      ReDim Data(0)
      Data(0) = New LightCommandData
      Data(0).Angle = 0
      Data(0).CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      Data(0).Edge = 0
      Data(0).Brightness = 100
      Data(0).FillColor = New RasterColor(255, 255, 255)
      Data(0).Height = Math.Min(leadImage.Height, leadImage.Width) \ 2
      Data(0).Width = Math.Min(leadImage.Height, leadImage.Width) \ 2
      Data(0).Opacity = 100
      Data(0).Type = LightCommandType.Spot

      Dim command As LightCommand = New LightCommand
      command.Ambient = 100
      command.Bright = 100
      command.Data = Data
      command.AmbientColor = New RasterColor(255, 255, 255)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LightCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LightCommandData[] Data = new LightCommandData[1];
         Data[0].Angle           = 0;
         Data[0].CenterPoint     = new LeadPoint(image.Width / 2, image.Height / 2);
         Data[0].Edge            = 0;
         Data[0].Brightness      = 100;
         Data[0].FillColor       = new RasterColor(255, 255, 255);
         Data[0].Height          = Math.Min(image.Height, image.Width) / 2;
         Data[0].Width           = Math.Min(image.Height, image.Width) / 2;
         Data[0].Opacity         = 100;
         Data[0].Type            = LightCommandType.Spot;

         LightCommand command = new LightCommand();
         command.Ambient = 100;
         command.Bright  = 100;
         command.Data = Data;
         command.AmbientColor = new RasterColor(255, 255, 255);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.LightCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LightCommand.#ctor">
      <summary>
            Initializes a new LightCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LightCommand.#ctor(Leadtools.ImageProcessing.SpecialEffects.LightCommandData[],System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>
            Initializes a new LightCommand class object with explicit parameters.
            </summary>
      <param name="data">An array of <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandData" /> structures that contains information on each light source.</param>
      <param name="bright">Value that represents the brightness of the ambient light of the entire image. 
            This can be any number that is 0 or greater. If it is 0 the image will be black. This value is divided internally by 100.</param>
      <param name="ambient">Factor used when mixing the ambient color with the image. This property only accepts positive values.</param>
      <param name="ambientColor">Specifies the ambient color of the light sources in the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandData" /> array.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" /> on an image to change the red color by rotating its hue 90 degree.</para>
        <code lang="VB">   Public Sub LightConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Data() As LightCommandData
      ReDim Data(0)
      Data(0) = New LightCommandData(New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), CType((Math.Min(leadImage.Height, leadImage.Width) / 2), Integer), CType((Math.Min(leadImage.Height, leadImage.Width) / 2), Integer), 0, 100, 0, New RasterColor(255, 255, 255), 100, LightCommandType.Spot)
      Dim command As LightCommand = New LightCommand(Data, 100, 100, New RasterColor(255, 255, 255))
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LightConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LightCommandData[] data = new LightCommandData[1];
         data[0] = new LightCommandData(new LeadPoint(image.Width / 2, image.Height / 2), Math.Min(image.Height, image.Width) / 2, Math.Min(image.Height, image.Width) / 2, 0, 100, 0, new RasterColor(255, 255, 255), 100, LightCommandType.Spot);
         LightCommand command = new LightCommand(data, 100, 100, new RasterColor(255, 255, 255));
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.LightCommand.LightConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LightCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.LightCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommand.Data">
      <summary>
            Gets or sets an array of <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandData" /> structures that contains information on each light source.
            </summary>
      <value>An array of <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommandData" /> structures that contains information on each light source.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommand.Bright">
      <summary>
            Gets or sets a value that represents the brightness of the ambient light of the entire image.
            </summary>
      <value>Value that represents the brightness of the ambient light of the entire image. This can be any number that is 0 or greater. If it is 0 the image will be black. This value is divided internally by 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommand.Ambient">
      <summary>
            Gets or sets the factor used when mixing the ambient color with the image.
            </summary>
      <value>Factor used when mixing the ambient color with the image. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.LightCommand.AmbientColor">
      <summary>
            Gets or sets the ambient color of the light sources in the Data property.
            </summary>
      <value>The ambient color of the light sources in the Data property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags">
      <summary>
            Enumeration that indicates the background color and the planes to be shown. You can use a bit wise OR (|) to specify one flag from each group.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
            You can use a bitwise OR (|) to specify one flag from each group.
            <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the background color</td><td>Color, NoChange</td></tr><tr><td>Flags that indicate which planes (with respect to the Z-axis) will be shown.</td><td>Left, Right, Down, Up</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags.Color">
      <summary>
            Use the FillColor as a background color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags.NoChange">
      <summary>
            Use the image itself as a background.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags.Left">
      <summary>
            The plane will be displayed to the left of the Z-axis.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags.Right">
      <summary>
             The plane will be displayed to the right of the Z-axis.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags.Up">
      <summary>
             The plane will be displayed above the Z-axis.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags.Down">
      <summary>
             The plane will be displayed below the Z-axis.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand">
      <summary>
             Applies an effect to an image that makes it look like it has been drawn with colored pencils. This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method applies an effect to an image that makes it look like it has been drawn with colored pencils.</description>
          </item>
          <item>
            <description>As an example, if you use the following figure:<br /><img src="ColoredPencil_O.jpg" /><br />
             If you call the ColoredPencilCommand using the following values:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>Ratio</td><td>90</td></tr><tr><td>Dimension</td><td>3</td></tr></table><br />
             The following figure results:<br /><img src="ColoredPencil_P.jpg" /></description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48 and 64 bit Effects images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
             </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand" /> on an image and applies the Colored Pencil filter.</para>
        <code lang="VB">   Public Sub ColoredPencilCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ColoredPencilCommand = New ColoredPencilCommand
      command.Ratio = 50
      command.Dimension = 3
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColoredPencilCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColoredPencilCommand command = new ColoredPencilCommand();
         command.Ratio = 50;
         command.Dimension = 3;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredPencilCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>. 
             <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand" /> class object with explicit parameters.
            </summary>
      <param name="ratio">Value that represents how much the image colors should be adjusted so they appear to be colored pencil colors.
            Valid values range from 0 to 100. A value of 0 means that the image will not have any change in pixel values whereas a value of 
            100 means that the maximum possible amount will be added to the pixel values.</param>
      <param name="dimension">Value that represents the size of the pencil coloring neighborhood. It is the length, in pixels, of 
            one side of a square. Valid values range from 0 to 100. Increasing this value increases the thickness of the edges that are detected.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand" /> on an image and applies the Colored Pencil filter.</para>
        <code lang="VB">   Public Sub ColoredPencilConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ColoredPencilCommand = New ColoredPencilCommand(50, 3)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColoredPencilConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColoredPencilCommand command = new ColoredPencilCommand(50, 3);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredPencilCommand.ColoredPencilConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand.Ratio">
      <summary>
            Gets or sets the value that indicates how much the image colors should be adjusted so they appear to be colored pencil colors on which the filter is applied.
            </summary>
      <value>Value that indicates the how much the image colors should be adjusted so they appear to be colored pencil colors on which the filter is applied. 
            Valid values range from 0 to 100. A value of 0 means that the image will not have any change in pixel values, whereas a value of 100 means that 
            the maximum possible amount will be added to the pixel values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand.Dimension">
      <summary>
            Gets or sets the value that indicates the size of the pencil coloring neighborhood.
            </summary>
      <value>Value that indicates the size of the pencil coloring neighborhood on which the filter is applied. 
            It is the length, in pixels, of one side of a square. Valid values range from 0 to 100. Increasing this value 
            increases the thickness of the edges that are detected.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand">
      <summary>
            Adds a three-dimensional texture pattern created by applying the bump image to the affected image.
             This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>If tiling is used,by either the Tile property being set to TRUE, or the tile parameter of the constructor being TRUE, the bump point(the BumpPoint property or the bumpPoint parameter of the constructor) represents the offset in the bump image. 
            If there is a region on the bump image, this region rectangle will represent the bump image.</description>
          </item>
          <item>
            <description>If tiling is not used, the bump point represents the position in the bump image.
             If a region is defined for either the bump or affected image, or both images, the effect applies only to the intersection of regions.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" /> on an image.</para>
        <code lang="VB">   Public Sub BumpMapCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY4.BMP")

      ' Prepare the command
      Dim command As BumpMapCommand = New BumpMapCommand
      command.Azimuth = 5
      command.Brightness = 50
      command.BumpImage = leadImage
      command.BumpPoint = New LeadPoint(0, 0)
      command.Depth = 3
      command.DestinationPoint = New LeadPoint(0, 0)
      command.Elevation = 0
      command.Intensity = 0
      command.LookupTable = Nothing
      command.Tile = True
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BumpMapCommandExample()
      {
         // Load an image
         RasterImage image;
         RasterCodecs codecs = new RasterCodecs();
         image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY4.bmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         // Prepare the command
         BumpMapCommand command = new BumpMapCommand();
         command.Azimuth          = 5;
         command.Brightness       = 50;
         command.BumpImage        = image;
         command.BumpPoint        = new LeadPoint(0, 0);
         command.Depth            = 3;
         command.DestinationPoint = new LeadPoint(0, 0);
         command.Elevation        = 0;
         command.Intensity        = 0;
         command.LookupTable      = null;
         command.Tile             = true;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BumpMapCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.#ctor">
      <summary>
            Initializes a new BumpMapCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.#ctor(Leadtools.RasterImage,System.Int32,System.Int32,System.Int32,Leadtools.LeadPoint,Leadtools.LeadPoint,System.Boolean,System.Int32,System.Int32,System.Int32[])">
      <summary>
            Initializes a new BumpMapCommand class object with explicit parameters.
            </summary>
      <param name="bumpImage">RasterImage object that references the image used to create the texture pattern.</param>
      <param name="azimuth">The azimuth describes the light source's angular position in the horizontal plane. The valid range is between -360 to 360.</param>
      <param name="elevation">The elevation describes the light source's angular position in the vertical plane. The valid range is between 0 to 180.</param>
      <param name="depth">The apparent depth of this three-dimensional effect. This parameter only accepts positive values.</param>
      <param name="bumpPoint">The upper-left corner of the Bump rectangle.</param>
      <param name="destinationPoint">The upper-left corner of the affected image rectangle.</param>
      <param name="tile">
            Flag that indicates whether to use tiling. 
            <br><table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td>true</td><td>use tiling</td></tr><tr><td>false</td><td>do not to use tiling</td></tr></table></br></param>
      <param name="brightness">Amount to change the intensity. The intensity ranges from -1000 to 1000. 
            A positive value increases (or lightens) the brightness of the resulting image. A negative value decreases (or darkens) the brightness of the resulting image.</param>
      <param name="intensity">Amount to change the intensity. The intensity ranges from -1000 to 1000. 
            A positive value increases (or lightens) the brightness of the resulting image. A negative value decreases (or darkens) the brightness of the resulting image.</param>
      <param name="lookupTable">Table of 256 integers containing lookup values that re-map bump image data.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" /> on an image.</para>
        <code lang="VB">   Public Sub BumpMapConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim nLookupTable() As Integer
      ReDim nLookupTable(255)
      Dim index As Integer = 0
      For index = 0 To 255
         nLookupTable(index) = index
      Next index

      Dim comand As BumpMapCommand = New BumpMapCommand(leadImage, 50, 5, 1, New LeadPoint(0, 0), New LeadPoint(0, 0), False, 50, 0, nLookupTable)
      comand.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BumpMapConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int[] nLookupTable = new int[256];
         for(int index = 0; index &lt; 256; index++)
            nLookupTable[index] = index;

         BumpMapCommand command = new BumpMapCommand(image, 50, 5, 1, new LeadPoint(0, 0), new LeadPoint(0, 0), false, 50, 0, nLookupTable);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.BumpMapCommand.BumpMapConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.Azimuth">
      <summary>
            Gets or sets a value that represents the azimuth. The azimuth describes the light source's angular position in the horizontal plane.
            </summary>
      <value> Value that represents the azimuth. The valid range is from -360 to 360.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.Elevation">
      <summary>
            Gets or sets the elevation value. The elevation describes the light source's angular position in the vertical plane.
            </summary>
      <value> Value that represents the elevation. The valid range is between 0 to 180.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.Depth">
      <summary>
            Gets or sets a value that represents the apparent depth of the bump three-dimensional effect.
            </summary>
      <value> Value that represents the apparent depth of this three-dimensional effect. This property only accepts positive values. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.BumpPoint">
      <summary>
            Gets or sets the upper-left corner of the Bump rectangle.
            </summary>
      <value> The upper-left corner of the Bump rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.DestinationPoint">
      <summary>
            Gets or sets the upper-left corner of the destination rectangle.
            </summary>
      <value> The upper-left corner of the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.Tile">
      <summary>
            Gets or sets a Boolean value that indicates whether to use tiling.
            </summary>
      <value> Boolean value that indicates whether to use tiling. 
            <table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td>true</td><td>use tiling</td></tr><tr><td>false</td><td>do not to use tiling</td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.Brightness">
      <summary>
            Gets or sets the amount to change the resulting image intensity.
            </summary>
      <value> Amount to change the intensity. The intensity ranges from -1000 to 1000. A positive value increases (or lightens) the brightness of the resulting image. A negative value decreases (or darkens) the brightness of the resulting image. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.Intensity">
      <summary>
            Gets or sets the amount to change the resulting image intensity.
            </summary>
      <value> Amount to change the intensity. The intensity ranges from -1000 to 1000. A positive value increases (or lightens) the brightness of the resulting image. A negative value decreases (or darkens) the brightness of the resulting image. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.LookupTable">
      <summary>
             Table of 256 integers containing lookup values that re-map bump image data.
             </summary>
      <value> Table of 256 integers containing lookup values that re-map bump image data. </value>
      <example>
        <code>
             Imports Leadtools
             Imports Leadtools.ImageProcessing.Effects
             
             ' Run the BumpMap command on an image.
             Private Sub BumpMapTest(ByVal image As RasterImage)
               Try
                  Dim nLookupTable() As Integer
                  ReDim nLookupTable(255)
                  Dim index As Integer = 0
                  For index = 0 To 255
                     nLookupTable(index) = index
                  Next index
            
                  Dim command As BumpMapCommand
                  command = New BumpMapCommand
                  command.Azimuth = 50
                  command.Brightness = 50
                  command.BumpImage = image
                  command.BumpPoint = New Point(0, 0)
                  command.Depth = 1
                  command.DestinationPoint = New Point(0, 0)
                  command.Elevation = 5
                  command.Intensity = 0
                  command.LookupTable = nLookupTable
                  command.Tile = True
                  command.Run(image)
               Catch e As Exception
                  MessageBox.Show(e.Message)
               End Try
             End Sub
             </code>
        <para>
          <b>C#</b>
        </para>
        <code>
             using Leadtools;
             using Leadtools.ImageProcessing.Effects;
             
             // Run the BumpMap command on an image.
             private void BumpMapTest(RasterImage image)
             {
                try
                {
                   int [] nLookupTable = new int[256];
                   for(int index = 0; index&lt;256; index++)
                   {
                      nLookupTable[index] = index;
                   }
                   
                   BumpMapCommand command = new BumpMapCommand();
                   command.Azimuth = 50;
                   command.Brightness = 50;
                   command.BumpImage = image;
                   command.BumpPoint = new Point(0, 0);
                   command.Depth = 1;
                   command.DestinationPoint = new Point(0, 0);
                   command.Elevation = 5;
                   command.Intensity = 0;
                   command.LookupTable = nLookupTable;
                   command.Tile = true;
                   command.Run(image);
                }
                catch(Exception exception)
                {
                   MessageBox.Show(exception.Message);
                }
             }
             </code>
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand.BumpImage">
      <summary>
            Gets or sets the RasterImage object that references the image used to create the texture pattern.
            </summary>
      <value>Image used to create texture pattern.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommandFlags">
      <summary>
            Flags that indicate how to handle exposed areas, and the wave radiation type. 
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how to handle exposed areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>Flags indicate the wave radiation typ</td><td>RadialWave, PondRippleWave</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommandFlags.Color">
      <summary>
             Fills any exposed areas with crFill.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommandFlags.Repeat">
      <summary>
            Stretchs the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommandFlags.NoChange">
      <summary>
             Leaves the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommandFlags.RadialWave">
      <summary>
             Creates distortion waves around the CenterPt.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommandFlags.PondRippleWave">
      <summary>
             Creates distortion waves that resemble the ripples in a pond.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand">
      <summary>
            Radially distorts the image by creating waves that twist the image around a specified center. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>As an example, if you use the following image:<br /><img src="diffuseglowbefore.jpg" /><Br />
            And you were to call ZigZagCommand using the following settings:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>Amplitude</td><td>47</td></tr><tr><td>Attenuation</td><td>92</td></tr><tr><td>Frequency</td><td>13</td></tr><tr><td>Phase</td><td>-162</td></tr><tr><td>CenterPoint</td><td>(192, 82)</td></tr><tr><td>FillColor</td><td>Black</td></tr><tr><td>Flags</td><td>Color | RadialWave</td></tr></table><br />
            The following figure results:<br /><img src="zigzagcenter.jpg" /><br />
            As another settings, if you use the same settings except you use the PondRippleWave flag, the following figure results:<br /><img src="zigzagpond.jpg" /></description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48 and 64 bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> on an image and applies the ZigZag filter.</para>
        <code lang="VB">   Public Sub ZigZagCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim ptCenter As LeadPoint = New LeadPoint(192, 82)
      Dim fillColor As RasterColor = New RasterColor(0, 0, 0)
      Dim command As ZigZagCommand = New ZigZagCommand

      command.Amplitude = 47
      command.Attenuation = 92
      command.Frequency = 13
      command.Phase = -162
      command.CenterPoint = ptCenter
      command.FillColor = fillColor
      command.Flags = ZigZagCommandFlags.Color Or ZigZagCommandFlags.RadialWave
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ZigZagCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint ptCenter = new LeadPoint(192, 82);
         RasterColor fillColor = new RasterColor(0, 0, 0);
         ZigZagCommand command = new ZigZagCommand();

         command.Amplitude = 47;
         command.Attenuation = 92;
         command.Frequency = 13;
         command.Phase = -162;
         command.CenterPoint = ptCenter;
         command.FillColor = fillColor;
         command.Flags = ZigZagCommandFlags.Color | ZigZagCommandFlags.RadialWave ;
         command.Run (image);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ZigZagCommand-->
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.ZigZagCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> class object with explicit parameters.
            </summary>
      <param name="amplitude">Non-zero value that represents the magnitude of the wave (amount of displacement), if RadialWave is set in the flags parameter. The valid range is from 1 - 100.</param>
      <param name="attenuation">Attenuation value. The attenuation value indicates how rapidly the wave amplitude decays as the wave travels along the radial line. The valid range is from 0 - 1000.</param>
      <param name="frequency">Number of times the waves repeat along the radial line.</param>
      <param name="phase">Wave phase shift, in hundredths of degrees. The valid range is from -36000 to 36000 (The value in degrees is phase divided by 100).</param>
      <param name="centerPoint">Point that contains the center of the zigzag wave.</param>
      <param name="fillColor">The RasterColor value that specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle exposed areas, and the wave radiation type.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> on an image and applies the ZigZag filter.</para>
        <code lang="VB">   Public Sub ZigZagConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim center As LeadPoint = New LeadPoint(192, 82)
      Dim fillColor As RasterColor = New RasterColor(0, 0, 0)
      Dim command As ZigZagCommand = New ZigZagCommand(47, 92, 13, -162, center, fillColor, ZigZagCommandFlags.Color Or ZigZagCommandFlags.RadialWave)

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ZigZagConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint center = new LeadPoint(192, 82);
         RasterColor fillColor = new RasterColor(0, 0, 0);
         ZigZagCommand command = new ZigZagCommand(47, 92, 13, -162, center, fillColor, ZigZagCommandFlags.Color | ZigZagCommandFlags.RadialWave);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ZigZagCommand.ZigZagConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.Amplitude">
      <summary>
            Gets or sets the value that indicates the non-zero value that represents the magnitude of the wave (amount of displacement) on which the filter is applied, if ZigZagCommandFlags.RadialWave is set in the flags parameter.
            </summary>
      <value>Value that indicates the non-zero value that represents the magnitude of the wave (amount of displacement) on which the filter is applied, if ZigZagCommandFlags.RadialWave is set in the flags parameter. The valid range is from 1 - 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.Attenuation">
      <summary>
            Gets or sets the value that indicates the attenuation value that indicates how rapidly the wave amplitude decays as the wave travels along the radial line on which the filter is applied.
            </summary>
      <value>Value that indicates the attenuation value that indicates how rapidly the wave amplitude decays as the wave travels along the radial line on which the filter is applied. The valid range is from 0 - 1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.Frequency">
      <summary>
            Gets or sets the value that indicates number of times the waves repeat along the radial line on which the filter is applied.
            </summary>
      <value>Value that indicates number of times the waves repeat along the radial line on which the filter is applied.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.Phase">
      <summary>
            Gets or sets the value that indicates wave phase shift, in hundredths of degrees on which the filter is applied.
            </summary>
      <value>Value that indicates the wave phase shift, in hundredths of degrees on which the filter is applied. The valid range is from -36000 to 36000 (The value in degrees is phase divided by 100).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.CenterPoint">
      <summary>
            Gets or sets the value that indicates the center of the zigzag wave on which the filter is applied.
            </summary>
      <value>Value that indicates the center of the zigzag wave on which the filter is applied.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.FillColor">
      <summary>
            Gets or sets the value that indicates the RasterColor value that specifies the fill color for any exposed areas on which the filter is applied.
            </summary>
      <value>Value that indicates the RasterColor value that specifies the fill color for any exposed areas on which the filter is applied.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand.Flags">
      <summary>
            Gets or sets flags that indicate how to handle exposed areas, and the wave radiation type.
            </summary>
      <value>Flags that indicate how to handle exposed areas, and the wave radiation type.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags">
      <summary>
        <para>Enumeration that indicates how to handle exposed areas, the type of information in the WaveLength property or waveLength parameter if you are using the appropriate Constructor, and the wave type.</para>
      </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Exposed Areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>WaveLength</td><td>Period, Frequency</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags.Color">
      <summary>
            Fill any exposed areas with the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.FillColor" />, or the <paramref name="fillColor" /> parameter if you are using the appropriate Constructor.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags.Period">
      <summary>
            The value of the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.WaveLength" /> property, or the waveLength parameter if you are using the appropriate Constructor, is a wave length given as a percent of the image dimensions. If this flag is used, the valid range is from 0 to 100.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags.Frequency">
      <summary>
            The value in the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.WaveLength" /> property, or the waveLength parameter if you are using the appropriate Constructor, is the frequency, or the number of times the wave repeats.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand">
      <summary>
            Distorts the image using a wave radiating from the center. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command applies a sinusoidal wave radiating from the specified center. The center point must be defined inside the image or inside the region, if the image has a region. </description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region only. </description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RadialWaveCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RadialWaveCommand = New RadialWaveCommand
      ' Apply zoom wave from center of the image.
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Amplitude = 5
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = RadialWaveCommandFlags.Repeat Or RadialWaveCommandFlags.Frequency
      command.Phase = 0
      command.WaveLength = 25
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RadialWaveCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RadialWaveCommand command = new RadialWaveCommand();
         // Apply zoom wave from center of the image.
         command.CenterPoint = new LeadPoint(image.Width / 2, image.Height / 2);
         command.Amplitude = 5;
         command.FillColor = new RasterColor(0, 0, 0);
         command.Flags = RadialWaveCommandFlags.Repeat | RadialWaveCommandFlags.Frequency;
         command.Phase = 0;
         command.WaveLength = 25;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RadialWaveCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.#ctor">
      <summary>
            Initializes a new RadialWaveCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags)">
      <summary>
            Initializes a new RadialWaveCommand class object with explicit parameters.
            </summary>
      <param name="amplitude">An integer that represents the magnitude of the wave. Valid values range from 0 to 100.</param>
      <param name="waveLength">Value that represents the wave length, if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand" />.Period flag is set. Possible values range from 1 - 100 and give the wavelength as a percentage of the image dimensions. 
            If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand" />.Frequency flag is set, this value is the number of repeated waves.</param>
      <param name="phase">Wave phase shift, in hundredths of degrees. The valid range is from -36000 to 36000 (The value in degrees is nPhase divided by 100). </param>
      <param name="centerPoint">Point from which the wave radiates.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle exposed areas, the type of information in the waveLength parameter.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RadialWaveConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RadialWaveCommand = New RadialWaveCommand(5, 25, 0, New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), New RasterColor(0, 0, 0), RadialWaveCommandFlags.Repeat Or RadialWaveCommandFlags.Frequency)
      ' Apply zoom wave from center of the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RadialWaveConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RadialWaveCommand command = new RadialWaveCommand(5, 25, 0, new LeadPoint(image.Width / 2, image.Height / 2), new RasterColor(0, 0, 0), RadialWaveCommandFlags.Repeat | RadialWaveCommandFlags.Frequency);
         // Apply zoom wave from center of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RadialWaveCommand.RadialWaveConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.Amplitude">
      <summary>
            Gets or sets an integer that represents the magnitude of the wave.
            </summary>
      <value>An integer that represents the magnitude of the wave. Valid values range from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.WaveLength">
      <summary>
            Gets or sets a value that represents the wave length.
            </summary>
      <value>Value that represents the wave length, if <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand" />.Period is set in the Flags property. Possible values range from 1 - 100 and give the wavelength as a percentage of the image dimensions. 
            If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommandFlags" />.Frequency flag is set in the Flags property, this value is the number of repeated waves.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.Phase">
      <summary>
            Gets or sets the Wave phase shift, in hundredths of degrees.
            </summary>
      <value>Wave phase shift, in hundredths of degrees. The valid range is from -36000 to 36000 (The value in degrees is Phase divided by 100).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the point from which the wave radiates.
            </summary>
      <value>Point from which the wave radiates.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand.Flags">
      <summary>
            Flags that indicate how to handle exposed areas, the type of information in the WaveLength property.
            </summary>
      <value>Flags that indicate how to handle exposed areas, the type of information in the WaveLength property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommandFlags">
      <summary>
            Flags that indicate how to handle peripherally exposed areas and areas exposed inside the surface.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how to handle peripherally exposed areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>Flags that indicate how to handle exposed areas inside the surface</td><td>Rotate, WithoutRotate</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommandFlags.Color">
      <summary>
             Fill any exposed areas with the fill color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommandFlags.Repeat">
      <summary>
             Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommandFlags.Rotate">
      <summary>
            Rotate the image inside the surface pattern.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommandFlags.WithoutRotate">
      <summary>
            Fill the exposed center the same way the peripherally exposed areas are filled.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand">
      <summary>
            Wraps the image along its radius on a 3D surface shaped by Curve. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>For an example, the following figure shows a image before the effect is applied.<para><img src="FreeRadBend_before.jpg" /></para>The following figure shows the same image after the effect has been applied.<para><img src="FreeRadBend_after.jpg" /></para></description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FreeRadialBendCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As FreeRadialBendCommand = New FreeRadialBendCommand
      Dim UserPoint() As LeadPoint
      ReDim UserPoint(3)
      Dim CenterPoint As LeadPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      Dim Curve() As Integer
      ReDim Curve(12)

      'Apply the filter
      UserPoint(0).X = 0
      UserPoint(0).Y = 0
      UserPoint(1).X = 3
      UserPoint(1).Y = 10
      UserPoint(2).X = 9
      UserPoint(2).Y = -10
      UserPoint(3).X = 12
      UserPoint(3).Y = 0

      EffectsUtilities.GetCurvePoints(Curve, UserPoint, CurvePointsType.Linear)
      command.Flags = FreeRadialBendCommandFlags.Color Or FreeRadialBendCommandFlags.Rotate
      command.CenterPoint = CenterPoint
      command.Scale = 200
      command.FillColor = New RasterColor(255, 0, 0)
      command.Curve = Curve
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreeRadialBendCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FreeRadialBendCommand command = new FreeRadialBendCommand();
         LeadPoint[] UserPoint = new LeadPoint[4];
         LeadPoint CenterPoint = new LeadPoint(image.Width / 2, image.Height / 2);
         int[] Curve = new int[13];

         //Apply the filter
         UserPoint[0].X = 0;
         UserPoint[0].Y = 0;
         UserPoint[1].X = 3;
         UserPoint[1].Y = 10;
         UserPoint[2].X = 9;
         UserPoint[2].Y = -10;
         UserPoint[3].X = 12;
         UserPoint[3].Y = 0; 

         EffectsUtilities.GetCurvePoints(Curve, UserPoint, CurvePointsType.Linear);
         for(int i = 0; i &lt; Curve.Length; i++)
            Curve[i] /= 50;
         command.Flags = FreeRadialBendCommandFlags.Color | FreeRadialBendCommandFlags.Rotate;
         command.CenterPoint = CenterPoint;
         command.Scale = 200;
         command.FillColor = new RasterColor(255, 0, 0);
         command.Curve = Curve;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreeRadialBendCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.#ctor(System.Int32[],System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" /> class object with explicit parameters.
            </summary>
      <param name="curve">Array of integers that represent surface shape values. Valid values for each element in the Curve array range between -1000 and 1000. Positive values mean the curve is concave in and negative values mean the curve is concave out. The values in this array are internally divided by 1000.</param>
      <param name="scale">Factor used to multiply the various amplitude values in the Curve array. Each value in the Curve array is multiplied by this factor. For example, if you want to double the size of the amplitude values, use a Scale value of 2; to triple the amplitudes values, use a Scale value of 3, etc. The top practical limit for this parameter is the width and height of the Run method image. This parameter only accepts positive values.</param>
      <param name="centerPoint">Contains the surface center.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle peripherally exposed areas and areas exposed inside the surface.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FreeRadialBendConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim userPoint() As LeadPoint
      ReDim userPoint(3)
      'Apply the filter
      userPoint(0).X = 0
      userPoint(0).Y = 0
      userPoint(1).X = 3
      userPoint(1).Y = 10
      userPoint(2).X = 9
      userPoint(2).Y = -10
      userPoint(3).X = 12
      userPoint(3).Y = 0

      Dim curve() As Integer
      ReDim curve(12)
      EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear)

      Dim CenterPoint As LeadPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      Dim command As FreeRadialBendCommand = New FreeRadialBendCommand(curve, 200, CenterPoint, New RasterColor(255, 0, 0), FreeRadialBendCommandFlags.Color Or FreeRadialBendCommandFlags.Rotate)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreeRadialBendConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] userPoint = new LeadPoint[4];
         LeadPoint centerPoint = new LeadPoint(image.Width / 2, image.Height / 2); 

         //Apply the filter
         userPoint[0].X = 0;
         userPoint[0].Y = 0;
         userPoint[1].X = 3;
         userPoint[1].Y = 10;
         userPoint[2].X = 9;
         userPoint[2].Y = -10;
         userPoint[3].X = 12;
         userPoint[3].Y = 0; 

         int[] curve = new int[13];
         EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear);
         for(int i = 0; i &lt; curve.Length; i++)
            curve[i] /= 50;

         FreeRadialBendCommand command = new FreeRadialBendCommand(curve, 200, centerPoint, new RasterColor(255, 0, 0), FreeRadialBendCommandFlags.Color | FreeRadialBendCommandFlags.Rotate);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreeRadialBendCommand.FreeRadialBendConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.Curve">
      <summary>
            Gets or sets an array of integers that represent surface shape values.
            </summary>
      <value>Array of integers that represent surface shape values. Valid values for each element in the Curve array range between -1000 and 1000. Positive values mean the curve is concave in and negative values mean the curve is concave out. The values in this array are internally divided by 1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.Scale">
      <summary>
            Gets or sets a value used to multiply the various amplitude values in the Curve array.
            </summary>
      <value>Factor used to multiply the various amplitude values in the Curve array. Each value in the Curve array is multiplied by this factor. For example, if you want to double the size of the amplitude values, use a Scale value of 2; to triple the amplitudes values, use a Scale value of 3, etc. The top practical limit for this property is the width and height of the Run method image. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the surface center.
            </summary>
      <value>Point structure that contains the surface center.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand.Flags">
      <summary>
            Gets or sets flags that indicate how to handle peripherally exposed areas and areas exposed inside the surface.
            </summary>
      <value>Flags that indicate how to handle peripherally exposed areas and areas exposed inside the surface.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags">
      <summary>
            Flags that indicate the distortion type and the distortion color. 
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one or more flag(s) from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the distortion type</td><td>AddNothing, AddVerticalScratch, AddHorizontalScratch, AddDust, AddPits</td></tr><tr><td>Flags that indicate the distortion color</td><td>ScratchInverse, ScratchColor, DustInverse, DustColor, PitsInverse, PitsColor</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.AddNothing">
      <summary>
            Do not add any distortion type. In this case, the image will be changed by random changes in the color intensity.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.AddVerticalScratch">
      <summary>
            Add vertical scratch lines.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.AddHorizontalScratch">
      <summary>
            Add horizontal scratch lines.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.AddDust">
      <summary>
            Add dust.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.AddPits">
      <summary>
            Add pits.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.ScratchInverse">
      <summary>
            Use the pixel's color inverse as the scratch line color. If this flag is set, ScratchColor will be ignored.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.ScratchColor">
      <summary>
            Use the value in ScratchColor as the scratch line color. 
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.DustInverse">
      <summary>
            Use the pixel's color inverse as the dust color. If this flag is set, DustColor will be ignored.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.DustColor">
      <summary>
            Use the value in DustColor as the dust color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.PitsInverse">
      <summary>
            Use the pixel's color inverse as the color of the pits. If this flag is set, PitsColor will be ignored.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags.PitsColor">
      <summary>
            Use the value in PitsColor as the color of the pits.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand">
      <summary>
            Adds effects that simulate random color changes, scratches, dust and pits, making an image look like it was made from an old film. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The width of the scratches is 1 pixel. The length of the scratches is random (between 2 and MaximumScratchLength).</description>
          </item>
          <item>
            <description>The size of the dust particles is 1 pixel (1x1).</description>
          </item>
          <item>
            <description>The size and shape of pits is selected at random. The pit shapes are random and will be between 1x1 and MaximumPitSize x MaximumPitSize.</description>
          </item>
          <item>
            <description>The command will also make random changes to the pixel's intensities.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AgingCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AgingCommand = New AgingCommand()

      command.HorizontalScratchCount = 10
      command.VerticalScratchCount = 2
      command.MaximumScratchLength = 50
      command.DustDensity = 2
      command.PitsDensity = 5
      command.MaximumPitSize = 6
      command.ScratchColor = New RasterColor(255, 255, 0)
      command.DustColor = New RasterColor(0, 0, 0)
      command.PitsColor = New RasterColor(0, 0, 255)
      command.Flags = AgingCommandFlags.AddVerticalScratch Or AgingCommandFlags.AddPits Or AgingCommandFlags.ScratchInverse Or AgingCommandFlags.PitsColor

      'Apply aging effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AgingCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AgingCommand command = new AgingCommand();
         command.HorizontalScratchCount = 10;
         command.VerticalScratchCount = 2;
         command.MaximumScratchLength = 50;
         command.DustDensity = 2;
         command.PitsDensity = 5;
         command.MaximumPitSize = 6;
         command.ScratchColor = new RasterColor(255, 255, 0);
         command.DustColor = new RasterColor(0, 0, 0);
         command.PitsColor = new RasterColor(0, 0, 255);
         command.Flags = AgingCommandFlags.AddVerticalScratch | AgingCommandFlags.AddPits | AgingCommandFlags.ScratchInverse | AgingCommandFlags.PitsColor;

         //Apply aging effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.AgingCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.AgingCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" /> class object with explicit parameters.
            </summary>
      <param name="horizontalScratchCount">Number of horizontal scratch lines. This parameter only accepts positive values.</param>
      <param name="verticalScratchCount">Number of vertical scratch lines. This parameter only accepts positive values.</param>
      <param name="maximumScratchLength">Maximum scratch line length, in pixels. Its minimum value is 2.</param>
      <param name="dustDensity">Dust density, expressed in tenths of a percent of the image area. Valid values range between 0 and 1000. This value is divided internally by 10. If uDustDen = 1000 then dust density = 100<![CDATA[&#37;]]> (that is, the number of dust points = the entire image area.)</param>
      <param name="pitsDensity">Density of the pits, expressed in tenths of percent of the image area. Valid values range between 0 and 1000. This value is divided internally by 10. If PitsDensity = 1000 then the density of the pits = 100<![CDATA[&#37;]]> (that is, the number of pits = the entire image area.)</param>
      <param name="maximumPitSize">Maximum pit size, in pixels. The size of the pits will be selected at random between 1 and MaximumPitSize.</param>
      <param name="scratchColor">Represents the color of the scratch lines.</param>
      <param name="dustColor">Represents the color of the dust.</param>
      <param name="pitsColor">Represents the color of the pits.</param>
      <param name="flags">Flags that indicate the distortion type and the distortion color.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AgingConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AgingCommand
      command = New AgingCommand(10, 2, 50, 2, 5, 6, New RasterColor(255, 255, 0), New RasterColor(0, 0, 0), New RasterColor(0, 0, 255), AgingCommandFlags.AddVerticalScratch Or AgingCommandFlags.AddPits Or AgingCommandFlags.ScratchInverse Or AgingCommandFlags.PitsColor)

      ' Apply aging effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AgingConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AgingCommand command = new AgingCommand(10, 2, 50, 2, 5, 6,
            new RasterColor(255, 255, 0),
            new RasterColor(0, 0, 0),
            new RasterColor(0, 0, 255),
            AgingCommandFlags.AddVerticalScratch | AgingCommandFlags.AddPits | AgingCommandFlags.ScratchInverse | AgingCommandFlags.PitsColor);

         // Apply aging effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.AgingCommand.AgingConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>String that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.HorizontalScratchCount">
      <summary>
            Gets or sets the number of horizontal scratch lines.
            </summary>
      <value>Number of horizontal scratch lines. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.VerticalScratchCount">
      <summary>
            Gets or sets the number of vertical scratch lines.
            </summary>
      <value>Number of vertical scratch lines. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.MaximumScratchLength">
      <summary>
            Gets or sets the maximum scratch line length.
            </summary>
      <value>Maximum scratch line length, in pixels. Its minimum value is 2.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.DustDensity">
      <summary>
            Gets or sets a value that represents the dust density, expressed in tenths of percent of the image area.
            </summary>
      <value>Dust density, expressed in tenths of a percent of the image area. Valid values range between 0 and 1000. This value is divided internally by 10. If this value = 1000 then dust density = 100<![CDATA[&#37;]]> (that is, the number of dust points = the entire image area.)</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.PitsDensity">
      <summary>
            Gets or sets a value that represents the density of the pits, expressed in tenths of a percent of the image area.
            </summary>
      <value>Density of the pits, expressed in tenths of a percent of the image area. Valid values range between 0 and 1000. This value is divided internally by 10. If this property = 1000 then the density of the pits = 100<![CDATA[&#37;]]> (that is, the number of pits = the entire image area.)</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.MaximumPitSize">
      <summary>
            GEts or sets a value that represents the maximum pit size, in pixels.
            </summary>
      <value>Maximum pit size, in pixels. The size of the pits will be selected at random between 1 and MaximumPitSize.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.ScratchColor">
      <summary>
            Gets or sets a value that represents the color of the scratch lines.
            </summary>
      <value>Color of the scratch lines.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.DustColor">
      <summary>
            Gets or sets a value that represents the color of the dust.
            </summary>
      <value>Color of the dust.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.PitsColor">
      <summary>
            Gets or sets a value that represents the color of the pits.
            </summary>
      <value>Represents the color of the pits.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.AgingCommand.Flags">
      <summary>
            Flags that indicate the distortion type and the distortion color.
            </summary>
      <value>Flags that indicate the distortion type and the distortion color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags">
      <summary>
            Flags that indicate the background color and which image dimension extends along the Z-axis. 
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the background color</td><td>Color, NoChange</td></tr><tr><td>Flags that indicate which image dimension is along the Z-axis</td><td>WidthAxis, HeightAxis</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags.Color">
      <summary>
            Use the FillColor property of the TunnelCommand class, or the fillColor parameter, if you are using the appropriate TunnelCommand Constructor, as a background color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags.NoChange">
      <summary>
             Use the image itself as a background.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags.WidthAxis">
      <summary>
            Image width will be along the Z-axis.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags.HeightAxis">
      <summary>
            Image height will be along the Z-axis.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand">
      <summary>
            Places the image inside a tunnel along the Z-axis. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command shows the effect of placing images on tunnels along the Z-axis and bending them toward a specific point. These images may be placed above, below, to the left or to the right of the Z-axis. An external light source of the specified color and brightness may be shined on the images. The brightness may vary along the z-axis according to the BrightLength value.</description>
          </item>
          <item>
            <description>Changing the camera center point, the rotation angle and the viewing screen Z-offset will simulate moving along the axis.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region dimensions only.</description>
          </item>
          <item>
            <description>For an example, see the following figure:<br /><img src="Tunnel_before.jpg" /><br />The following figure shows the same image, after the effect has been applied: <br /><img src="Tunnel_after.jpg" /><br />To obtain this effect, the following settings were used with the command:<br /><list type="number"><item><description>CenterPoint = new <see cref="T:Leadtools.LeadPoint" />(320, 256)</description></item><item><description>ZValue = 0</description></item><item><description>Distance = 200</description></item><item><description>Radius = 200</description></item><item><description>Repeat = -1</description></item><item><description>RotationOffset = 75</description></item><item><description>Stretch = 25</description></item><item><description>StartBright = 0</description></item><item><description>EndBright = 100</description></item><item><description>BrightLength = 45</description></item><item><description>BrightColor = new <see cref="T:Leadtools.RasterColor" />(255, 255, 255)</description></item><item><description>FillColor = new <see cref="T:Leadtools.RasterColor" />(255, 255, 255)</description></item><item><description>Flags = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags" />.WidthAxis | <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags" />.Color</description></item></list></description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub TunnelCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As TunnelCommand = New TunnelCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.ZValue = 0
      command.Distance = leadImage.Height
      command.Radius = leadImage.Width \ 2
      command.Repeat = -1
      command.RotationOffset = 0
      command.Stretch = 25
      command.StartBright = 0
      command.EndBright = 100
      command.BrightLength = 20000
      command.BrightColor = New RasterColor(255, 255, 255)
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = TunnelCommandFlags.WidthAxis Or TunnelCommandFlags.Color
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void TunnelCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         TunnelCommand command = new  TunnelCommand();
         command.CenterPoint = new LeadPoint(image.Width / 2, image.Height / 2);
         command.ZValue = 0;
         command.Distance = image.Height;
         command.Radius = image.Width / 2;
         command.Repeat = -1;
         command.RotationOffset = 0;
         command.Stretch = 25;
         command.StartBright = 0;
         command.EndBright = 100;
         command.BrightLength = 20000;
         command.BrightColor = new RasterColor(255, 255, 255);
         command.FillColor = new RasterColor(0, 0, 0);
         command.Flags =  TunnelCommandFlags.WidthAxis |  TunnelCommandFlags.Color;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.TunnelCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" /> class object with explicit parameters.
            </summary>
      <param name="centerPoint">Contains the point at which the camera or viewer is looking. It may be outside the image borders.</param>
      <param name="zValue">Viewing screen offset on the Z-axis, in pixels. This parameter only accepts positive values.</param>
      <param name="distance">Camera distance from the viewing screen, in pixels.</param>
      <param name="radius">Tunnel radius. This parameter only accepts positive values.</param>
      <param name="repeat">Number of times the image repeats along the Z-axis. If repeat equals -1 the image will be infinitely repeated. Its range starts from -1.</param>
      <param name="rotationOffset">Rotates tunnel around the Z-axis in pixel steps. If <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags" />.WidthAxis option is selected then the image width is along the Z-axis and RotationOffset set to the image height is equivalent to a complete cycle. If <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags" />.HeightAxis option is set, then the image height is along the Z-axis and RotationOffset set to the image width is equivalent to a complete cycle.</param>
      <param name="stretch">Value that indicates whether to expand or compress the image, and by how much. If Stretch &lt; 100 image will be expanded. If Stretch &gt; 100 the image will be compressed. Use 100 to maintain the image's dimensions. The value of this parameter is internally divided by 100. This parameter only accepts positive values.</param>
      <param name="startBright">Value that indicates the brightness of an external light source at the beginning of the tunnel. Possible values range from 0 to 100. A value of 0 indicates no external light is displayed at the beginning of the tunnel. A value of 100 indicates an external light source with full brightness is displayed.</param>
      <param name="endBright">Value that indicates the brightness of an external light source at the end of the tunnel. Possible values range from 0 to 100. A value of 0 indicates no external light displayed at the end of the tunnel. A value of 100 indicates an external light source with full brightness is displayed on the image.</param>
      <param name="brightLength">Value that indicates how much the brightness changes as you move along the Z axis. This parameter is internally multiplied by 50. This property only accepts positive values.</param>
      <param name="brightColor">Specifies the color of an external light source that shines in the tunnel.</param>
      <param name="fillColor">Specifies the background color.</param>
      <param name="flags">Flag that indicates the background color and which image dimension extends along the Z-axis.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub TunnelConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As TunnelCommand = New TunnelCommand(New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), 0, leadImage.Height, leadImage.Width \ 2, -1, 0, 25, 0, 100, 20000, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0), TunnelCommandFlags.WidthAxis Or TunnelCommandFlags.Color)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void TunnelConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         TunnelCommand command = new TunnelCommand(new LeadPoint(image.Width / 2, image.Height / 2), 0, image.Height, image.Width / 2, -1, 0, 25, 0, 100, 20000, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0), TunnelCommandFlags.WidthAxis | TunnelCommandFlags.Color);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.TunnelCommand.TunnelConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the point at which the camera or viewer is looking.
            </summary>
      <value>Point structure that contains the point at which the camera or viewer is looking. It may be outside the image borders.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.ZValue">
      <summary>
            Gets or sets a value that represents the viewing screen offset on the Z-axis.
            </summary>
      <value>Viewing screen offset on the Z-axis, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.Distance">
      <summary>
            Gets or sets the camera distance from the viewing screen.
            </summary>
      <value>Camera distance from the viewing screen, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.Radius">
      <summary>
            Gets or sets the tunnel radius. 
            </summary>
      <value>Tunnel radius. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.Repeat">
      <summary>
            Gets or sets the number of times the image repeats along the Z-axis.
            </summary>
      <value>Number of times the image repeats along the Z-axis. If Repeat equals -1 the image will be infinitely repeated. Its range starts at -1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.RotationOffset">
      <summary>
            Gets or sets a value that rotates the tunnel around the Z-axis in pixel steps.
            </summary>
      <value>Rotates the tunnel around the Z-axis in pixel steps. If <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags" />.WidthAxis option is set then the image width is along the Z-axis and RotationOffset set to the image height is equivalent to a complete cycle. If <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommandFlags" />.HeightAxis option is set, then the image height is along the Z-axis and RotationOffset set to the image width is equivalent to a complete cycle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.Stretch">
      <summary>
            Gets or sets a value that indicates whether to expand or compress the image, and by how much.
            </summary>
      <value>Value that indicates whether to expand or compress the image, and by how much. If Stretch &lt; 100 image will be expanded. If Stretch &gt; 100 the image will be compressed. Use 100 to maintain the image's dimensions. The value of this property is internally divided by 100. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.StartBright">
      <summary>
            Gets or sets a value that indicates the brightness of an external light source at the beginning of the tunnel.
            </summary>
      <value>Value that indicates the brightness of an external light source at the beginning of the tunnel. Possible values range from 0 to 100. A value of 0 indicates no external light is displayed at the beginning of the tunnel. A value of 100 indicates an external light source with full brightness is displayed.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.EndBright">
      <summary>
            Gets or sets a value that indicates the brightness of an external light source at the end of the tunnel.
            </summary>
      <value>Value that indicates the brightness of an external light source at the end of the tunnel. Possible values range from 0 to 100. A value of 0 indicates no external light displayed at the end of the tunnel. A value of 100 indicates an external light source with full brightness is displayed on the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.BrightLength">
      <summary>
            Gets or sets a value that indicates how much the brightness changes as you move along the Z axis.
            </summary>
      <value>Value that indicates how much the brightness changes as you move along the Z axis. This property is internally multiplied by 50. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.BrightColor">
      <summary>
            Gets or sets the color of an external light source that shines in the tunnel.
            </summary>
      <value>The color of an external light source that shines in the tunnel.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.FillColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <value>The background color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand.Flags">
      <summary>
            Gets or sets flags that indicate the background color and which image dimension extends along the Z-axis.
            </summary>
      <value>Flags that indicate the background color and which image dimension extends along the Z-axis.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommandFlags">
      <summary>
            This enumeration indicates how to handle exposed areas outside the sphere and inside 
            the sphere.
            </summary>
            /// <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Exposed Areas Outside The Sphere</td><td>Color, Repeat, NoChange</td></tr><tr><td>Exposed Areas Inside The Sphere</td><td>Rotate, WithoutRotate</td></tr></table></remarks><noexample /></member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.SphereCommandFlags.Color">
      <summary>
            Fill any exposed areas with the color stored in the FillColor property
            of the SphereCommand class or the fill Color parameter if you are using the appropriate SphereCommand Constructor.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.SphereCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.SphereCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.SphereCommandFlags.Rotate">
      <summary>
            Rotate the image inside the sphere pattern.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.SphereCommandFlags.WithoutRotate">
      <summary>
            Fill the exposed sphere pattern center as you would any exposed area 
            outside the sphere.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand">
      <summary>
            Warps the image around a 3D spherical shape. This command is available 
            in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command will warp the image as a 3D spherical 
            shape around a specific center point. The center point must 
            be defined inside the image or inside the region, if the image has a 
            region.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied 
            on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images.
            Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the
            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SphereCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SphereCommand = New SphereCommand
      ' Warp the image around 3D spherical shape around the center of the image.
      command.CenterPoint = New LeadPoint((leadImage.Width \ 2), (leadImage.Height \ 2))
      command.Value = 100
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = SphereCommandFlags.Repeat Or SphereCommandFlags.Rotate
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SphereCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SphereCommand command = new SphereCommand();
         // Warp the image around 3D spherical shape around the center of the image.
         command.CenterPoint = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Value         = 10;
         command.FillColor     = new RasterColor(0,0,0);
         command.Flags         = SphereCommandFlags.Repeat | 
            SphereCommandFlags.Rotate;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.SphereCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.#ctor">
      <summary>
            Initializes a new SphereCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.#ctor(System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.SphereCommandFlags)">
      <summary>
            Initializes a new SphereCommand class object with explicit parameters.
            </summary>
      <param name="value">Amount of stretching where:
            <br />Positive values: stretch the central pixels toward the edges.
            <br />Negative values: stretch the pixels toward the center.
            <br />Valid values are range in between -500 and 500.</param>
      <param name="centerPoint">The center of the sphere.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle exposed areas 
            outside the sphere and inside the sphere.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SphereConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SphereCommand = New SphereCommand(100, New LeadPoint((leadImage.Width \ 2), (leadImage.Height \ 2)), New RasterColor(0, 0, 0), SphereCommandFlags.Repeat Or SphereCommandFlags.Rotate)
      ' Warp the image around 3D spherical shape around the center of the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SphereConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SphereCommand command = new SphereCommand(10, new LeadPoint((image.Width / 2), (image.Height / 2)), new RasterColor(0, 0, 0), SphereCommandFlags.Repeat | SphereCommandFlags.Rotate);
         // Warp the image around 3D spherical shape around the center of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.SphereCommand.SphereConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.Value">
      <summary>
            Gets or sets the amount of stretching.
            </summary>
      <value>Amount of stretching where:
            <br />Positive values: stretch the central pixels toward the edges.
            <br />Negative values: stretch the pixels toward the Center.
            <br />Valid values are range in between -500 and 500.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the center of the sphere.
            </summary>
      <value>Point structure that contains the center of the sphere.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.SphereCommand.Flags">
      <summary>
            Gets or sets a value that indicates how to handle exposed areas outside the 
            sphere and inside the sphere.
            </summary>
      <value>Value that indicates how to handle exposed areas outside 
            the sphere and inside the sphere.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand">
      <summary>
            Blurs the image along radial lines starting from a specific center 
            point. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command will blur and zoom the image around the 
            specified center point. The center point must be defined inside 
            the image, or inside the region if the image has a region.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied
            on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images. It returns the error code ERROR_GRAY32_UNSUPPORTED if a 32-bit grayscale image is passed to this method.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ZoomBlurCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ZoomBlurCommand = New ZoomBlurCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Dimension = 50
      command.Stress = 5
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ZoomBlurCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ZoomBlurCommand command = new ZoomBlurCommand();
         command.CenterPoint = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Dimension       = 50;
         command.Stress          = 5;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ZoomBlurCommand-->
      </example>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /><seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand.#ctor">
      <summary>
            Initializes a new ZoomBlurCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand.#ctor(System.Int32,System.Int32,Leadtools.LeadPoint)">
      <summary>
            Initializes a new ZoomBlurCommand class object with explicit parameters.
            </summary>
      <param name="dimension">A value that represents the amount of the 
            blur. Only positive values are accepted.</param>
      <param name="stress">A value that represents the amount of the blur 
            intensity. Only positive values are accepted.</param>
      <param name="centerPoint">The center point from which to blur the image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ZoomBlurConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ZoomBlurCommand = New ZoomBlurCommand(50, 5, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2))
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ZoomBlurConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ZoomBlurCommand command = new ZoomBlurCommand(50, 5, new LeadPoint((image.Width / 2), (image.Height / 2)));
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ZoomBlurCommand.ZoomBlurConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand.Dimension">
      <summary>
            Gets or sets a value that represents the amount of the blur.
            </summary>
      <value>A value that represents the amount of the blur. Only positive 
            values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand.Stress">
      <summary>
            Gets or sets a value that represents the amount of the blur intensity.
            </summary>
      <value>A value that represents the amount of the blur intensity. Only 
            positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the center point from which to blur the image.
            </summary>
      <value>The center point from which to blur the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand">
      <summary>
            Spins the image according to the rotation angle to produce a swirl 
            pattern. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command swirls the image around a specific 
            center point. The center point must be defined inside the image,
            or inside the region, if the image has a region.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied
            on the region only.</description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SwirlCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SwirlCommand = New SwirlCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Angle = 360

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SwirlCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SwirlCommand command = new SwirlCommand();
         command.CenterPoint = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Angle = 50;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.SwirlCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand.#ctor">
      <summary>
            Initializes a new SwirlCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand.#ctor(System.Int32,Leadtools.LeadPoint)">
      <summary>
            Initializes a new SwirlCommand class object with explicit parameters.
            </summary>
      <param name="angle">The degree of rotation. This value is in degrees 
            (0_360_720, etc.).</param>
      <param name="centerPoint">The center of the swirl.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SwirlConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SwirlCommand = New SwirlCommand(360, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2))
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SwirlConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SwirlCommand command = new SwirlCommand(50, new LeadPoint((image.Width / 2), (image.Height / 2)));
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.SwirlCommand.SwirlConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand.Angle">
      <summary>
            Gets or sets the degree of rotation.
            </summary>
      <value>The degree of rotation. This value is in degrees (0_360_720, etc.).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the center of the swirl.
            </summary>
      <value>Point structure that contains the center of the swirl.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommandFlags">
      <summary>
        <para>Flags that indicate how to handle exposed areas, and the direction of the shear wave.</para>
      </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Exposed Areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>Shear direction</td><td>Horizontal, Vertical</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommandFlags.Color">
      <summary>
            Fill any exposed areas with <see cref="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.FillColor" />.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommandFlags.Horizontal">
      <summary>
            Apply the shear wave horizontally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommandFlags.Vertical">
      <summary>
            Apply the shear wave vertically.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand">
      <summary>
            Shears the image by the wave drawn using the amplitudes array. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command will shear the image using the wave in the amplitudes array. The wave can be applied vertically or horizontally. 
            The amplitudes data can be obtained from the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetCurvePoints(System.Int32[],Leadtools.LeadPoint[],Leadtools.ImageProcessing.Effects.CurvePointsType)" /> utility method.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FreeHandShearCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim UserPoint() As LeadPoint
      ReDim UserPoint(3)
      Dim Amplitudes() As Integer
      ReDim Amplitudes(12)

      Dim command As FreeHandShearCommand = New FreeHandShearCommand

      ' Fill apUserPoint array with points that define a triangular wave
      UserPoint(0).X = 0
      UserPoint(0).Y = 0
      UserPoint(1).X = 3
      UserPoint(1).Y = 10
      UserPoint(2).X = 9
      UserPoint(2).Y = -10
      UserPoint(3).X = 12
      UserPoint(3).Y = 0

      ' Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array.
      EffectsUtilities.GetCurvePoints(Amplitudes, UserPoint, CurvePointsType.Linear)

      ' Normalize Amplitudes array (maximum value in Amplitudes is 1000 and lower is -1000).

      Dim Maximum As Integer
      Dim i As Integer
      Maximum = 0
      For i = 0 To 12
         If (Maximum &lt; Amplitudes(i)) Then
            Maximum = Amplitudes(i)
         End If
      Next

      If (Maximum &lt;&gt; 0) Then
         For i = 0 To 12
            Amplitudes(i) = (1000 * Amplitudes(i) \ Math.Abs(Maximum))
         Next
      End If

      command.Amplitudes = Amplitudes
      command.Scale = 100
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = FreeHandShearCommandFlags.Horizontal Or FreeHandShearCommandFlags.Repeat

      ' Apply the shear wave horizontally.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreeHandShearCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] UserPoint = new LeadPoint[4];
         int[]   Amplitudes = new int[13];

         FreeHandShearCommand command = new FreeHandShearCommand();

         // Fill apUserPoint array with points that define a triangular wave
         UserPoint[0].X = 0;
         UserPoint[0].Y = 0;
         UserPoint[1].X = 3;
         UserPoint[1].Y = 10;
         UserPoint[2].X = 9;
         UserPoint[2].Y = -10;
         UserPoint[3].X = 12;
         UserPoint[3].Y = 0;

         // Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array.
         EffectsUtilities.GetCurvePoints(Amplitudes, UserPoint, CurvePointsType.Linear);

         // Normalize Amplitudes array (maximum value in Amplitudes is 1000 and lower is -1000).
         int Maximum, i;
         for(Maximum = 0, i = 0; i &lt;  13; i++)
         {
            if(Maximum &lt; Amplitudes [i])
               Maximum =  Amplitudes [i];
         }

         if(Maximum != 0)
         {
            for(i = 0; i &lt; 13; i++)
            {
               Amplitudes [i] = (1000 * Amplitudes [i] / Math.Abs(Maximum));
            }
         }

         command.Amplitudes = Amplitudes;
         command.Scale     = 100;
         command.FillColor = new RasterColor(0, 0, 0);
         command.Flags     = FreeHandShearCommandFlags.Horizontal | FreeHandShearCommandFlags.Repeat;

         // Apply the shear wave horizontally.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreeHandShearCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.#ctor">
      <summary>
            Initializes a new FreeHandShearCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.#ctor(System.Int32[],System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommandFlags)">
      <summary>
            Initializes a new FreeHandShearCommand class object with explicit parameters.
            </summary>
      <param name="amplitudes">Array of integers that represent shear wave values. 
            The real values of the array elements is divided by 1000, and the valid value of each element in the amplitudes array is 
            between -1000 and 1000. These values are generally obtained from the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetCurvePoints(System.Int32[],Leadtools.LeadPoint[],Leadtools.ImageProcessing.Effects.CurvePointsType)" /> 
            utility method.</param>
      <param name="scale">Factor used to increase or decrease the various amplitude values in the amplitudes array. 
            Each value in the amplitudes array is multiplied by this factor. The real factor value is the scale value divided by 100. The valid range is from 0 to 100.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle exposed areas, and the direction of the shear wave.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FreeHandShearConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim userPoint() As LeadPoint
      ReDim userPoint(3)
      ' Fill apUserPoint array with points that define a triangular wave
      userPoint(0).X = 0
      userPoint(0).Y = 0
      userPoint(1).X = 3
      userPoint(1).Y = 10
      userPoint(2).X = 9
      userPoint(2).Y = -10
      userPoint(3).X = 12
      userPoint(3).Y = 0

      Dim amplitudes() As Integer
      ReDim amplitudes(12)
      ' Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array.
      EffectsUtilities.GetCurvePoints(amplitudes, userPoint, CurvePointsType.Linear)

      ' Normalize Amplitudes array (maximum value in Amplitudes is 1000 and lower is -1000).
      Dim maximum As Integer
      Dim i As Integer
      maximum = 0
      For i = 0 To 12
         If (maximum &lt; amplitudes(i)) Then
            maximum = amplitudes(i)
         End If
      Next

      If (maximum &lt;&gt; 0) Then
         For i = 0 To 12
            amplitudes(i) = (1000 * amplitudes(i) \ Math.Abs(maximum))
         Next
      End If

      Dim command As FreeHandShearCommand
      command = New FreeHandShearCommand(amplitudes, 100, New RasterColor(0, 0, 0), FreeHandShearCommandFlags.Horizontal Or FreeHandShearCommandFlags.Repeat)
      ' Apply the shear wave horizontally.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreeHandShearConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] userPoint = new LeadPoint[4];
         // Fill apUserPoint array with points that define a triangular wave
         userPoint[0].X = 0;
         userPoint[0].Y = 0;
         userPoint[1].X = 3;
         userPoint[1].Y = 10;
         userPoint[2].X = 9;
         userPoint[2].Y = -10;
         userPoint[3].X = 12;
         userPoint[3].Y = 0;

         int[] amplitudes = new int[13];
         // Draw a triangular wave according to UserPoint points and store the Amplitudes values in the Amplitudes array.
         EffectsUtilities.GetCurvePoints(amplitudes, userPoint, CurvePointsType.Linear);
         // Normalize Amplitudes array (maximum value in Amplitudes is 1000 and lower is -1000).
         int maximum, i;
         for(maximum = 0, i = 0; i &lt; 13; i++)
         {
            if(maximum &lt; amplitudes [i])
               maximum = amplitudes [i];
         }
         if(maximum != 0)
         {
            for(i = 0; i &lt; 13; i++)
            {
               amplitudes [i] = (1000 * amplitudes [i] / Math.Abs(maximum));
            }
         }

         FreeHandShearCommand command = new FreeHandShearCommand(amplitudes, 100, new RasterColor(0, 0, 0), FreeHandShearCommandFlags.Horizontal | FreeHandShearCommandFlags.Repeat);
         // Apply the shear wave horizontally.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreeHandShearCommand.FreeHandShearConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.Amplitudes">
      <summary>
            Gets or sets an array of integers that represent shear wave values.
            </summary>
      <value>Array of integers that represent shear wave values. 
            The real values of the array elements is divided by 1000, 
            and the valid value of each element in the amplitudes array is between -1000 and 1000. 
            These values are generally obtained from the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetCurvePoints(System.Int32[],Leadtools.LeadPoint[],Leadtools.ImageProcessing.Effects.CurvePointsType)" /> 
            utility method.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.Scale">
      <summary>
            Factor used to increase or decrease the various amplitude values in the Amplitudes property. 
            </summary>
      <value>Factor used to increase or decrease the various amplitude values in the Amplitudes array. Each value in the amplitudes array is multiplied by this factor. The real factor value is the scale value divided by 100. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.FillColor">
      <summary>
            Specifies the fill color for any exposed areas.
            </summary>
      <value>Specifies the fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand.Flags">
      <summary>
            Flags that indicate how to handle exposed areas, and the direction of the shear wave.
            </summary>
      <value>Values that indicate how to handle exposed areas, and the direction of the shear wave.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">
      <summary>
            This enumeration specifies the different types of coloring methods.
            </summary>
      <example>
        <para />
        <code lang="VB">   ' Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
   Public Sub ColoredPencilExtendedCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\NaturalFruits.jpg")

      ' Prepare the command
      Dim command As ColoredPencilExtendedCommand = New ColoredPencilExtendedCommand
      command.Size = 5
      command.Strength = 4
      command.Threshold = 0
      command.PencilRoughness = 250
      command.StrokeLength = 15
      command.PaperRoughness = 100
      command.Flags = ColoredPencilExtendedCommandFlags.Artistic
      command.Run(leadImage)

      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\Result - ColoredPencilExtendedCommandVB.jpg", RasterImageFormat.Jpeg, 24)
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      // Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
      public void ColoredPencilExtendedCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\NaturalFruits.jpg");

         // Prepare the command
         ColoredPencilExtendedCommand command = new ColoredPencilExtendedCommand();
         command.Size = 5;
         command.Strength = 4;
         command.Threshold = 0;
         command.PencilRoughness = 250;
         command.StrokeLength = 15;
         command.PaperRoughness = 100;
         command.Flags = ColoredPencilExtendedCommandFlags.Artistic;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\Result - ColoredPencilExtendedCommandCS.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand-->
      </example>
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags.Artistic">
      <summary>
            Use artistic coloring, where no specific direction dominates the entire image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags.Directional">
      <summary>
            Use the direction specified by the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.Angle">Angle</see> value when coloring the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags.CombineOriginal">
      <summary>
            Combine the resulting image with the original one.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand">
      <summary>
            Applies an effect to a bitmap that makes it look like it has been drawn with colored pencils. This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method applies an effect to an image that makes it look
                 like it has been drawn with colored pencils.</description>
          </item>
          <item>
            <description>As an example, if you use the following figure:</description>
          </item>
        </list>
        <para>
          <img src="ColoredPencilBitmapExt1.bmp" />
        </para>
        <para>
              If you call the ColoredPencilExtendedCommand using the following values:</para>
        <para class="xmldocbulletlist">
          <list type="table">
            <item>
              <term>
                <b>Parameter</b>
              </term>
              <description>
                <b>Value</b>
              </description>
            </item>
            <item>
              <term>Size</term>
              <description>5</description>
            </item>
            <item>
              <term>Strength</term>
              <description>4</description>
            </item>
            <item>
              <term>Threshold</term>
              <description>0</description>
            </item>
            <item>
              <term>PencilRoughness</term>
              <description>250</description>
            </item>
            <item>
              <term>StrokeLength</term>
              <description>15</description>
            </item>
            <item>
              <term>PaperRoughness</term>
              <description>100</description>
            </item>
            <item>
              <term>Angle</term>
              <description>0</description>
            </item>
            <item>
              <term>Flags</term>
              <description>
                <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">ColoredPencilExtendedCommandFlags.Artistic</see>
              </description>
            </item>
          </list>
        </para>
        <para class="xmldocbulletlist">
          <br />
            The following figure results:<br /><img src="ColoredPencilBitmapExt2.bmp" /></para>
        <list type="bullet">
          <item>
            <description>
                    This method supports 12- and 16-bit grayscale and 48 and 64-bit color
                    images. Support for 12- and 16-bit grayscale and 48- and 64-bit Effects
                    images is available only in the
                    <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see>
                    toolkits.
                 </description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale
                     images.</description>
          </item>
        </list>
      </remarks>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand">
      </seealso>
      <example>
        <para />
        <code lang="VB">   ' Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
   Public Sub ColoredPencilExtendedCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\NaturalFruits.jpg")

      ' Prepare the command
      Dim command As ColoredPencilExtendedCommand = New ColoredPencilExtendedCommand
      command.Size = 5
      command.Strength = 4
      command.Threshold = 0
      command.PencilRoughness = 250
      command.StrokeLength = 15
      command.PaperRoughness = 100
      command.Flags = ColoredPencilExtendedCommandFlags.Artistic
      command.Run(leadImage)

      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\Result - ColoredPencilExtendedCommandVB.jpg", RasterImageFormat.Jpeg, 24)
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      // Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
      public void ColoredPencilExtendedCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\NaturalFruits.jpg");

         // Prepare the command
         ColoredPencilExtendedCommand command = new ColoredPencilExtendedCommand();
         command.Size = 5;
         command.Strength = 4;
         command.Threshold = 0;
         command.PencilRoughness = 250;
         command.StrokeLength = 15;
         command.PaperRoughness = 100;
         command.Flags = ColoredPencilExtendedCommandFlags.Artistic;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\Result - ColoredPencilExtendedCommandCS.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand-->
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <remarks>
            The following is a list of the default values that are set when calling the default constructor:
            <list type="table"><item><term><b>Parameter</b></term><description><b>Value</b></description></item><item><term>Size</term><description>5</description></item><item><term>Strength</term><description>4</description></item><item><term>Threshold</term><description>0</description></item><item><term>PencilRoughness</term><description>250</description></item><item><term>StrokeLength</term><description>15</description></item><item><term>PaperRoughness</term><description>100</description></item><item><term>Angle</term><description>-45</description></item><item><term>Flags</term><description><see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">ColoredPencilExtendedCommandFlags.Artistic</see> | <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">ColoredPencilExtendedCommandFlags.CombineOriginal</see></description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">   ' Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
   Public Sub ColoredPencilExtendedCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\NaturalFruits.jpg")

      ' Prepare the command
      Dim command As ColoredPencilExtendedCommand = New ColoredPencilExtendedCommand
      command.Size = 5
      command.Strength = 4
      command.Threshold = 0
      command.PencilRoughness = 250
      command.StrokeLength = 15
      command.PaperRoughness = 100
      command.Flags = ColoredPencilExtendedCommandFlags.Artistic
      command.Run(leadImage)

      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\Result - ColoredPencilExtendedCommandVB.jpg", RasterImageFormat.Jpeg, 24)
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      // Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
      public void ColoredPencilExtendedCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\NaturalFruits.jpg");

         // Prepare the command
         ColoredPencilExtendedCommand command = new ColoredPencilExtendedCommand();
         command.Size = 5;
         command.Strength = 4;
         command.Threshold = 0;
         command.PencilRoughness = 250;
         command.StrokeLength = 15;
         command.PaperRoughness = 100;
         command.Flags = ColoredPencilExtendedCommandFlags.Artistic;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\Result - ColoredPencilExtendedCommandCS.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand-->
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> class object with explicit parameters.
            </summary>
      <param name="size">Size of the neighborhood used to determine the width of the outlines.</param>
      <param name="strength">Strength factor used to create the "outline". This can be any number that is 0 or greater.</param>
      <param name="threshold">Threshold value used to determine which pixels are edge pixels (outlines). If the difference determined for a pixel is greater than this value, the pixel is an edge pixel. Valid values range from 0 through 65535 for 64-bit, 48-bit and 16-bit grayscale images and from 0 through 4095 for 12-bit grayscale images. Otherwise, it is from 0 to 255. Use this parameter to control the number of edge pixels found.</param>
      <param name="pencilRoughness">Percentage of coloring coverage (colored pencil roughness), expressed in tenths of a percent. Valid values are 0 to 1000.</param>
      <param name="strokeLength">Length of the colored pencil stroke, in pixels.</param>
      <param name="paperRoughness">Percentage of paper surface roughness, expressed in tenths of a percent. Valid values are 0 to 1000.</param>
      <param name="angle">Value that represents the direction of the coloring motion, in hundredths of a degree (+/-) This value can be a number from -18000 to 18000. This parameter is ignored when <paramref name="Flags" /> = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">ColoredPencilExtendedCommandFlags.Artistic</see>.</param>
      <param name="flags">Flags that determine which the type of direction to use and whether to combine the resulted image with the original one or not. For valid values, refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags" />.</param>
      <example>
        <para />
        <code lang="VB">   ' Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
   Public Sub ColoredPencilExtendedConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\NaturalFruits.jpg")

      ' Prepare the command
      Dim command As ColoredPencilExtendedCommand = New ColoredPencilExtendedCommand(5, 4, 0, 250, 15, 100, 0, ColoredPencilExtendedCommandFlags.Artistic)
      command.Run(leadImage)

      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "ImageProcessingDemo\Result - ColoredPencilExtendedConstructorVB.jpg", RasterImageFormat.Jpeg, 24)
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      // Run the ColoredPencilExtendedCommand on an image and applies the Colored Pencil Extended filter.
      public void ColoredPencilExtendedConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\NaturalFruits.jpg");

         // Prepare the command
         ColoredPencilExtendedCommand command = new ColoredPencilExtendedCommand(5, 4, 0, 250, 15, 100, 0, ColoredPencilExtendedCommandFlags.Artistic);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + @"ImageProcessingDemo\Result - ColoredPencilExtendedConstructorCS.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.ColoredPencilExtendedConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.Size">
      <summary>
            Gets or sets the size of the neighborhood used to determine the width of the outlines.
            </summary>
      <value>Value that indicates the size of the neighborhood used to determine the width of the outlines. Default value is 5.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.Strength">
      <summary>
            Gets or sets the strength factor used to create the "outline". This can be any number that is 0 or greater.
            </summary>
      <value>Value that indicates the strength factor used to create the "outline". This can be any number that is 0 or greater. Default value is 4.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.Threshold">
      <summary>
            Gets or sets the threshold value.
            </summary>
      <value>Value that indicates the threshold used to determine which pixels are edge pixels (outlines). If the difference determined for a pixel is greater than this value, the pixel is an edge pixel. Valid values range from 0 through 65535 for 64-bit, 48-bit and 16-bit grayscale images and from 0 through 4095 for 12-bit grayscale images. Otherwise, it is from 0 to 255. Use this parameter to control the number of edge pixels found. Default value is 0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.PencilRoughness">
      <summary>
            Gets or sets the percentage of coloring coverage.
            </summary>
      <value>Value that indicates the percentage of coloring coverage (colored pencil roughness), expressed in tenths of a percent. Valid values are 0 to 1000. Default value is 250.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.StrokeLength">
      <summary>
            Gets or sets the length of colored pencil stroke.
            </summary>
      <value>Value that indicates the length of the colored pencil stroke, in pixels. Default value is 15.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.PaperRoughness">
      <summary>Gets or sets a percentage which represents the paper surface roughness.</summary>
      <value>Percentage of paper surface roughness, expressed in tenths of a percent. Valid values are 0 to 1000. Default value is 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.Angle">
      <summary>
            Gets or sets the direction of coloring motion.
            </summary>
      <value>Value that represents the direction of the coloring motion, in hundredths of a degree (+/-) This value can be a number from -18000 to 18000. This parameter is ignored when <see cref="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.Flags" /> = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">ColoredPencilExtendedCommandFlags.Artistic</see>. Default value is -45.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand.Flags">
      <summary>
            Gets or sets the type of coloring method.
            </summary>
      <value>Flags that determine which the type of direction to use and whether to combine the resulted bitmap with the original one or not. For valid values, refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags" />. Default value is <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">ColoredPencilExtendedCommandFlags.Artistic</see> | <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommandFlags">ColoredPencilExtendedCommandFlags.CombineOriginal</see>.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags">
      <summary>
            Enumerated values that indicate the values used to fill the cells, the shape of the cells,
            and what type of data is in the CellWidth and CellHeight properties of 
            PixelateCommand class or the cellWidth and cellHeight parameters of the Constructor of the PixelateCommand class .
            </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Cell Values</td><td>Maximum, Minimum, Average</td></tr><tr><td>Cell Shapes</td><td>Rectangle, Radial</td></tr><tr><td>Type of cell width and cell height data used</td><td>WidthFrequency, WidthPeriod, HeightFrequency, HeightPeriod</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.Maximum">
      <summary>
            Fill the cell with its maximum pixel value.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.Minimum">
      <summary>
            Fill the cell with its minimum pixel value.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.Average">
      <summary>
            Fill the cell with its average pixel value.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.Rectangle">
      <summary>
            Divide the image into rectangular cells. If this flag used, the 
            CellWidth property of the PixelateCommand class or the cellWidth parameter of the PixelateCommand Constructor contains the cell width in
            pixels or the number of cells across the width of the image. Thr CellHeight
            property of PixelateCommand class or the celHeight parameter of the PixelateCommand Constructor contains the cell height in pixels or
            the number of cells across the height of the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.Radial">
      <summary>
            Divide the image into circular cells, centered around the center point. 
            If this flag is used, the CellWidth
            property of the PixelateCommand class (or the cellWidth parameter of the Constructor) contains the angular component of
            the cell, and the CellHeight property of the PixelateCommand class (or the cellHeight parameter of the Constructor) contains
            the radial component of the cell. Please note that the Radial flag 
            must be OR-ed with the WidthPeriod flag or the WidthFrequency flag.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.WidthFrequency">
      <summary>
            Indicates the number of cells along the width of the image if 
            rectangular cells are used. If circular cells are used, this indicates
            the number of cells present around the center of the circle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.WidthPeriod">
      <summary>
            Indicates the width, in pixels of a cell, if rectangular cells are 
            used. If circular cells are used, this indicates the number of degrees
            in each cell around the center point.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.HeightFrequency">
      <summary>
            Indicates the number of cells along the height of the image if 
            rectangular cells are used. If circular cells are used, this indicates
            the number of cells present along the radius of the circle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags.HeightPeriod">
      <summary>
            Indicates the height, in pixels of a cell, if rectangular cells are 
            used. If circular cells are used, this indicates the radial length of
            each cell along the radius.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand">
      <summary>
            Divides the image into rectangular or circular cells and then recreates 
            the image by filling those cells with the minimum, maximum, or average 
            pixel value, depending upon the effect that was selected. This command is
            available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command will divide the image into rectangular or circular cells.</description>
          </item>
          <item>
            <description>Flags indicate whether to use rectangular
            or circular cells and indicates the type of information in the other 
            properties or parameters.</description>
          </item>
          <item>
            <description>If the image is divided into circular cells by setting the
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags">PixelateCommandFlags.Radial</see> flag,
            the cells will be centered around the specified 
            center point. This center point must be defined inside the image or inside
            the region, if the image has a region. If the image has a region, the 
            effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Supportfor 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>An example of circular cell division can be seen below:
            <br />This is the original image:
            <br /><br /><img src="CircularCellOrig.jpg" /><br /><br />The image below is the result of the following settings:
            <br />command.Flags      = PixelateCommandFlags.Radial | 
            PixelateCommandFlags.WidthPeriod  |
            PixelateCommandFlags.HeightPeriod |
                                 PixelateCommandFlags.Average;
            <br />command.CellWidth  = 90;
            <br />command.CellHeight = 40;
            <br /><br />This indicates the circular cells are divided into 90 degree cell 
            divisions and each cell has a radial length of 40 pixels. Each cell 
            division is filled with the average value for that cell division.
            <br /><br /><img src="CircularCellPer.jpg" /><br /><br />The image below is the result of the following settings:
            <br /><br />command.Flags      = PixelateCommandFlags.Radial | 
            PixelateCommandFlags.WidthFrequency  | 
                                 PixelateCommandFlags.HeightFrequency | 
            PixelateCommandFlags.Average;
            <br />command.CellWidth  = 90;
            <br />command.CellHeight = 40;
            <br /><br />This indicates the circular cells are divided into 90 separate cell 
            divisions around the center point and there are 40 cell divisions along 
            the radius. Each cell division is filled with the average value for that
            cell division.
            <br /><br /><img src="CircularCellFrq.jpg" /></description>
          </item>
          <br />
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" /> on an image. by dividing it into circular cells with angle length  = 5, and radius = 10.</para>
        <code lang="VB">   Public Sub PixelateCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PixelateCommand = New PixelateCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.CellWidth = 5
      command.CellHeight = 10
      command.Opacity = 100
      command.Flags = PixelateCommandFlags.Radial Or _
         PixelateCommandFlags.WidthPeriod Or _
         PixelateCommandFlags.HeightPeriod Or _
      PixelateCommandFlags.Average
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PixelateCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PixelateCommand command   = new PixelateCommand();
         command.CenterPoint = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.CellWidth         = 5;
         command.CellHeight        = 10;
         command.Opacity           = 100;
         command.Flags             = PixelateCommandFlags.Radial |
            PixelateCommandFlags.WidthPeriod  |
            PixelateCommandFlags.HeightPeriod |
            PixelateCommandFlags.Average;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PixelateCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.#ctor">
      <summary>
            Initializes a new PixelateCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.LeadPoint,Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags)">
      <summary>
            Initializes a new PixelateCommand class object with explicit parameters.
            </summary>
      <param name="cellWidth">Value that represents the width of a rectangular cell, the 
            number of rectangular cells present across the width of the image, the
            number of cells around the center point of a circular cell, or the 
            length in degrees of each cell around the center point of a circular 
            cell, based on the flags.
            <para><table><tr><td vlign="top" hlign="center"><b>If these flags are set:	</b></td><td vlign="top" hlign="center"><b>Then, the CellWidth property (or the cellWidth parameter) contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values is:</b></td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial          | 
                    <br />PixelateCommandFlags.WidthFrequency</td><td vlign="top" hlign="center">the number of cells around the center point. That is,
                     the circle around the center point is divided into 
                     equal parts, based on the value in the CellWidth property (or the cellWidth parameter if you are using the Constructor) as shown below:
                 <br /><img src="RadCellDiv1.jpg" /></td><td vlign="top" hlign="center">1 to 360. The circle can be divided into anywhere from 1 to 360 
                 equal parts.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial       |
                 <br />PixelateCommandFlags.WidthPeriod</td><td vlign="top" hlign="center">the size, in degrees of the cells around the center point 
                 That is, the circle around the center point is
                 divided into cells based on the number of degrees set in the CellWidth property (or the cellWidth parameter if you are using the Constructor), as shown below:	
                 <br /><img src="RadCellDiv2.jpg" /></td><td vlign="top" hlign="center">1 to 360. The circle can be divided into cells of 1 degree to
                 360 degrees.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.WidthFrequency</td><td vlign="top" hlign="center">the number of cells present across the width of the image.</td><td vlign="top" hlign="center">1 to the image width, if there is no region. If there is a 
                 region, then the range of values is just the region width.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.WidthPeriod  |</td><td vlign="top" hlign="center">the width of each rectangular cell, in pixels.</td><td vlign="top" hlign="center">1 to the image width, if there is no region. If there is a 
                 region, then the range of values is just the region width.</td></tr></table></para></param>
      <param name="cellHeight">Value that represents the height of a rectangular cell, the 
            number of rectangular cells present across the height of the image, 
            the number of cells along the radius of a circular cell, or the length
            of each cell along the radius of a circular cell, based on the flags. 
            <br /><table><tr><td vlign="top" hlign="center"><b>If the following flag is set:	</b></td><td vlign="top" hlign="center"><b>Then, the CellHeight property (or the cellHeight parameter if you are using the Constructor) contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values is:</b></td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial          | 
                    <br />PixelateCommandFlags.HeightFrequency</td><td vlign="top" hlign="center">the number of cells present along the radius of the circular
                 cell.</td><td vlign="top" hlign="center">1 to the diagonal of the image, if there is no region. If there 
                 is a region, then the range of values is just the diagonal of the
                 region rectangle.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial       |
                 <br />PixelateCommandFlags.HeightPeriod</td><td vlign="top" hlign="center">the radial length of each circular cell, in pixels.</td><td vlign="top" hlign="center">1 to the diagonal of the image, if there is no region. If there 
                 is a region, then the range of values is just the diagonal of the
                 region rectangle.</td></tr><tr><td>PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.HeightFrequency</td><td>the number of cells present across the height of the image.</td><td>1 to the image height, if there is no region. If there is a 
                 region, then the range of values is just the region height.</td></tr><tr><td>PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.HeightPeriod  |</td><td>the height of each rectangular cell, in pixels.</td><td>1 to the image height, if there is no region. If there is a 
                 region, then the range of values is just the region height.</td></tr></table></param>
      <param name="opacity">Value that represents how transparent the cells are, compared 
            to the original pixels. This is a percentage. Possible values are 0 -
            100. (0 is total opacity and 100 is total transparency.)</param>
      <param name="centerPoint">Represents the center of revoLookupTableion when circular cells are 
            used. This parameter will be ignored if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags">PixelateCommandFlags.Rectangle</see> flag
            is set.</param>
      <param name="flags">Flags that indicate the values used to fill
            the cells, the shape of the cells, and what type of data is in the 
            CellWidth and CellHeight properties.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" /> on an image. by dividing it into circular cells with angle length  = 5, and radius = 10.</para>
        <code lang="VB">   Public Sub PixelateConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PixelateCommand = New PixelateCommand(5, 10, 100, New LeadPoint(CType((leadImage.Width \ 2), Integer), CType((leadImage.Height \ 2), Integer)), PixelateCommandFlags.Radial Or PixelateCommandFlags.WidthPeriod Or PixelateCommandFlags.HeightPeriod Or PixelateCommandFlags.Average)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PixelateConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PixelateCommand command = new PixelateCommand(5, 10, 100, new LeadPoint((image.Width / 2), (image.Height / 2)), PixelateCommandFlags.Radial | PixelateCommandFlags.WidthPeriod | PixelateCommandFlags.HeightPeriod | PixelateCommandFlags.Average);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PixelateCommand.PixelateConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.CellWidth">
      <summary>
            Gets or sets a value that represents the width of a rectangular cell.
            </summary>
      <value>Value that represents the width of a rectangular cell, the 
            number of rectangular cells present across the width of the image, the
            number of cells around the center point of a circular cell, or the 
            length in degrees of each cell around the center point of a circular 
            cell, based on the flags set in the Flags property.
            <br /><table><tr><td vlign="top" hlign="center"><b>If the Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then the CellWidth property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for the CellWidth property is:</b></td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial          | 
                    <br />PixelateCommandFlags.WidthFrequency</td><td vlign="top" hlign="center">the number of cells around the CenterPoint property. That is,
                     the circle around the center point is divided into 
                     equal parts based on the value of the CellWidth property, as shown below:
                 <br /><img src="RadCellDiv1.jpg" /></td><td vlign="top" hlign="center">1 to 360. The circle can be divided into anywhere from 1 to 360 
                 equal parts.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial       |
                 <br />PixelateCommandFlags.WidthPeriod</td><td vlign="top" hlign="center">the size, in degrees of the cells around the center point 
                 That is, the circle around the center point is
                 divided into cells, based on the number of degrees in the CellWidth property, as shown below:	
                 <br /><img src="RadCellDiv2.jpg" /></td><td vlign="top" hlign="center">1 to 360. The circle can be divided into cells of 1 degree to
                 360 degrees.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.WidthFrequency</td><td vlign="top" hlign="center">the number of cells present across the width of the image.</td><td vlign="top" hlign="center">1 to the image width, if there is no region. If there is a 
                 region, then the range of values is just the region width.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.WidthPeriod  |</td><td vlign="top" hlign="center">the width of each rectangular cell, in pixels.</td><td vlign="top" hlign="center">1 to the image width, if there is no region. If there is a 
                 region, then the range of values is just the region width.</td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.CellHeight">
      <summary>
            Gets or sets a value that represents the height of a rectangular cell.
            </summary>
      <value>Value that represents the height of a rectangular cell, the 
            number of rectangular cells present across the height of the image, 
            the number of cells along the radius of a circular cell, or the length
            of each cell along the radius of a circular cell, based on the flags 
            set in the Flags property.
            <br /><table><tr><td vlign="top" hlign="center"><b>If the Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, the CellHeight property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for the CellHeight property is:</b></td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial          | 
                    <br />PixelateCommandFlags.HeightFrequency</td><td vlign="top" hlign="center">the number of cells present along the radius of the circular
                 cell.</td><td vlign="top" hlign="center">1 to the diagonal of the image, if there is no region. If there 
                 is a region, then the range of values is just the diagonal of the
                 region rectangle.</td></tr><tr><td vlign="top" hlign="center">PixelateCommandFlags.Radial       |
                 <br />PixelateCommandFlags.HeightPeriod</td><td vlign="top" hlign="center">the radial length of each circular cell, in pixels.</td><td vlign="top" hlign="center">1 to the diagonal of the image, if there is no region. If there 
                 is a region, then the range of values is just the diagonal of the
                 region rectangle.</td></tr><tr><td>PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.HeightFrequency</td><td>the number of cells present across the height of the image.</td><td>1 to the image height, if there is no region. If there is a 
                 region, then the range of values is just the region height.</td></tr><tr><td>PixelateCommandFlags.Rectangle       |
                 <br />PixelateCommandFlags.HeightPeriod  |</td><td>the height of each rectangular cell, in pixels.</td><td>1 to the image height, if there is no region. If there is a 
                 region, then the range of values is just the region height.</td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.Opacity">
      <summary>
            Gets ors sets a value that represents how transparent the cells are, compared to the 
            original pixels. This is a percentage.
            </summary>
      <value>Value that represents how transparent the cells are, compared 
            to the original pixels. This is a percentage. Possible values are 0 -
            100. (0 is total transparency and 100 is total opacity.)</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the center of revoLookupTableion when circular cells are used.
            </summary>
      <value>Point structure that contains the center of revoLookupTableion when circular cells are 
            used. This property will be ignored if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommandFlags">PixelateCommandFlags.Rectangle</see> flag
            is set in Flags property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand.Flags">
      <summary>
            Flag that indicates the values used to fill the cells, the shape
            of the cells, and what type of data is in the CellWidth and CellHeight
            properties.
            </summary>
      <value>Flag that indicates the values used to fill the cells, 
            the shape of the cells, and what type of data is in the CellWidth and
            CellHeight properties.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags">
      <summary>
        <para>Flags that indicate how to handle exposed areas, the type of information in the WaveLength property of the WaveCommand class, or the waveLength parameter of the appropriate WaveCommand Constructor, and the wave type.</para>
      </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Exposed Areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>WaveLength Data Type</td><td>Period, Frequency</td></tr><tr><td>Wave Type</td><td>SinWav, CosWave, SquareWav, TriangleWav</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.Color">
      <summary>
            Fill any exposed areas with <see cref="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.FillColor" />.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.Period">
      <summary>
            The value of the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.WaveLength" /> property of the WaveCommand Class, or the waveLength parameter of the appropriate WaveCommand Constructor, is a wave length given as a percent of the image dimensions. If this flag is used, the valid range is from 0 to 100.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.Frequency">
      <summary>
            The value in <see cref="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.WaveLength" /> property of the WaveCommand Class, or the waveLength parameter of the appropriate WaveCommand Constructor, is the frequency, or the number of times the wave repeats.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.SinWave">
      <summary>
            The wave is a sinusoidal wave.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.CosWave">
      <summary>
            The wave is a sinusoidal wave shifted by 90 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.SquareWave">
      <summary>
            The wave is a square wave.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags.TriangleWave">
      <summary>
            The wave is a triangular wave.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand">
      <summary>
            Distorts the image with two perpendicular waves at the specified angle and with the specified wave type. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command applies two perpendicular waves. The horizontal factor and vertical factor values control the size of these waves. </description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub WaveCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As WaveCommand = New WaveCommand
      command.Amplitude = 20
      command.Angle = 0
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = WaveCommandFlags.Repeat Or WaveCommandFlags.Period Or WaveCommandFlags.SinWave
      command.HorizontalFactor = 100
      command.VerticalFactor = 100
      command.WaveLength = 25
      'apply sinusoidal waves on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void WaveCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         WaveCommand command = new WaveCommand();
         command.Amplitude = 20;
         command.Angle = 0;
         command.FillColor = new RasterColor(0, 0, 0);
         command.Flags = WaveCommandFlags.Repeat | WaveCommandFlags.Period | WaveCommandFlags.SinWave;
         command.HorizontalFactor = 100;
         command.VerticalFactor = 100;
         command.WaveLength = 25;
         //apply sinusoidal waves on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.WaveCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.#ctor">
      <summary>
            Initializes a new WaveCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags)">
      <summary>
            Initializes a new WaveCommand class object with explicit parameters.
            </summary>
      <param name="amplitude">Wave's magnitude. This parameter only accepts positive values.</param>
      <param name="waveLength">Value that represents the wave length, if the<see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags" />.Period flag is set. 
            Possible values range from 1 - 100 and give the wavelength as a percentage of the image dimensions. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags" />.Frequency flag is set, this value is the number of repeated waves.</param>
      <param name="angle">Wave's rotation angle in hundredths of degrees. The valid range is from  -18000 to 18000 (The value in degrees is angle divided by 100).</param>
      <param name="horizontalFactor">Size of the horizontal wave, given as a percentage. The valid range is from 0 to 100.</param>
      <param name="verticalFactor">Size of the vertical wave, given as a percentage. The valid range is from 0 to 100.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas. </param>
      <param name="flags">Flags that indicate how to handle exposed areas, the type of information in the waveLength parameter and the wave type.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" /> on an image.</para>
        <code lang="VB">   Public Sub WaveConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As WaveCommand = New WaveCommand(20, 25, 0, 100, 100, New RasterColor(0, 0, 0), WaveCommandFlags.Repeat Or WaveCommandFlags.Period Or WaveCommandFlags.SinWave)
      ' apply sinusoidal waves on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void WaveConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         WaveCommand command = new WaveCommand(20, 25, 0, 100, 100, new RasterColor(0, 0, 0), WaveCommandFlags.Repeat | WaveCommandFlags.Period | WaveCommandFlags.SinWave);
         // apply sinusoidal waves on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.WaveCommand.WaveConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.Amplitude">
      <summary>
            Gets or sets the wave's magnitude.
            </summary>
      <value>Wave's magnitude. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.WaveLength">
      <summary>
            Gets or sets a value that represents the wave length.
            </summary>
      <value>Value that represents the wave length, if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags" />.Period flag is set in the Flags property. Possible values range from 1 - 100 and give the wavelength as a percentage of the image dimensions. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommandFlags" />.Frequency flag is set in the Flags property, this value is the number of repeated waves.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.Angle">
      <summary>
            Gets or sets the wave's rotation angle in hundredths of degrees.
            </summary>
      <value>Wave's rotation angle in hundredths of degrees. The valid range is from  -18000 to 18000 (The value in degrees is nAngle divided by 100).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.HorizontalFactor">
      <summary>
            Gets or sets the size of the horizontal wave.
            </summary>
      <value>Size of the horizontal wave, given as a percentage. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.VerticalFactor">
      <summary>
            Gets or sets the size of the vertical wave.
            </summary>
      <value>Size of the vertical wave, given as a percentage. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.WaveCommand.Flags">
      <summary>
            Gets or sets flags that indicate how to handle exposed areas, the type of information in the WaveLength property and the wave type.
            </summary>
      <value>Value that indicates how to handle exposed areas, the type of information in the WaveLength property and the wave type. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand">
      <summary>
            Automatically increases image size while preserving important features. It can also preserve certain objects chosen by the user without affecting the natural look of the image.
            </summary>
      <keywords>Resize</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>Upscaling using a mask is performed only on the width dimension. To upscale using a mask on the height dimension, rotate the image, upscale it on the width dimension and rotate back to the original orientation.</description>
          </item>
          <item>
            <description>There are no upscaling steps when a mask is used.</description>
          </item>
          <item>
            <description>The removal area in upscaling sets an area as unimportant, allowing a particular area to be stretched.</description>
          </item>
          <item>
            <description>The color of an area to be removed must be different than the colors in the image. </description>
          </item>
          <item>
            <description>The color of an area to be preserved must be different than the colors in the image and different from the removal area color.</description>
          </item>
          <item>
            <description>If multiple removal objects exist, then all of them have to be the same color. This also applies to the color of an area to be preserved.</description>
          </item>
          <item>
            <description>If MaskImage has a preserve area and no remove area, then the newWidth must be specified.</description>
          </item>
          <item>
            <description>Draw the mask over the area to be removed a little larger than the area to be removed. This does not always hold true but is a good practice to follow. </description>
          </item>
          <item>
            <description>Make the mask wide enough in order to force upscaling to remain in the remove area. This does not always hold true but is a good practice to follow.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub IntelligentUpScaleCommandExample()

      ' Load an image
      RasterCodecs.Startup()
      Dim Codecs As RasterCodecs = New RasterCodecs()
      Codecs.ThrowExceptionsOnInvalidImages = True

      Dim image As RasterImage = Codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path &amp; "Sample3.jpg")

      Dim Command As IntelligentUpScaleCommand = New IntelligentUpScaleCommand()
      Command.UpScalingOrder = 1
      Command.NewWidth = image.Width + 100
      Command.NewHeight = image.Height
      Command.UsePreserveObjectColor = False
      Command.UseRemoveObjectColor = False

      ' Apply the intelligent UpScale on the image.
      Command.Run(image)
      Codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path &amp; "IntelligentUpScaleResult.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void IntelligentUpScaleCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Sample3.jpg");

         IntelligentUpScaleCommand command = new IntelligentUpScaleCommand();
         command.UpScalingOrder = 1;
         command.NewWidth = image.Width + 100;
         command.NewHeight = image.Height;
         command.UsePreserveObjectColor = false;
         command.UseRemoveObjectColor = false;

         // Apply the intelligent UpScale on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "IntelligentUpScaleResult.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.IntelligentUpScaleCommand-->
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" /> class object with default parameters.
            </summary>
      <example>
        <para />
        <code lang="VB">      Public Sub IntelligentUpScaleCommandExample()

      ' Load an image
      RasterCodecs.Startup()
      Dim Codecs As RasterCodecs = New RasterCodecs()
      Codecs.ThrowExceptionsOnInvalidImages = True

      Dim image As RasterImage = Codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path &amp; "Sample3.jpg")

      Dim Command As IntelligentUpScaleCommand = New IntelligentUpScaleCommand()
      Command.UpScalingOrder = 1
      Command.NewWidth = image.Width + 100
      Command.NewHeight = image.Height
      Command.UsePreserveObjectColor = False
      Command.UseRemoveObjectColor = False

      ' Apply the intelligent UpScale on the image.
      Command.Run(image)
      Codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path &amp; "IntelligentUpScaleResult.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void IntelligentUpScaleCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Sample3.jpg");

         IntelligentUpScaleCommand command = new IntelligentUpScaleCommand();
         command.UpScalingOrder = 1;
         command.NewWidth = image.Width + 100;
         command.NewHeight = image.Height;
         command.UsePreserveObjectColor = false;
         command.UseRemoveObjectColor = false;

         // Apply the intelligent UpScale on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "IntelligentUpScaleResult.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.IntelligentUpScaleCommand-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.#ctor(Leadtools.RasterImage,Leadtools.RasterColor,Leadtools.RasterColor,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" /> class object with explicit parameters.
            </summary>
      <param name="maskImage">RasterImage object that references mask image.</param>
      <param name="removeObjectColor">RasterColor value that specifies color of the area in the mask image to be removed. It has to be different than the other image colors. If no remove color exists, then pass null.</param>
      <param name="preserveObjectColor">RasterColor value that specifies color of the area in the mask image to be removed. It has to be different than the other image colors. If no remove color exists, then pass null.</param>
      <param name="useRemoveObjectColor">True to use the removeObjectColor parameter otherwise it is false.</param>
      <param name="usePreserveObjectColor">true to use the removeObjectColor parameter otherwise it is false.</param>
      <param name="newWidth"> New width. Range from 1 to width of the image less 1.</param>
      <param name="widthUpScalingFactor">Number of the upscaling process stages for the new width to be achieved.</param>
      <param name="newHeight">New height. Range from 1 to height of the image less 1.</param>
      <param name="heightUpScalingFactor">Number of the upscaling process stages for the new height to be achieved.</param>
      <param name="upScalingOrder">Flag that determines whether processing will start with the width first and then the height or vice versa. Pass 0 to start with the height or pass 1 to start with the width.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>String that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.MaskImage">
      <summary>
            Gets or sets the RasterImage object that references the mask image. 
            </summary>
      <noremarks />
      <value>RasterImage object that references the mask image. If NULL is passed, then there is no mask image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <remarks>
            The mask image is the same as original image but with colors on certain areas that need to be preserved.
            </remarks>
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.RemoveObjectColor">
      <summary>
            Gets or sets a value that represents the color of the remove color area. 
            </summary>
      <value>RasterColor value that specifies color of the area in the mask image. If no remove color exists, then pass null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <remarks>
            Reserves the color for exclusive use.  In order for a color to be removed it has to be different from the other image colors.
            </remarks>
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.PreserveObjectColor">
      <summary>
            Gets or sets a value that represents the color of the preserve color area in order. 
            </summary>
      <value>RasterColor value that specifies color of the area in the mask image in order to be removed and it has to be different than the rest of the image colors. If no remove color exist, then pass null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <remarks>
            Reserves the color for exclusive use.
            </remarks>
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.UseRemoveObjectColor">
      <summary>
            Gets or sets the value that indicates whether to use the remove object color.
            </summary>
      <value>True to use the remove object color specified in RemoveObjectColor property, otherwise it is false.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.UsePreserveObjectColor">
      <summary>
            Gets or sets the value that indicates whether to use the preserve object color.
            </summary>
      <value>true to use the preserve object color specified in PreserveObjectColor property, otherwise it is false.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.NewWidth">
      <summary>
            Gets or sets the new Width.
            </summary>
      <value>Value that represents the new width. Possible values range from 1 to the width of the image less 1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.WidthUpScalingFactor">
      <summary>
            Gets or sets the number of up scaling process stages for the new width to be achieved.
            </summary>
      <value>The number of the scaling process stages for the new width to be achieved. The recommended range is from 1 to 20. If MaskImage is used, then 1 should be passed.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.NewHeight">
      <summary>
            Gets or sets the new Height.
            </summary>
      <value>Value that represents the new height. Possible values range from 1 to the height of the image less 1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.HeightUpScalingFactor">
      <summary>
            Gets or sets the number of the up scaling process stages for the new height to be achieved.
            </summary>
      <value>The number of up scaling process stages for the new height to be achieved. The recommended range is from 1 to 20. If MaskImage is used, then 1 should be passed.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand.UpScalingOrder">
      <summary>
            Gets or sets the value that determine whether the processing will start with the width first then the height or vice versa.
            </summary>
      <value>Value that determines whether the processing will start with the width first and then the height or vice versa. Pass 0 to start with the height, pass 1 to start with the width.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.IntelligentUpScaleCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand">
      <summary>
            Blurs the image by rotating the pixels around the center point.
            This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The command will blur the image in a radial form 
            around the center point. The center point must be 
            defined inside the image or inside the region, if the image has a region.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied
            on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Supportfor 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RadialBlurCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RadialBlurCommand = New RadialBlurCommand
      ' Radial blur
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Dimension = 50
      command.Stress = 10
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RadialBlurCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RadialBlurCommand command = new RadialBlurCommand();
         // Radial blur.
         command.CenterPoint = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Dimension         = 50;
         command.Stress            = 10;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RadialBlurCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand.#ctor">
      <summary>
            Initializes a new RadialBlurCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand.#ctor(System.Int32,System.Int32,Leadtools.LeadPoint)">
      <summary>
            Initializes a new RadialBlurCommand class object with explicit parameters.
            </summary>
      <param name="dimension">An integer that represents the size of the neighborhood used 
            in blurring. Increasing this value will increase the amount of blurring.
            Valid values are range in between 1 and 100.</param>
      <param name="stress">An integer that represents the amount of the blur intensity. 
            Valid values are range in between 1 and 100.</param>
      <param name="centerPoint">The point around which the pixels are rotated.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RadialBlurConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RadialBlurCommand = New RadialBlurCommand(50, 10, New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)))
      ' Radial blur
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RadialBlurConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RadialBlurCommand command = new RadialBlurCommand(50, 10, new LeadPoint((image.Width / 2), (image.Height / 2)));
         // Radial blur.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RadialBlurCommand.RadialBlurConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand.Dimension">
      <summary>
            Gets or sets an integer that represents the size of the neighborhood used in 
            blurring. Increasing this value will increase the amount of blurring.
            </summary>
      <value>An integer that represents the size of the neighborhood used 
            in blurring. Increasing this value will increase the amount of 
            blurring. Valid values are range in between 1 and 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand.Stress">
      <summary>
            Gets or sets an integer that represents the amount of the blur intensity.
            </summary>
      <value>An integer that represents the amount of the blur intensity. 
            Valid values are range in between 1 and 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains the point around which the pixels are rotated.
            </summary>
      <value>The point around which the pixels are rotated.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommandFlags">
      <summary>
            Enumeration that indicates how to handle exposed areas, both centrally and peripherally.
            </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Peripherally Exposed Areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>Centrally Exposed Areas</td><td>Rotate, WithoutRotate</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PunchCommandFlags.Color">
      <summary>
            Fill any exposed areas with the color stored in the FillColor property
            of the PunchCommand class (or the fillColor parameter of the appropriate Constructor).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PunchCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PunchCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PunchCommandFlags.Rotate">
      <summary>
            Rotate the image inside the pinch pattern.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PunchCommandFlags.WithoutRotate">
      <summary>
            Fill the exposed center the same way the peripherally exposed areas 
            are filled.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand">
      <summary>
            Warps the image by pinching it toward the center or expanding the image 
            away from its center. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and 
            above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command will punch or pinch the image around the 
            center point. The center point must be defined inside 
            the image or inside the region, if the image has a region.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied 
            on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images.
            Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the
            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PunchCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PunchCommand = New PunchCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Value = 100
      command.Stress = 100
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = PunchCommandFlags.Repeat Or PunchCommandFlags.WithoutRotate
      ' punch the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PunchCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PunchCommand command = new PunchCommand();
         command.CenterPoint = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Value       = 100;
         command.Stress      = 100;
         command.FillColor   = new RasterColor(0,0,0);
         command.Flags       = PunchCommandFlags.Repeat | PunchCommandFlags.WithoutRotate;
         // punch the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PunchCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.#ctor">
      <summary>
            Initializes a new PunchCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.#ctor(System.Int32,System.Int32,Leadtools.LeadPoint,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.PunchCommandFlags)">
      <summary>
            Initializes a new PunchCommand class object with explicit parameters.
            </summary>
      <param name="value">Amount of stretching where :
            <br />Positive values: pinch the image toward its center.
            <br />Negative values: expand the image away from its center. 
            <br />Valid values range from -500 to 500.</param>
      <param name="stress">Amount of punching intensity. This value is ignored when the value 
            parameter is less than 0. Valid values range from 0 to 1000.</param>
      <param name="centerPoint">The point around which the image will be pinched or punched.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle exposed 
            areas, both centrally and peripherally.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PunchConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PunchCommand = New PunchCommand(100, 100, New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), New RasterColor(0, 0, 0), PunchCommandFlags.Repeat Or PunchCommandFlags.WithoutRotate)
      ' punch the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PunchConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PunchCommand command = new PunchCommand(100, 100, new LeadPoint((image.Width / 2), (image.Height / 2)), new RasterColor(0, 0, 0), PunchCommandFlags.Repeat | PunchCommandFlags.WithoutRotate);
         // punch the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PunchCommand.PunchConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.Value">
      <summary>
            Gets or sets the amount of stretching.
            </summary>
      <value>Amount of stretching where :
            <br />Positive values: pinch the image toward its center.
            <br />Negative values: expand the image away from its center. 
            <br />Valid values range from -500 to 500.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.Stress">
      <summary>
            Gets or sets the amount of punching intensity.
            </summary>
      <value>Amount of punching intensity. This value is ignored when the Value 
            property is less than 0. Valid values range from 0 to 1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.CenterPoint">
      <summary>
            Point structure that contains the point around which the image will be pinched or punched.
            </summary>
      <value>The point around which the image will be pinched or punched.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PunchCommand.Flags">
      <summary>
            Gets or sets a flags that indicate how to handle exposed areas, both centrally
            and peripherally.
            </summary>
      <value>Value that indicates how to handle exposed areas, both 
            centrally and peripherally.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand">
      <summary>
             Makes the image look like it was painted by an impressionist painter. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
             </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ImpressionistCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ImpressionistCommand = New ImpressionistCommand
      command.HorizontalDimension = 10
      command.VerticalDimension = 10
      ' Apply impressionist effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ImpressionistCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ImpressionistCommand command = new ImpressionistCommand();
         command.HorizontalDimension = 10;
         command.VerticalDimension = 10;
         // Apply impressionist effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ImpressionistCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand.#ctor">
      <summary>
            Initializes a new ImpressionistCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new ImpressionistCommand class object with explicit parameters.
            </summary>
      <param name="horizontalDimension">Horizontal effect size, in pixels. This parameter only accepts positive values.</param>
      <param name="verticalDimension">Vertical effect size, in pixels. This parameter only accepts positive values.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ImpressionistConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ImpressionistCommand = New ImpressionistCommand(10, 10)
      ' Apply impressionist effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ImpressionistConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ImpressionistCommand command = new ImpressionistCommand(10, 10);
         // Apply impressionist effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ImpressionistCommand.ImpressionistConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand.HorizontalDimension">
      <summary>
            Gets or sets the horizontal effect size, in pixels.
            </summary>
      <value>Horizontal effect size, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand.VerticalDimension">
      <summary>
            Gets or sets the vertical effect size, in pixels.
            </summary>
      <value>Vertical effect size, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType">
      <summary>
            Flags that indicate how to apply the effect, and which layout pattern to use for the noise.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how to apply the effect</td><td>PF_Pure, PF_Combine, PF_Difference</td></tr><tr><td>Flags that indicate which layout pattern to use for the noise</td><td>PF_Circle, PF_Line, PF_Random</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType.PF_Pure">
      <summary>
             Produce noise as a new image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType.PF_Combine">
      <summary>
             Combine the noise and the image pixels using the Opacity value.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType.PF_Difference">
      <summary>
             Apply the difference between the noise and the image pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType.PF_Circle">
      <summary>
             Lay out the noise in concentric circles. Set the center for the circle using xCircle and yCircle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType.PF_Line">
      <summary>
             Lay out the noise in lines at a 45 degree angle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType.PF_Random">
      <summary>
             Lay out the noise randomly.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand">
      <summary>
            Uses a pseudo-random number generator in order to create a Perlin noise, and then procedurally transforms that noise 
            into a texture. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method uses a pseudo-random number generator in order to create a Perlin noise, and then 
            procedurally transforms that noise into a texture. Depending on the flags that are set, the texture can be saved as 
            an image by itself, or the texture can be combined with another image.</description>
          </item>
          <item>
            <description>This method is similar to the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> 
            in that they both use Perlin equations to generate 
            pseudo-random noise, but each method applies different equations to the noise to produce the texture.</description>
          </item>
          <item>
            <description>Use the <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" /> in order to add random noise to an image.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48 and 64 bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.UsingTheLeadtoolsImageProcessingSpecialEffectsPerlinCommandcommand">Using The PerlinCommand</see> command.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> on an image and applies the Perlin filter.</para>
        <code lang="VB">   Public Sub PerlinCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PerlinCommand = New PerlinCommand
      Dim backColor As New RasterColor(0, 0, 0)
      Dim perlinColor As New RasterColor(0, 255, 0)

      command.Seed = 0
      command.Frequency = 16
      command.Iteration = 8
      command.Opacity = 75
      command.Backcolor = backColor
      command.PerlinColor = perlinColor
      command.XCircle = CInt(leadImage.Width / 2)
      command.YCircle = CInt(leadImage.Height / 2)
      command.FreqLayout = 50
      command.DenLayout = 1
      command.PerlinFlags = NoiseLayoutType.PF_Combine Or NoiseLayoutType.PF_Circle
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PerlinCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PerlinCommand command = new PerlinCommand () ;
         RasterColor backColor   = new RasterColor (0, 0, 0);
         RasterColor perlinColor = new RasterColor (255, 0, 0);
         command.Seed = 0;
         command.Frequency = 16;
         command.Iteration = 8;
         command.Opacity = 75;
         command.Backcolor = backColor;
         command.PerlinColor = perlinColor;
         command.XCircle= image.Width / 2;
         command.YCircle = image.Height / 2;
         command.FreqLayout = 50;
         command.DenLayout = 1;
         command.PerlinFlags = NoiseLayoutType.PF_Difference | NoiseLayoutType.PF_Circle;
         command.Run (image);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PerlinCommand-->
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.NoiseLayoutType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> class object with explicit parameters.
            </summary>
      <param name="seed">Value that represents the initial seeding value for the pseudo-randomization process. Use 0 for 
            automatic seeding. If other parameters are kept the same, each seed value always produces the same effect. Each 
            seed value produces an effect different from all of the other seed values. Possible values are 0 or greater.</param>
      <param name="frequency">Value that represents the frequency component for both the x and y axis. Possible values 
            range from 0 to 16. No noise is created if the value is 0. Increasing this value increases the noise.</param>
      <param name="iteration">Value that represents the number of iterations that will be calculated. Possible values 
            range from 0 to 8. No noise is created if the value is 0. Increasing this value increases the detail in the noise, as well as computation time.</param>
      <param name="opacity">Value that represents the percentage to be used when combining the original image with the noise. 
            Possible values range from 0 through 100. A value of 0 indicates that no noise is being used and a value of 100 represents a mix of noise and image.</param>
      <param name="backColor">The RasterColor value that represents the background color.</param>
      <param name="perlinColor">The RasterColor value that represents the Perlin noise color.</param>
      <param name="xCircle">The x coordinate, in pixels and in image coordinates, for the center point of the concentric circles. 
            Possible values range from 0 to the height of the image. This parameter is only used if the PF_Circle flag is set.</param>
      <param name="yCircle">The y coordinate, in pixels and in image coordinates, for the center point of the concentric circles. 
            Possible values range from 0 to the height of the image. This parameter is only used if the PF_Circle flag is set.</param>
      <param name="freqLayout">Value used to control the frequency of the circles or lines to be created for the noise image.
            Valid values range from 0 to 100. Increase this value to increase the number of circles or lines drawn.</param>
      <param name="denLayout">Value that represents the density of the layout for the produced noise. Possible values 
            range from 0 through 100. When using a low denLayout value, the noise will appear with light color.</param>
      <param name="perlinFlags">Flags that indicate how to apply the effect, and which layout pattern to use for the noise.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> on an image and applies the Perlin filter.</para>
        <code lang="VB">   Public Sub PerlinConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim backColor As New RasterColor(0, 0, 0)
      Dim perlinColor As New RasterColor(0, 255, 0)
      Dim command As New PerlinCommand(0, 16, 8, 75, backColor, perlinColor, CInt(leadImage.Width / 2), CInt(leadImage.Height / 2), 50, 1, NoiseLayoutType.PF_Combine Or NoiseLayoutType.PF_Circle)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PerlinConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor backColor   = new RasterColor (0, 0, 0);
         RasterColor perlinColor = new RasterColor (0, 255, 0);
         PerlinCommand command = new PerlinCommand(0, 16, 8, 75, backColor, perlinColor, image.Width / 2, image.Height / 2, 50, 1, NoiseLayoutType.PF_Combine | NoiseLayoutType.PF_Circle);

         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PerlinCommand.PerlinConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.Seed">
      <summary>
            Gets or sets the value that represents the initial seeding value for the pseudo-randomization process. Use 0 for automatic seeding.
            </summary>
      <value>Value that represents the initial seeding value for the pseudo-randomization process on which the filter is applied. Use 0 for automatic seeding. 
            If other parameters are kept the same, each seed value always produces the same effect. Each seed value produces 
            an effect different from all of the other seed values. Possible values are 0 or greater.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.Frequency">
      <summary>
            Gets or sets the value that indicates the frequency component for both the x and y axis.
            </summary>
      <value>Value that indicates the frequency component for both the x and y axis. Possible values range from 0 to 16. 
            No noise is created if the value is 0. Increasing this value increases the noise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.Iteration">
      <summary>
            Gets or sets the value that indicates the number of iterations that will be calculated.
            </summary>
      <value>Value that indicates the number of iterations that will be calculated. Possible values range from 0 to 8. 
            No noise is created if the value is 0. Increasing this value increases the detail in the noise, as well as computation time.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.Opacity">
      <summary>
            Gets or sets the value that indicates the percentage to be used when combining the original image with the noise.
            </summary>
      <value>Value that indicates the percentage to be used when combining the original image with the noise. 
            Possible values range from 0 through 100. This parameter is used if the PF_Combine or PF_Difference flag is set. 
            A value of 0 indicates that no noise is being used and a value of 100 represents a mix of noise and image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.Backcolor">
      <summary>
            Gets or sets the background color.
            </summary>
      <value>The background color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.PerlinColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
      <value>The foreground color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.XCircle">
      <summary>
            Gets or sets the value that indicates the x coordinate, in pixels and in image coordinates, for the center point of 
            the concentric circles.
            </summary>
      <value>Value that indicates the x coordinate, in pixels and in image coordinates, for the center point of the concentric circles. 
            Possible values range from 0 to the width of the image. This parameter is only used if the PF_Circle flag is set.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.YCircle">
      <summary>
            Gets or sets the value that indicates the y coordinate, in pixels and in image coordinates, for the center point of the concentric circles.
            </summary>
      <value>Value that indicates the y coordinate, in pixels and in image coordinates, for the center point of the concentric circles. 
            Possible values range from 0 to the height of the image. This parameter is only used if the PF_Circle flag is set.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.FreqLayout">
      <summary>
            Gets or sets the value used to control the frequency of the circles or lines to be created for the noise image.
            </summary>
      <value>Value that indicates the frequency of the circles or lines to be created for the noise image. This parameter 
            is used if the PF_Circle or PF_Line flag is set. Possible values range from 0 through 100. Increase this value to 
            increase the number of circles or lines drawn.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.DenLayout">
      <summary>
            Gets or sets the value that represents the density of the layout for the produced noise.
            </summary>
      <value>Value that represents the density of the layout for the produced noise. Possible values range from 0 through 100. 
            When using a low DenLayout value the noise will appear with light color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand.PerlinFlags">
      <summary>
            Gets or sets flags that indicate how to apply the effect, and which layout pattern to use for the noise. 
            </summary>
      <value>Flags that indicate how to apply the effect, and which layout pattern to use for the noise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PerlinCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">
      <summary>
            This enumeration contains all flags that are needed by the MosaicTilesCommand.
            It indicates whether to use arc-shaped or rectangular-shaped tiles, and what type of shadowing to use, if any.
            </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Drawing Shape</td><td>Cartesian, Polar</td></tr><tr><td>Shadow</td><td>Flat, Gray, Colored</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags.Cartesian">
      <summary>
            Draws rectangular tiles using Cartesian coordinates. If this flag is used, the TileWidth property
            will contain the tile width in pixels, and the TileHeight property will 
            contain the tile height in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags.Polar">
      <summary>
            Draw arc-shaped tiles using polar coordinates. If this flag is used, the TileWidth property 
            will contain the angular component of the tile, in degrees, and the TileHeight property 
            will contain the radial component of the tile in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags.ShadowFlat">
      <summary>
            Do not apply a shadow.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags.ShadowRGB">
      <summary>
            Apply colored shadows.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags.ShadowGray">
      <summary>
            Apply grayscale shadows.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand">
      <summary>
            Creates a mosaic effect on an image by dividing an image into rectangular or 
            arc-shaped cells with irregular boundaries and modifying the color of each 
            cell. This method is 
            available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method makes an image look like a mosaic made from 
            tiles. Tiles can be rectangular or arc-shaped, depending upon the coordinate 
            system used to draw the tiles. The method's many parameters control factors 
            like the border color, tile color, pen width, tile width and height, etc.</description>
          </item>
          <item>
            <description>This method can process the whole image or a region 
            of the image. If the image has a region, the effect is applied only to 
            the region.</description>
          </item>
          <item>
            <description>This method supports for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> on an image.</para>
        <code lang="VB">   Public Sub MosaicTilesCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MosaicTilesCommand = New MosaicTilesCommand
      command.BorderColor = New RasterColor(0, 0, 0)
      command.TilesColor = New RasterColor(255, 255, 255)
      command.TileWidth = 50
      command.TileHeight = 50
      command.Opacity = 50
      command.ShadowThreshold = 50
      command.ShadowAngle = ShadowCommandAngle.East
      command.PenWidth = 7
      command.Flags = MosaicTilesCommandFlags.Cartesian Or _
                                  MosaicTilesCommandFlags.ShadowGray
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MosaicTilesCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MosaicTilesCommand command = new MosaicTilesCommand();
         command.BorderColor     = new RasterColor(0,0,0);
         command.TilesColor      = new RasterColor(255,255,255);
         command.TileWidth       = 50;
         command.TileHeight      = 50;
         command.Opacity         = 50;
         command.ShadowThreshold = 50;
         command.ShadowAngle     = ShadowCommandAngle.East;
         command.PenWidth        = 7;
         command.Flags           = MosaicTilesCommandFlags.Cartesian | 
                                   MosaicTilesCommandFlags.ShadowGray ;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.MosaicTilesCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.#ctor">
      <summary>
            Initializes a new MosaicTilesCommand with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags)">
      <summary>
            Initializes a new MosaicTilesCommand with explicit parameters.
            </summary>
      <param name="opacity">Value that represents the weight, in percent, given to the image color and
            the border or tile color when determining the resulting color. For example,
            if the Opacity property is set to 75, then 75<![CDATA[&#37;]]> of the image color will be added
            to 75<![CDATA[&#37;]]> of the border (or Tile) color. Final results are clipped if 
            greater than 255. Possible values range from 0 to 100.</param>
      <param name="penWidth">Value that indicates the width of the pen used to draw tile boundaries, in logical units. 
            Possible values range from 1 to 15. The pen uses the crBorderColor.</param>
      <param name="tileWidth">Value that represents the width of the tile. The meaning of the value in the TileWidth property 
            differs according to the flags that are set in the Flags property. 
            Possible values are:
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, TileWidth property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for TileWidth property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Cartesian</b></td><td vlign="top" hlign="center"><b>The width of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image width, if there is no region. If there is a region, then the range of values is from 1 to the region width.</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Polar</b></td><td vlign="top" hlign="center"><b>The size, in degrees, of the curve
                 in the arc-shaped tiles. That is, the circle around the Origin is 
                 divided into tiles of TileWidth degrees.</b></td><td vlign="top" hlign="center"><b>1 to 360. The circle can be divided into tiles from 1 degree to 360 degrees.</b></td></tr></table></param>
      <param name="tileHeight">
            Value that represents the height of the tile. The
            meaning of the value in the TileHeight property differs according to the flags that are set in the Flags property. Possible values are: 
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, TileHeight property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for TileHeight property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Cartesian</b></td><td vlign="top" hlign="center"><b>The height of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image height, if there is no region. If there is a region, then the range of values is from 1 to the region height.</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Polar</b></td><td vlign="top" hlign="center"><b>The radial length of each arc-shaped tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the diagonal of the image,
                 if there is no region. If there is a region, then the range of values
                 is from 1 to the diagonal of the region rectangle.</b></td></tr></table></param>
      <param name="shadowAngle">Value indicating the direction of the light source that produces the 
            shadow. This property is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowRGB</see> 
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowGray</see> flag is set.
            Valid values are found in <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle" /></param>
      <param name="shadowThreshold">Value that determines which pixels will be affected by the shadow. 
            Possible values range from 0 through 255. Pixel values less than the 
            threshold value will be unaffected. This member will be used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowRGB</see>
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowGray</see>
            flag is set.</param>
      <param name="borderColor">Value that specifies the transparency fill color for the tile border areas.</param>
      <param name="tilesColor">Value that specifies the transparency fill color for the tiles.</param>
      <param name="flags">that indicate whether to use arc-shaped or rectangular-shaped tiles, and what type of 
            shadowing to use, if any.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> on an image.</para>
        <code lang="VB">   Public Sub MosaicTilesConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MosaicTilesCommand = New MosaicTilesCommand(50, 7, 50, 50, ShadowCommandAngle.East, 50, New RasterColor(0, 0, 0), New RasterColor(255, 255, 255), MosaicTilesCommandFlags.Cartesian Or MosaicTilesCommandFlags.ShadowGray)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MosaicTilesConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MosaicTilesCommand command = new MosaicTilesCommand(50, 7, 50, 50, ShadowCommandAngle.East, 50, new RasterColor(0,0,0), new RasterColor(255,255,255), MosaicTilesCommandFlags.Cartesian | MosaicTilesCommandFlags.ShadowGray);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.MosaicTilesCommand.MosaicTilesConstructor_S1-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.#ctor(System.Int32,System.Int32,Leadtools.LeadPoint,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags)">
      <summary>
            Initializes a new MosaicTilesCommand with explicit parameters.
            </summary>
      <param name="opacity">Value that represents the weight, in percent, given to the image color and
            the border or tile color when determining the resulting color. For example,
            if Opacity property is set to 75, then 75<![CDATA[&#37;]]> of the image color will be added
            to 75<![CDATA[&#37;]]> of the border (or Tile) color. Final results are clipped if 
            greater than 255. Possible values range from 0 to 100.</param>
      <param name="penWidth">Value that indicates the width of the pen used to draw tile 
            boundaries, in logical units. Possible values range from 1 to 15. The pen
            uses the color stored in the BorderColor property.</param>
      <param name="origin">Point that represents the center of revolution when polar coordinates are
            used. This property is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.Polar</see> flag is set.</param>
      <param name="tileWidth">Value that represents the width of the tile. The meaning of the value in the TileWidth property 
            differs according to the flags that are set in the Flags property. 
            Possible values are:
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, the TileWidth property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for the TileWidth property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Cartesian</b></td><td vlign="top" hlign="center"><b>The width of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image width, if there is no region. If there is a region, then the range of values is from 1 to the region width.</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Polar</b></td><td vlign="top" hlign="center"><b>The size, in degrees, of the curve
                 in the arc-shaped tiles. That is, the circle around the Origin is 
                 divided into tiles of TileWidth degrees.</b></td><td vlign="top" hlign="center"><b>1 to 360. The circle can be divided into tiles from 1 degree to 360 degrees.</b></td></tr></table></param>
      <param name="tileHeight">
            Value that represents the height of the tile. The
            meaning of the value in the TileHeight property differs according to the flags that are set in the Flags proerty. 
            Possible values are: 
            <br /><table><tr><td vlign="top" hlign="center"><b>If the Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, the TileHeight property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for the TileHeight property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Cartesian</b></td><td vlign="top" hlign="center"><b>The height of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image height, if there is no region. If there is a region, then the range of values is from 1 to the region height.</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Polar</b></td><td vlign="top" hlign="center"><b>The radial length of each arc-shaped tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the diagonal of the image,
                 if there is no region. If there is a region, then the range of values
                 is from 1 to the diagonal of the region rectangle.</b></td></tr></table></param>
      <param name="shadowAngle">Value that indicates the direction of the light source that produces the 
            shadow. This property is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowRGB</see> 
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowGray</see> flag is set.
            Valid values are found in <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle" /></param>
      <param name="shadowThreshold">Value that determines which pixels will be affected by the shadow. 
            Possible values range from 0 through 255. Pixel values less than the 
            threshold value will be unaffected. This member will be used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowRGB</see>
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowGray</see>
            flag is set.</param>
      <param name="borderColor">Represents the transparency fill color for the tile 
            border areas.</param>
      <param name="tilesColor">Represents the transparency fill color for the tiles.</param>
      <param name="flags">Indicate whether to use arc-shaped or rectangular-shaped tiles, and what type of shadowing 
            to use, if any.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> on an image.</para>
        <code lang="VB">   Public Sub MosaicTilesConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MosaicTilesCommand = New MosaicTilesCommand(50, 7, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), 50, 50, ShadowCommandAngle.East, 50, New RasterColor(0, 0, 0), New RasterColor(255, 255, 255), MosaicTilesCommandFlags.Polar Or MosaicTilesCommandFlags.ShadowGray)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MosaicTilesConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MosaicTilesCommand command = new MosaicTilesCommand(50, 7, new LeadPoint((image.Width/2),(image.Height/2)), 50, 50, ShadowCommandAngle.East, 50, new RasterColor(0,0,0), new RasterColor(255,255,255), MosaicTilesCommandFlags.Polar | MosaicTilesCommandFlags.ShadowGray);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.MosaicTilesCommand.MosaicTilesConstructor_S2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.Opacity">
      <summary>
            Gets or sets a value that represents the weight, in percent, given to the image color and the border or tile color 
            when determining the resulting color.
            </summary>
      <value>
            Value that represents the weight, in percent, given to the image color and
            the border or tile color when determining the resulting color. For example,
            if Opacity property is set to 75, then 75<![CDATA[&#37;]]> of the image color will be added
            to 75<![CDATA[&#37;]]> of the border (or Tile) color. Final results are clipped if 
            greater than 255. Possible values range from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.PenWidth">
      <summary>
            Gets or sets a value that indicates the width of the pen used to draw tile boundaries, 
            in logical units.
            </summary>
      <value>Value that indicates the width of the pen used to draw tile 
            boundaries, in logical units. Possible values range from 1 to 15. The pen
            uses the color stored in the BorderColor property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.TileWidth">
      <summary>
            Gets or sets a value that represents the width of the tile.
            </summary>
      <value>
            Value that represents the width of the tile. The meaning of the value in the TileWidth property 
            differs according to the flags that are set in the Flags property. 
            Possible values are:
            <br /><table><tr><td vlign="top" hlign="center"><b>If the Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, the TileWidth property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for the TileWidth property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Cartesian</b></td><td vlign="top" hlign="center"><b>The width of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image width, if there is no region. If there is a region, then the range of values is from 1 to the region width.</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Polar</b></td><td vlign="top" hlign="center"><b>The size, in degrees, of the curve
                 in the arc-shaped tiles. That is, the circle around the Origin is 
                 divided into tiles of TileWidth degrees.</b></td><td vlign="top" hlign="center"><b>1 to 360. The circle can be divided into tiles from 1 degree to 360 degrees.</b></td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.TileHeight">
      <summary>
            Gets or sets a value that represents the height of the tile.
            </summary>
      <value>
            Value that represents the height of the tile. 
            The meaning of the value in the TileHeight property differs according to the flags that are set in the Flags proerty. Possible values are: 
            <br /><table><tr><td vlign="top" hlign="center"><b>If the Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, the TileHeight property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for the TileHeight property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Cartesian</b></td><td vlign="top" hlign="center"><b>The height of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image height, if there is no region. If there is a region, then the range of values is from 1 to the region height.</b></td></tr><tr><td vlign="top" hlign="center"><b>MosaicTilesCommandFlags.Polar</b></td><td vlign="top" hlign="center"><b>The radial length of each arc-shaped tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the diagonal of the image,
                 if there is no region. If there is a region, then the range of values
                 is from 1 to the diagonal of the region rectangle.</b></td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.Origin">
      <summary>
            Gets or sets the point that represents the center of revolution when polar coordinates are used.
            </summary>
      <value>
            Point that represents the center of revolution when polar coordinates are
            used. This property is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.Polar</see> flag is set.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.ShadowAngle">
      <summary>
            Gets or sets the value that indicates the direction of the light source that produces the shadow.
            </summary>
      <value>
            Value that indicates the direction of the light source that produces the 
            shadow. This property is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowRGB</see> 
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowGray</see> flag is set.
            Valid values are found in <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle" /></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.ShadowThreshold">
      <summary>
            Gets or sets the value that determines which pixels will be affected by the shadow.
            </summary>
      <value>
            Value that determines which pixels will be affected by the shadow. 
            Possible values range from 0 through 255. Pixel values less than the 
            threshold value will be unaffected. This property will be used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowRGB</see>
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags">MosaicTilesCommandFlags.ShadowGray</see>
            flag is set.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.BorderColor">
      <summary>
            Gets or sets the transparency fill color for the tile 
            border areas.
            </summary>
      <value>
            The transparency fill color for the tile 
            border areas.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.TilesColor">
      <summary>
            Gets or sets the value that represents the transparency fill color for the tiles.
            </summary>
      <value>
            The transparency fill color for the tiles.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand.Flags">
      <summary>
            Gets or sets the enumeration that contains all flags that are needed by the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" />. 
            </summary>
      <value>
            An <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommandFlags" /> enumeration value that contains all flags that are needed by the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" />. These include the values used to select the shape of the tiles and the type of shadowing to perform. 
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags">
      <summary>
            Flags that indicate the background color , shade (or gradient) type, ball type and ball color type.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Shading type</td><td>ShadingSingle, ShadingLeftRight, ShadingTopBottom, ShadingCircular, ShadingElliptical</td></tr><tr><td>Ball type</td><td>Sticker, Ball</td></tr><tr><td>Background type</td><td>BackGroundImage, BackGroundColor</td></tr><tr><td>Ball color type</td><td>BallsColorMask, BallsColorOpacity</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.None">
      <summary>
            No flags.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.ShadingSingle">
      <summary>
             Fill the background with the color specified in the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.BackGroundColor" /> property only. 
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.ShadingLeftRight">
      <summary>
            Draw shading as vertical lines that move from left to right.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.ShadingTopBottom">
      <summary>
            Draw shading as horizontal lines that move from top to bottom. 
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.ShadingCircular">
      <summary>
            Draw shading as concentric circles.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.ShadingElliptical">
      <summary>
            Draw shading as concentric ellipses.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.Sticker">
      <summary>
            Balls will overlap like stickers.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.Ball">
      <summary>
            Balls will adjust like bubbles.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.BackGroundImage">
      <summary>
            The background is the same as the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.BackGroundColor">
      <summary>
            The background is the color specified in the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.BackGroundColor" /> property.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.BallsColorMask">
      <summary>
            The ball colors will block the image colors.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags.BallsColorOpacity">
      <summary>
            Use the opacity value when combining image colors with ball colors.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand">
      <summary>
            Throws colored balls over the image. The resulting color of the ball is a combination of ball color and the color of the pixel where it has fallen with certain opacity. 
            Various parameters control the color and appearance of the balls. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>If the image has a region, this method works only on 
            the region. If the image does not have a region, this method works on the
            entire image.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColoredBallsCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As New ColoredBallsCommand
      Dim ballColors() As RasterColor
      ReDim ballColors(3)
      ballColors(0) = New RasterColor(255, 128, 64)
      ballColors(1) = New RasterColor(160, 80, 255)
      ballColors(2) = New RasterColor(64, 255, 100)
      ballColors(3) = New RasterColor(100, 255, 255)
      command.NumberOfBalls = 1000
      command.Size = 15
      command.SizeVariation = 10
      command.HighLightAngle = 4500
      command.HighLightColor = New RasterColor(255, 255, 255)
      command.BackGroundColor = New RasterColor(255, 0, 0)
      command.ShadingColor = New RasterColor(255, 255, 0)
      command.Ripple = 200
      command.BallColorOpacity = 64
      command.BallColorOpacityVariation = 25
      command.Flags = ColoredBallsCommandFlags.ShadingCircular Or _
                      ColoredBallsCommandFlags.Sticker Or _
                      ColoredBallsCommandFlags.BackGroundImage Or _
                      ColoredBallsCommandFlags.BallsColorOpacity
      command.BallColors = ballColors
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColoredBallsCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColoredBallsCommand command  = new ColoredBallsCommand();
         RasterColor [] ballColors = new RasterColor[4];
         ballColors[0] = new RasterColor(255,128,64);
         ballColors[1] = new RasterColor(160,80,255);
         ballColors[2] = new RasterColor(64,255,100);
         ballColors[3] = new RasterColor(100,255,255);
         command.NumberOfBalls = 1000;
         command.Size = 15;
         command.SizeVariation = 10;
         command.HighLightAngle = 4500;
         command.HighLightColor = new RasterColor(255, 255, 255);
         command.BackGroundColor = new RasterColor(255, 0, 0);
         command.ShadingColor = new RasterColor(255, 255, 0);
         command.Ripple = 200;
         command.BallColorOpacity = 64;
         command.BallColorOpacityVariation = 25;
         command.Flags = ColoredBallsCommandFlags.ShadingCircular |
                         ColoredBallsCommandFlags.Sticker |
                         ColoredBallsCommandFlags.BackGroundImage |
                         ColoredBallsCommandFlags.BallsColorOpacity;
         command.BallColors = ballColors;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredBallsCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,Leadtools.RasterColor[],System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> with explicit parameters.
            </summary>
      <param name="numberOfBalls">Number of balls that will be drawn in the image. Only positive values are accepted.</param>
      <param name="size">Average balls size, in pixels. Only positive values are accepted.</param>
      <param name="sizeVariation">Balls size variation. Valid values range from 0 to 100.
            Use 0 to have all balls the same size. Use 100 to have the size vary from 0 to 2 X uSize.</param>
      <param name="highLightAngle">Light source direction of the highlight color on the ball. This value is in hundredths of 
            degrees (+/-). A positive value will rotate the highlight color clockwise, while a negative value will rotate the 
            highlight color counter-clockwise. Valid values range from -36000 to + 36000.</param>
      <param name="highLightColor">Highlight color.</param>
      <param name="backGroundColor">Backgound color.</param>
      <param name="shadingColor">Shade (or gradient) color.</param>
      <param name="ripple">The number of shades that are used to produce the background. This value is divided internally 
            by 100. For example, if lRipple = 200 the actual frequency is 2. </param>
      <param name="ballColors">An array of ball colors.</param>
      <param name="ballColorOpacity">Average ball color opacity. Valid values range from: 0 to 255 for 8-bit, 
            0 to 4095 for 12-bit, 0 to 65535 for 16-bit.</param>
      <param name="ballColorOpacityVariation">Ball color opacity variation. Valid values range from 0 to 100. Use 0 to 
            have all pixels assigned the same opacity. Use 100 to have the opacity vary from 0 to 2 X ballColorOpacity.</param>
      <param name="flags">Enumeration that indicates the background color , shade (or gradient) type, ball type and ball color type.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColoredBallsConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim ballColors() As RasterColor
      ReDim ballColors(3)
      ballColors(0) = New RasterColor(255, 128, 64)
      ballColors(1) = New RasterColor(160, 80, 255)
      ballColors(2) = New RasterColor(64, 255, 100)
      ballColors(3) = New RasterColor(100, 255, 255)

      Dim command As New ColoredBallsCommand(1000, 15, 10, 4500, _
                        New RasterColor(255, 255, 255), _
                        New RasterColor(255, 0, 0), _
                        New RasterColor(255, 255, 0), _
                        200, ballColors, 64, 25, _
                        ColoredBallsCommandFlags.ShadingCircular Or _
                        ColoredBallsCommandFlags.Sticker Or _
                        ColoredBallsCommandFlags.BackGroundImage Or _
                        ColoredBallsCommandFlags.BallsColorOpacity)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColoredBallsConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor [] ballColors = new RasterColor[4];
         ballColors[0] = new RasterColor(255,128,64);
         ballColors[1] = new RasterColor(160,80,255);
         ballColors[2] = new RasterColor(64,255,100);
         ballColors[3] = new RasterColor(100,255,255);
         ColoredBallsCommand command  = new ColoredBallsCommand(1000, 15, 10, 4500, 
            new RasterColor(255, 255, 255), 
            new RasterColor(255, 0, 0), 
            new RasterColor(255, 255, 0),
            200, ballColors, 64, 25,
            ColoredBallsCommandFlags.ShadingCircular |
            ColoredBallsCommandFlags.Sticker |
            ColoredBallsCommandFlags.BackGroundImage |
            ColoredBallsCommandFlags.BallsColorOpacity);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.ColoredBallsCommand.ColoredBallsConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.NumberOfBalls">
      <summary>
            Gets or sets a value that represents the number of balls that will be drawn in the image. Only positive 
            values are accepted.
            </summary>
      <value>Value that represents the number of balls that will be drawn in the image. Only positive 
            values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.Size">
      <summary>
            Gets or sets a value that represents the average ball size. Only positive values are accepted.
            </summary>
      <value>Value represents average ball size, in pixels. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.SizeVariation">
      <summary>
            Gets or sets a value that represents the amount of ball size variation.
            </summary>
      <value>Value that represents the amount of ball size variation. Valid values range from 0 to 100. 
            Use 0 to have all balls the same size. Use 100 to have the size vary from 0 to 2 X Size.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.HighLightAngle">
      <summary>
            Gets or sets a value that represents the light source direction of the highlight color on the ball. 
            This value is in hundredths of degrees (+/-).  
            </summary>
      <value>Value that represents the ight source direction of the highlight color on the ball. 
            This value is in hundredths of degrees (+/-).
            A positive value will rotate the highlight color 
            clockwise, while a negative value will rotate the highlight color 
            counter-clockwise. Valid values range from -36000 to + 36000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.HighLightColor">
      <summary>
            Gets or sets the highlight color.
            </summary>
      <value>The highlight color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.BackGroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <value>The background color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.ShadingColor">
      <summary>
            Gets or sets the shade (or gradient) color.
            </summary>
      <value>The shade (or gradient) color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.Ripple">
      <summary>
            Gets or sets a value that represents the number of shades that are used to produce the background. 
            </summary>
      <value>Value that represents the number of shades that are used to produce the background.  Internally, it is divided by 100.
             Ror example, if Ripple = 200 the actual frequency is 2. This value is 
             ignored if <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommandFlags">ColoredBallsCommandFlags.ShadingSingle</see> is selected in Flags property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.Flags">
      <summary>
            Gets or sets the flags that indicate the background color , shade (or gradient) type, ball 
            type and ball color type.
            </summary>
      <value>Flags that indicate the background color , shade (or gradient).
            type, ball type and ball color type.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.BallColorOpacity">
      <summary>
            Gets or sets a value that represents the average ball color opacity.
            </summary>
      <value>Value represents average ball color opacity. Valid values range from  
            0 to 255 for 8-bit , 0 to 4095 for 12-bit and 0 to 65535 
            for 16-bit.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.BallColorOpacityVariation">
      <summary>
            Gets or sets a value that represents the amount of ball color opacity variation.
            </summary>
      <value>Value represents ball color opacity variation. Valid values range from 
            0 to 100. Use 0 to have all pixels assigned the same opacity. Use 100 to have the opacity vary from 0 to 2 X BallColorOpacity.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand.BallColors">
      <summary>
            Gets or sets the array of <see cref="T:Leadtools.RasterColor" /> class objects 
            that contains the ball colors used by this class object.
            </summary>
      <value>Array of <see cref="T:Leadtools.RasterColor" /> class objects 
            that contains the ball colors used by this class object.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand">
      <summary>
            Makes the colored edges shine with a neon glow. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see>o and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command detects the edge pixels by comparing the values of the pixel with surrounding pixels and if the edge value (the difference between the surrounding pixels and the 
            pixel being evaluated) is greater than the Threshold value, the pixel is an edge pixel.  
            The command then multiplies the values for the edge pixels by the brightness factor.  </description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /><br />
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GlowCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GlowCommand = New GlowCommand
      command.Dimension = 5
      command.Brightness = 3
      command.Threshold = 0
      ' Apply glow effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GlowCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GlowCommand command = new GlowCommand();
         command.Dimension  = 5;
         command.Brightness = 3;
         command.Threshold  = 0;
         // Apply glow effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.GlowCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlowCommand.#ctor">
      <summary>
            Initializes a new GlowCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlowCommand.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new GlowCommand class object with explicit parameters.
            </summary>
      <param name="dimension">Size of the neighborhood used to determine the width of the glow. This parameter only accepts positive values.</param>
      <param name="brightness">Brightness factor used to create the "glow". This can be any number that is 0 or greater. If it is 0 the image will be black.</param>
      <param name="threshold">Threshold value used to determine which pixels are edge pixels. If the difference determined for 
            a pixel is greater than this value, the pixel is an edge pixel. Valid values range from 0 through 255. Use this parameter to control the number of edge pixels found.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GlowConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GlowCommand = New GlowCommand(5, 3, 0)
      ' Apply glow effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GlowConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GlowCommand command = new GlowCommand(5, 3, 2);
         // Apply glow effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.GlowCommand.GlowConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlowCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.GlowCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.GlowCommand.Dimension">
      <summary>
            Gets or sets the size of the neighborhood used to determine the width of the glow.
            </summary>
      <value>Size of the neighborhood used to determine the width of the glow. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.GlowCommand.Brightness">
      <summary>
            Gets or sets the brightness factor used to create the "glow".
            </summary>
      <value>Brightness factor used to create the "glow". This can be any number that is 0 or greater. If it is 0 the image will be black.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.GlowCommand.Threshold">
      <summary>
            Gets or sets the threshold value used to determine which pixels are edge pixels.
            </summary>
      <value>Threshold value used to determine which pixels are edge pixels. If the difference determined for a pixel is greater than this value, the pixel is an edge pixel. Valid values range from 0 through 255. Use this property to control the number of edge pixels found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">
      <summary>
            Enumeration used to determine which function will be applied to the image, FreeHandLight,
            Free Light, or Trigonometry Light.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.None">
      <summary>
            No Flags selected.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.LinearQuadratic">
      <summary>
            If this flag is set, the light will be computed according to the distance 
            from the center, which is in the Origin property or the origin parameter in the Constructor
            of the FunctionalLightCommand class. The brightness increase for 
            every pixel is proportional to the distance to the effect's center. 
            If this flag is set, do not set Trigonometry or Freehand.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.Trigonometry">
      <summary>
            If this flag is set then the light will be generated by a sine or cosine 
            function. If this is set, the frequency, angle and origin information are used to compute the light. 
            If this flag is set, do not set LinearQuadratic or Freehand.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.Freehand">
      <summary>
             If this flag is set, the user will pass the light shape in the Buffer 
             property of the FunctionalLightCommand class or the buffer parameter of the Constructor for the FunctionalLightCommand class. If this flag is set, 
             the angle and buffer information
             will be used. The Angle property, or angle parameter, will determine the angle of the 
             light lines compared to the X axis. If this flag is set, do not set 
             LinearQuadratic or Trigonometry.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.LinearInner">
      <summary>
            The light will be concentrated at the center and will decrease 
            outwards. The center can be found in the Origin property or the origin parameter. This flag is valid only if LinearQuadratic is also set.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.LinearOuter">
      <summary>
            The light will be concentrated at the far points from the center 
            and will decrease inwards towards the center. The center can be found in the Origin property or the origin parameter. This flag is valid only if 
            LinearQuadratic is also set.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.QuadraticInner">
      <summary>
            The light will be concentrated at the center and will decrease outwards. The center can be found in the Origin property or the origin parameter.
            This flag is valid only if LinearQuadratic is also set.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.QuadraticOuter">
      <summary>
            The light will be concentrated at the far points from the 
            center and will decrease inwards towards the center. The center can be found in the Origin property or the origin parameter. This flag is valid 
            only if LinearQuadratic is also set.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.Unidirection">
      <summary>
            A sine or cosine function will generate the light as lines.
            <br />This flag is valid only if Trigonometry is also set. The lines
            are parallel and have no center. The Angle property of the FunctionalLightCommand 
            class or the angle parameter of the Constructor determines the angle formed by these lines with the X axis.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.Circles">
      <summary>
            Sine or cosine function will generate the light as circles around the 
            center. The center can be found in the Origin property, or the origin parameter of the Constructor. This flag is valid only if Trigonometry is also set.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.Addition">
      <summary>
            The amplitude values are multiplied 
            with the results of the selected function (sine, cosine, freehand). 
            The results are then added to the pixel values of the equivalent 
            channel. These functions as well as the real buffer values are from 
            -1 to 1. This flag is valid only if Trigonometry or Freehand are also 
            set.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags.Multiply">
      <summary>
            Multiply the color factor specified by the RedAmplitude property of 
            the FunctionalLightCommand class, or the redAmplitude parameter of the Constructor, with the results of the selected 
            function (sine, cosine, freehand). The results are multiplied with 
            every channel value. This flag is valid only if Trigonometry or 
            Freehand are also set.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand">
      <summary>
            Adds light to the image according to a function-based distribution. This 
            light will be generated by one of the following methods: linear, 
            quadratic, sine, cosine, or using freehand points. This method is 
            available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Controls the brightness of the image according to the 
            method selected for generating the light.</description>
          </item>
          <item>
            <description>This command supports all bits/pixel supported by 
            LEADTOOLS.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FunctionalLightCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As FunctionalLightCommand = New FunctionalLightCommand
      command.RedAmplitude = 75
      command.Flags = FunctionalLightCommandFlags.LinearQuadratic Or FunctionalLightCommandFlags.LinearOuter
      command.Origin = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      ' Apply the linear lighting effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FunctionalLightCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FunctionalLightCommand command = new FunctionalLightCommand();
         command.RedAmplitude =  75;
         command.Flags         =  FunctionalLightCommandFlags.LinearQuadratic |
            FunctionalLightCommandFlags.LinearOuter;
         command.Origin       =  new LeadPoint((image.Width/2),(image.Height/2));
         // Apply the linear lighting effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FunctionalLightCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.#ctor">
      <summary>
            Initializes a new FunctionalLightCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.#ctor(System.Int32,Leadtools.LeadPoint,Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags)">
      <summary>
            Initializes a new FunctionalLightCommand class object with explicit parameters.
            </summary>
      <param name="redAmplitude">If the image is grayscale, this parameter 
            represents the amplitude of the master channel. If the image is color
            and the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> 
            flags are set, this parameter represents the amplitude of each channel.
            If the image is color and the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> 
            flag is used, this represents the amplitude of the red channel. This 
            value is an integer with a value greater than or equal to 0. This 
            value will be multiplied with the results of the selected function 
            (sine, cosine, user buffer , _). The results of the multiplications 
            are then added to the pixel values. These functions as well as the 
            real buffer values are from -1 to 1. Possible values for the redAmplitude
            parameter are from 0-100.</param>
      <param name="origin">Represents the coordinates of the origin, in 
            pixels. This parameter is used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> 
            flag and the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Circles</see> flags are set, or if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> 
            flag is set.</param>
      <param name="flags">Flags that indicate the 
            to use.
            For a list of available flags, <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags" /></param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FunctionalLightConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As FunctionalLightCommand = New FunctionalLightCommand(75, New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), FunctionalLightCommandFlags.LinearQuadratic Or FunctionalLightCommandFlags.LinearInner)
      ' Apply the linear lighting effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FunctionalLightConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FunctionalLightCommand command = new FunctionalLightCommand(75, new LeadPoint(image.Width / 2, image.Height / 2), FunctionalLightCommandFlags.LinearQuadratic | FunctionalLightCommandFlags.LinearOuter);
         // Apply the linear lighting effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FunctionalLightCommand.FunctionalLightConstructor_S1-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.LeadPoint,System.Int32,Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags)">
      <summary>
            Initializes a new FunctionalLightCommand class object with explicit parameters.
            </summary>
      <param name="frequency">Value that represents the frequency factor. 
            This parameter is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> flag
            or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see> flag is set.
            Valid values range from 1 - 10000. This value is divided internally 
            by 100 (corresponding to a real interval of 0.01 - 100.0).</param>
      <param name="redAmplitude">If the image is grayscale, this parameter 
            represents the amplitude of the master channel. If the image is color
            and the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> 
            flags are set, this parameter represents the amplitude of each channel.
            If the image is color and the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> 
            flag is used, this represents the amplitude of the red channel. This 
            value is an integer with a value greater than or equal to 0. This 
            value will be multiplied with the results of the selected function 
            (sine, cosine, user buffer , _). The results of the multiplications 
            are then added to the pixel values. These functions as well as the 
            real buffer values are from -1 to 1. Possible values for this
            parameter are from 0-100.</param>
      <param name="greenAmplitude">Value that represents the amplitude of 
            the green color when the addition operation is used 
            (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> 
            flag is set). This value is ignored when grayscale images are used or
            when the multiplication operation is used (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            flag is set). This value is also ignored if the  
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> flag is set.
            flag. Possible values for this parameter are from 0 - 100.</param>
      <param name="blueAmplitude">Value that represents the amplitude of the
            blue color when the addition operation is used 
            (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> 
            flag is set). This value is ignored when grayscale images are used or
            when the multiplication operation is used (
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            flag is set). This value is also ignored if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> flag is set
            Possible values for this parameter are from 0 -100.</param>
      <param name="angle">Value that represents the angle, in hundredths of
            degrees. This parameter is used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> 
            or to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see> flag is set. 
            Valid values for this parameter range from -18000 to 18000. This value
            is divided internally by 100.</param>
      <param name="origin">Represents the coordinates of the origin, in 
            pixels.This parameter is used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> 
            flag and <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Circles</see> flag are set, or if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> 
            flag is set.</param>
      <param name="phaseShift">Value that represents the phase shift angle, in hundredths of 
            degrees. This parameter is used if the  
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> flag is set. Possible values for this parameter are from 
            -18000 to 18000. This value will be divided internally by 100.</param>
      <param name="flags">Flags that indicate the function applied to the image. For a list of the available flags, 
            refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags" />.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FunctionalLightConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As FunctionalLightCommand = New FunctionalLightCommand(5000, 90, 50, 70, 5000, New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), 2000, FunctionalLightCommandFlags.Trigonometry Or FunctionalLightCommandFlags.Unidirection Or FunctionalLightCommandFlags.Addition)
      ' Apply the linear lighting effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FunctionalLightConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FunctionalLightCommand command = new FunctionalLightCommand(5000, 90, 50, 70, 5000, new LeadPoint(image.Width / 2, image.Height / 2), 2000, FunctionalLightCommandFlags.Trigonometry | FunctionalLightCommandFlags.Circles | FunctionalLightCommandFlags.Addition);
         // Apply the linear lighting effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FunctionalLightCommand.FunctionalLightConstructor_S2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags)">
      <summary>
            Initializes a new FunctionalLightCommand class object with explicit parameters.
            </summary>
      <param name="frequency">Value that represents the frequency factor. 
            This parameter is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see> flag is set. 
            Valid values range from 1 - 10000. This value is divided internally 
            by 100 (corresponding to a real interval of 0.01 - 100.0).</param>
      <param name="redAmplitude">If the image is grayscale, this parameter 
            represents the amplitude of the master channel. If the image is color
            and <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> 
            flags are set, this parameter represents the amplitude of each channel.
            If the image is color and the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> 
            flag is set, this represents the amplitude of the red channel. This 
            value is an integer with a value greater than or equal to 0. This 
            value will be multiplied with the results of the selected function 
            (sine, cosine, user buffer , _). The results of the multiplications 
            are then added to the pixel values. These functions as well as the 
            real buffer values are from -1 to 1. Possible values for this
            parameter are from 0-100.</param>
      <param name="greenAmplitude">Value that represents the amplitude of 
            the green color when the addition operation is used 
            (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> 
            flag is set). This value is ignored when grayscale images are used or
            when the multiplication operation is used (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            flag is set). This value is also ignored if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> 
            flag is set. Possible values for this parameter are from 0 - 100.</param>
      <param name="blueAmplitude">Value that represents the amplitude of the
            blue color when the addition operation is used 
            (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> 
            flag is set). This value is ignored when grayscale images are used or
            when the multiplication operation is used (
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            flag is set). This value is also ignored if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> 
            flag is set. Possible values for this parameter are from 0 -100.</param>
      <param name="angle">Value that represents the angle, in hundredths of
            degrees. This parameter is used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see> flag is set. 
            Valid values for this parameter range from -18000 to 18000. This value
            is divided internally by 100.</param>
      <param name="buffer">Array that holds all points that represents the 
            shape drawn by the user. This parameter is used only if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see> flag is set. 
            These values should be between -1000 and 1000. They are internally 
            divided by 1000, so the real values are between -1 and 1.</param>
      <param name="flags">Flags that indicate the function applied to the image.
            For a list of the available flags, refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags" />.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FunctionalLightConstructorExample_S3()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim userPoint() As LeadPoint
      ReDim userPoint(3)
      'Apply the filter
      userPoint(0).X = 0
      userPoint(0).Y = 0
      userPoint(1).X = 3
      userPoint(1).Y = 10
      userPoint(2).X = 9
      userPoint(2).Y = -10
      userPoint(3).X = 12
      userPoint(3).Y = 0

      Dim curve() As Integer
      ReDim curve(12)
      EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear)

      Dim command As FunctionalLightCommand = New FunctionalLightCommand(5000, 90, 50, 70, 4500, curve, FunctionalLightCommandFlags.Freehand Or FunctionalLightCommandFlags.Addition)
      ' Apply the linear lighting effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FunctionalLightConstructorExample_S3()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] userPoint = new LeadPoint[4];
         //Apply the filter
         userPoint[0].X = 0;
         userPoint[0].Y = 0;
         userPoint[1].X = 3;
         userPoint[1].Y = 5;
         userPoint[2].X = 9;
         userPoint[2].Y = 7;
         userPoint[3].X = 12;
         userPoint[3].Y = 10; 

         int[] curve = new int[13];
         EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear);

         FunctionalLightCommand command = new FunctionalLightCommand(5000, 90, 50, 70, 4500, curve,FunctionalLightCommandFlags.Freehand | FunctionalLightCommandFlags.Addition);
         // Apply the linear lighting effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FunctionalLightCommand.FunctionalLightConstructor_S3-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Frequency">
      <summary>
            Gets or set a value that represents the frequency factor.
            </summary>
      <value>Value that represents the frequency factor. This property is used if 
            the Flags property is set to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> or to 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see>. Valid 
            values range from 1 - 10000. This value is divided internally by 100 
            (corresponding to a real interval of 0.01 - 100.0).</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Angle" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.RedAmplitude">
      <summary>
            Gets or sets a value that represents the amplitude of the red color.
            </summary>
      <value>If the image is grayscale, this property represents the 
            amplitude of the master channel. If the image is color and the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> flags are set, 
            this property represents the amplitude of each channel. If the image 
            is color and <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> flag is used, 
            this represents the amplitude of the red channel. This value is an 
            integer with a value greater than or equal to 0. This value will be 
            multiplied with the results of the selected function (sine, cosine, user buffer , _). 
            The results of the multiplications are then added to the pixel values. 
            These functions as well as the real buffer values are from -1 to 1.
            Possible values for this property are from 0-100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.GreenAmplitude">
      <summary>
            Gets or sets a value that represents the amplitude of the green color.
            </summary>
      <value>Value that represents the amplitude of the green color when 
            the addition operation is used (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> flag is set). 
            This value is ignored when grayscale images are used or when the multiplication 
            operation is used (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> flag is set).
            This value is also ignored if Flags property contains the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> flag.
            Possible values for GreenAmplitude property are from 0-100.</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Angle" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.BlueAmplitude">
      <summary>
            Gets or sets a value that represents the amplitude of the blue color.
            </summary>
      <value>Value that represents the amplitude of the blue color when the 
            addition operation is used (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Addition</see> flag is set). 
            This value is ignored when grayscale images are used or when the multiplication 
            operation is used (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Multiply</see> flag is set). This value is also ignored 
            if the Flags property contains the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see> flag. 
            Possible values for this property are from 0 -100.</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Angle" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Angle">
      <summary>
            Gets or sets a value that represents the angle, in hundredths of degrees.
            </summary>
      <value>Value that represents the angle, in hundredths of degrees. This 
            property is used if the Flags property is set to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> or to 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see>. Valid values for this property range from -18000 to 18000.
            This value is divided internally by 100.</value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AnglePropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim userPoint() As LeadPoint
      ReDim userPoint(3)
      'Apply the filter
      userPoint(0).X = 0
      userPoint(0).Y = 0
      userPoint(1).X = 3
      userPoint(1).Y = 10
      userPoint(2).X = 9
      userPoint(2).Y = -10
      userPoint(3).X = 12
      userPoint(3).Y = 0

      Dim curve() As Integer
      ReDim curve(12)
      EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear)

      Dim command As FunctionalLightCommand = New FunctionalLightCommand
      command.RedAmplitude = 90
      command.GreenAmplitude = 50
      command.BlueAmplitude = 75
      command.Angle = 4500
      command.PhaseShift = 3000
      command.Frequency = 3000
      command.Buffer = curve
      command.Flags = FunctionalLightCommandFlags.Freehand Or FunctionalLightCommandFlags.Addition
      ' Apply the linear lighting effect.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AnglePropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] userPoint = new LeadPoint[4];
         //Apply the filter
         userPoint[0].X = 0;
         userPoint[0].Y = 0;
         userPoint[1].X = 3;
         userPoint[1].Y = 5;
         userPoint[2].X = 9;
         userPoint[2].Y = 7;
         userPoint[3].X = 12;
         userPoint[3].Y = 10; 

         int[] curve = new int[13];
         EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear);

         FunctionalLightCommand command = new FunctionalLightCommand();
         command.RedAmplitude = 90; 
         command.GreenAmplitude = 50;
         command.BlueAmplitude = 75;
         command.Angle = 4500;
         command.PhaseShift = 3000;
         command.Frequency = 5000;
         command.Buffer = curve;
         command.Flags =  FunctionalLightCommandFlags.Freehand | FunctionalLightCommandFlags.Addition; 

         // Apply the linear lighting effect.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FunctionalLightCommand.Angle-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Origin">
      <summary>
            Gets or sets a point structure that contains the coordinates of the origin, in pixels.
            </summary>
      <value>Point structure that contains the coordinates of the origin, in pixels.
            This property is used if the Flags property is set to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see> 
            and <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Circles</see>, or to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.LinearQuadratic</see>.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.PhaseShift">
      <summary>
            Gets or sets a value that represents the phase shift angle, in hundredths of degrees.
            </summary>
      <value>Value that represents the phase shift angle, in hundredths of 
            degrees. This property is used if the Flags property is set to 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Trigonometry</see>. Possible values for this property are from 
            -18000 to 18000. This value will be divided internally by 100.</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Angle" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Buffer">
      <summary>
            Gets or sets an array that holds all points that represents the shape drawn by 
            the user.
            </summary>
      <value>Array that holds all points that represents the shape drawn
            by the user. This property is used only if the Flags property is set to 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags">FunctionalLightCommandFlags.Freehand</see>. These values should be between -1000 and 1000. They are 
            internally divided by 1000, so the real values are between -1 and 1.</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Angle" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand.Flags">
      <summary>
            Gets or sets flags that indicate the function to apply to the image. 
            </summary>
      <value>Value that indicates the function to apply to the image.
            For a list of available flags, refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommandFlags" />.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommandType">
      <summary>
            A value that indicates the cylinder shape.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CylinderCommandType.Horizontal">
      <summary>
            Stretch the pixels along the vertical plane (horizontal cylinder).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CylinderCommandType.Vertical">
      <summary>
            Stretch the pixels along the horizontal plane (vertical cylinder).
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand">
      <summary>
            Warps the image around a cylinder. This command  is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the image has a region, the effect will be applied only to the region.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CylinderCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As CylinderCommand = New CylinderCommand
      command.Value = 100
      command.Type = CylinderCommandType.Horizontal
      ' Warp the image to horizontal cylinder shape.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CylinderCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         CylinderCommand command = new CylinderCommand();
         command.Value = 100;
         command.Type = CylinderCommandType.Horizontal;
         // Warp the image to horizontal cylinder shape.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.CylinderCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand.#ctor(System.Int32,Leadtools.ImageProcessing.SpecialEffects.CylinderCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand" /> class object with explicit parameters.
            </summary>
      <param name="value">Amount of stretching where:<br /><list type="bullet"><item><description>Positive values: stretch the pixels toward the image edges depending on the type of cylinder.</description></item><item><description>Negative values: stretch the pixels toward the central line of the cylinder.</description></item><item><description>The valid range is from -100 to 100.</description></item></list></param>
      <param name="type">A value that indicates the cylinder shape.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CylinderConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As CylinderCommand
      command = New CylinderCommand(100, CylinderCommandType.Vertical)
      ' Warp the image to vertical cylinder shape.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CylinderConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         CylinderCommand command = new CylinderCommand(100, CylinderCommandType.Vertical);
         // Warp the image to vertical cylinder shape.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.CylinderCommand.CylinderConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand.Type">
      <summary>
            Gets or sets a value that indicates the cylinder shape.
            </summary>
      <value>A value that indicates the cylinder shape.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand.Value">
      <summary>
            Gets or sets the amount of stretching.
            </summary>
      <value>Amount of stretching where:<br /><list type="bullet"><item><description>Positive values: stretch the pixels toward the image edges depending on the type of cylinder.</description></item><item><description>Negative values: stretch the pixels toward the central line of the cylinder.</description></item><item><description>The valid range is from -100 to 100.</description></item></list></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags">
      <summary>
            This enumeration controls the  RingEffectCommand behavior. 
            These values can be OR-ed together, unless otherwise specified
            </summary>
      <noexample />
      <remarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags.Color">
      <summary>
            Controls the output of rings which have undefined areas. Fill the 
            undefined areas with color that is stored in the Color property of the
            RingEffectCommand class, or the color parameter of the appropriate RingEffectCommand Constructor. If you use this flag, do not use 
            the Repeat flag or the NoChange flag.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags.Repeat">
      <summary>
            Controls the output of rings which have undefined areas. Repeat the 
            edges of the region and fill these values in the undefined areas. The 
            edge will be repeated halfway throughout the missing portion of the 
            ring. If you use this flag, do not use the Color flag or the 
            NoChange flag. 
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags.NoChange">
      <summary>
             Controls the output of rings which have undefined areas. Leave the 
             edge pixels unchanged. If you rotate an incomplete ring, the original 
             image pixels will remain in places where you would have undefined 
             portions of the ring. If you use this flag, do not use the Color 
             flag or the Repeat flag.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags.FixedAngle">
      <summary>
            Rotate each ring against the inner ring by a fixed rotation angle 
            specified in the Angle property of the RingEffectCommand class or the angle parameter of the appropriate RingEffectCommand Constructor.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags.Radius">
      <summary>
            Indicates that Radius property of the RingEffectCommand class or the radius parameter of the appropriate RingEffectCommand Constructor contains
            the width of each ring, in pixels. If you use this flag, do not
            use the MaxRadius flag.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags.MaxRadius">
      <summary>
            Indicates that the Radius property of the RingEffectCommand class (or the radius parameter of the appropriate RingEffectCommand Constructor) contains
            the maximum radius, in pixels, that corresponds to the external ring. 
            In this case, the width of each ring is (radius value / (ring count value + 1)). 
            If you use this flag, do not use the Radius flag.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand">
      <summary>
             Divides the image into the specified number of rings. Each ring is 
             rotated according to a rotation angle. The rotation angle for each ring 
             will be chosen randomly by the command or can be passed to the 
             command. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command can process the whole image or a region of
             the image. If the image has a region, the effect is applied only to the 
             region.</description>
          </item>
          <item>
            <description>Divides the image into a certain number of rings. Each
             ring is rotated compared to its inner ring according to a shift angle. The 
             command will pick the shift angle at random if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.FixedAngle flag is 
             not set, or will use the angle specified by the Angle property, or the angle parameter of the Constructor if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.FixedAngle
             flag is set).</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.FixedAngle flag is not set then the command 
             will pick the shift angle randomly. The starting point (that is, the 
             "randomize value") for the random number generator is set in
             the Randomize property, or the randomize parameter if you are using the appropriate RingEffectCommand Constructor as follows:</description>
          </item>
          <item>
            <description>If the randomize value is zero then the command
             will select a random value between 1 and 500 for the randomize value.</description>
          </item>
          <item>
            <description>If the randomize value is &gt; 0, it will be used for 
             the randomize value. Note that randomize value should be between 1 and
             500 in this case.</description>
          </item>
          <item>
            <description>Although the numbers generated are random, if you start
             with the same randomize value you will always get the same sequence of 
             random numbers. This means that if you call the command twice with the 
             same randomize value, you will get the same result.</description>
          </item>
          <item>
            <description>The center of the rings is determined by the Origin 
             property or the origin parameter if you are using the appropriate RingEffectCommand Constructor. The command calculates the width of each ring by
             dividing the maximum radius by the number of rings. The maximum radius is in the Radius property or the radius parameter of the Constructor when the 
             <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.MaxRadius flag is set. </description>
          </item>
          <item>
            <description>The minimum width of each circle is 2. If the result 
             of the division is less than 2, the command will draw ((radius value) / 2)
             rings, each ring having a width of 2.</description>
          </item>
          <item>
            <description>Rings with a large radius might not be completely 
             inside the image. We will refer to these as "incomplete rings". We will 
             refer to a portion of the ring that is outside the image as "undetermined
             portion". When you rotate an incomplete ring, an undetermined portion of
             the ring might come into view. The command has 3 ways of specifying the 
             output of the pixels where undetermined portions come into view:</description>
          </item>
          <item>
            <description>Leave original image pixels unchanged (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.NoChange
             flag is set) or
             <br />
             Repeat edge pixels (<see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.Repeat flag is set) or
             <br />Fill the undefined area with color that is stored in the Color
             property, or the color parameter if you are using the appropriate RingEffectCommand Constructor, if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.COlor flag is set).</description>
          </item>
          <item>
            <description>The determined portion of the ring will always 
             displace the original image pixels.</description>
          </item>
          <item>
            <description>The image is split into an innermost circle and a 
             number of rings. The innermost circle will not be rotated. Each ring is 
             rotated compared to the inner ring. The rotation angle is as follows:</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.FixedAngle flag is set, each ring will be 
             rotated against its inner ring by the value specified in the Angle property, or the angle parameter if you are using the appropriate RingEffectCommand Constructor. In other words, 
             each index will be rotated against the original position by the angle value * 
             &lt;ring index&gt;. (The index is 0-based. The innermost circle is 
             considered to have an index of 0 and will not be rotated).</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.FixedAngle flag is not set, the command will 
             pick random rotation angles for each ring. </description>
          </item>
          <item>
            <description>The width of the ring is determined as follows:</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.Radius flag is set, the radius value is the 
             width of each ring</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.MaxRadius flag is set, the radius value will be the 
             maximum ring radius. In this case, the width of each ring will be 
             ((radius value) / (Ring count value + 1)).</description>
          </item>
          <item>
            <description>This command supports all bits/pixel supported by 
             LEADTOOLS.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
             </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RingEffectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RingEffectCommand = New RingEffectCommand
      command.Origin = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Radius = command.Origin.X
      command.RingCount = 10
      command.Randomize = 0
      command.Color = New RasterColor(0, 0, 0)
      command.Angle = 100
      command.Flags = RingEffectCommandFlags.Color Or RingEffectCommandFlags.FixedAngle Or RingEffectCommandFlags.MaxRadius
      ' Apply a ring effect to this image with origin (Origin). The maximum ring radius is equal to half of the image's width. Draw 10 rings, fill the undefined areas with the Black color and the shift angle is equal to 1 degrees. Note that you will have undefined areas only if the image width is greater than the image height.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RingEffectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RingEffectCommand command  = new RingEffectCommand();
         command.Origin = new LeadPoint((image.Width / 2), (image.Height / 2));
         command.Radius             = command.Origin.X;
         command.RingCount          = 10;
         command.Randomize          = 0;
         command.Color              = new RasterColor(0,0,0);
         command.Angle              = 100;
         command.Flags              = RingEffectCommandFlags.Color | RingEffectCommandFlags.FixedAngle | RingEffectCommandFlags.MaxRadius;
         // Apply a ring effect to this image with origin (Origin). The maximum ring radius is equal to half of the image's width. Draw 10 rings, fill the undefined areas with the Black color and the shift angle is equal to 1 degrees. Note that you will have undefined areas only if the image width is greater than the image height.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RingEffectCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.#ctor">
      <summary>
            Initializes a new RingEffectCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,System.Int32,Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags)">
      <summary>
            Initializes a new RingEffectCommand class object with explicit parameters.
            </summary>
      <param name="origin">Represents the coordinates (in pixels) for the origin of the rings.
            Only positive values are accepted.</param>
      <param name="radius">If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.Radius 
            flag is set, this is the width of each ring, in 
            pixels. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.MaxRadius 
            flag is set, this is the maximum radius, in pixels.
            In this latter case, the width of each ring is equal to ((radius)
            / (ringCount + 1)). Only positive values are accepted.</param>
      <param name="ringCount">Number of rings. Only positive values are accepted.</param>
      <param name="randomize">The starting point for the randomization process. 
            Valid range is 0-500. If 0, the command will pick the starting point. 
            If &gt; 0, this value will be the starting point. Only positive values are accepted.</param>
      <param name="color">Color used to fill the undefined area. This 
            parameter is used only if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.Color 
            flag is set.</param>
      <param name="angle">The rotation angle value for each ring compared to
            the inner ring, in hundredths of degrees. This parameter is used only 
            if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.FixedAngle 
            flag. The range of the acceptable values is from -18000 to 18000. 
            This value is divided internally by 100.</param>
      <param name="flags">Flags which control the behavior of this 
            command. These flags can be OR-ed together, unless
            otherwise specified.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RingEffectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim origin As LeadPoint = New LeadPoint(CType((leadImage.Width \ 2), Integer), CType((leadImage.Height \ 2), Integer))
      Dim command As RingEffectCommand = New RingEffectCommand(origin, origin.X, 10, 0, New RasterColor(0, 0, 0), 100, RingEffectCommandFlags.Color Or RingEffectCommandFlags.FixedAngle Or RingEffectCommandFlags.MaxRadius)
      ' Apply a ring effect to this image with origin (Origin). The maximum ring radius is equal to half of the image's width. Draw 10 rings, fill the undefined areas with the Black color and the shift angle is equal to 1 degrees. Note that you will have undefined areas only if the image width is greater than the image height.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RingEffectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint origin = new LeadPoint((image.Width / 2), (image.Height / 2));
         RingEffectCommand command = new RingEffectCommand(origin, origin.X, 10, 0, new RasterColor(0,0,0), 100, RingEffectCommandFlags.Color | RingEffectCommandFlags.FixedAngle | RingEffectCommandFlags.MaxRadius);
         // Apply a ring effect to this image with origin (Origin). The maximum ring radius is equal to half of the image's width. Draw 10 rings, fill the undefined areas with the Black color and the shift angle is equal to 1 degrees. Note that you will have undefined areas only if the image width is greater than the image height.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RingEffectCommand.RingEffectConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.Origin">
      <summary>
            Gets or sets the coordinates (in pixels) for the origin of the rings.
            </summary>
      <value>Coordinates (in pixels) for the origin of the rings.
            Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.Radius">
      <summary>
            Gets or sets the width of each ring in pixels or the maximum radius.
            </summary>
      <value>If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.Radius flag is set in the Flags property, this is the 
            width of each ring, in pixels. If the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.MaxRadius flag is set in the Flags property,
            this is the maximum radius, in pixels. In this latter case, the width
            of each ring is equal to ((Radius property)/ (RingCount property + 1)). Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.RingCount">
      <summary>
            Gets or sets the number of rings.
            </summary>
      <value>Number of rings. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.Randomize">
      <summary>
            Gets or sets the starting point for the randomization process.
            </summary>
      <value>The starting point for the randomization process. Valid range is 
            0-500. If 0, the command will pick the starting point. If &gt; 0, 
            this value will be the starting point. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.Color">
      <summary>
            Gets or sets the color used to fill the undefined area.
            </summary>
      <value>Color used to fill the undefined area. This property is 
            used only if the Flags property contains the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.Color flag.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.Angle">
      <summary>
            Gets or sets the rotation angle value for each ring compared to the inner ring, in
            hundredths of degrees.
            </summary>
      <value>The rotation angle value for each ring compared to the inner 
            ring, in hundredths of degrees. This property is used only if the Flags 
            property contains the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommandFlags" />.FixedAngle flag. The range of the acceptable 
            values is from -18000 to 18000. This value is divided internally by 
            100. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand.Flags">
      <summary>
            Gets or sets a value that controls the behavior of this command.
            </summary>
      <value>Value which controls the behavior of this command. These flags 
            can be OR-ed together with any other flag, unless otherwise specified.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand">
      <summary>
            Reflects the image on an ocean surface. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see>o and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the image has a region, the effect will be applied on the
                        region only.</description>
          </item>
          <item>
            <description>
                            For an example, see the following figure: 
                            <para><img src="Ocean_before.jpg" /></para>The following figure shows
                            the same image, after the effect has been applied: 
                            <para><img src="Ocean_after.jpg" /></para><para>To obtain this effect, the following settings were used with the
                            method:</para><ol class="xmldocnumberedlist"><li class="xmldocnumberedlist"><description>Amplitude = 15</description></li><li class="xmldocnumberedlist"><description>Frequency = 20</description></li><li class="xmldocnumberedlist"><description>LowerTransparency = true</description></li><li class="xmldocnumberedlist"><description>This command does not support 32-bit grayscale
                                    images.</description></li></ol></description>
          </item>
          <item>
            <description>
                            This command supports 12- and 16-bit grayscale and 48- and 64-bit color
                            images. Support for 12- and 16-bit grayscale and 48- and 64-bit color
                            images is available only in the
                            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see>
                            toolkits.
                        </description>
          </item>
          <item>
            <description>This command does not support signed data
                        images.</description>
          </item>
        </list>For more information, refer to
                <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" /> on an image.</para>
        <code lang="VB">   Public Sub OceanCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As OceanCommand = New OceanCommand
      command.Amplitude = 20
      command.Frequency = 6
      command.LowerTransparency = True
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void OceanCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         OceanCommand command = new OceanCommand();
         command.Amplitude = 20;
         command.Frequency = 6;
         command.LowerTransparency = true;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.OceanCommand-->
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.OceanCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.OceanCommand.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" /> class object with explicit parameters.
            </summary>
      <param name="amplitude">Wave magnitude, in pixels. This parameter only accepts positive values.</param>
      <param name="frequency">Number of repeated waves. This parameter only accepts positive values.</param>
      <param name="lowerTransparency">Flag that indicates the transparency direction. Possible values are:
            <table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td><b>TRUE</b></td><td><b>Transparency increases as you move from the bottom of the image to the top of the image, line by line.</b></td></tr><tr><td>FALSE</td><td>Transparency increases as you move from the top of the image to the bottom of the image, line by line.</td></tr></table></param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" /> on an image.</para>
        <code lang="VB">   Public Sub OceanConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As OceanCommand = New OceanCommand(20, 6, True)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void OceanConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         OceanCommand command = new OceanCommand(20, 6, true);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.OceanCommand.OceanConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.OceanCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.OceanCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.OceanCommand.Amplitude">
      <summary>
            Gets or sets the wave magnitude, in pixels.
            </summary>
      <value>Wave magnitude, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.OceanCommand.Frequency">
      <summary>
            Gets or sets the number of repeated waves.
            </summary>
      <value>Number of repeated waves. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.OceanCommand.LowerTransparency">
      <summary>
            Flag that indicates the transparency direction.
            </summary>
      <value>Enumeration that indicates the transparency direction. Possible values are:
            <table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td><b>TRUE</b></td><td><b>Transparency increases as you move from the bottom of the image to the top of the image, line by line.</b></td></tr><tr><td>FALSE</td><td>Transparency increases as you move from the top of the image to the bottom of the image, line by line.</td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags">
      <summary>
            Flags that indicate how to handle exposed areas and the plane along which to stretch the pixels.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how to handle exposed areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>Flags that indicate the plane in which the stretching is to occur</td><td>Horizontal, Vertical, HorizontalVertical</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags.Color">
      <summary>
             Fill any exposed areas with the fill color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags.NoChange">
      <summary>
             Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags.Horizontal">
      <summary>
            Stretch the pixels along the vertical plane.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags.Vertical">
      <summary>
            Stretch the pixels along the horizontal plane.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags.HorizontalVertical">
      <summary>
            Stretch the pixels along the horizontal and vertical plane.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand">
      <summary>
            Wraps the image onto a 3D plane shaped by Curve. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>For an example, the following figure shows an image before the effect is applied.<br /><img src="FreePlaneBend_before.jpg" /><br />The following figure shows the same image after the effect has been applied.<br /><img src="FreePlaneBend_after.jpg" /></description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FreePlaneBendCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As FreePlaneBendCommand = New FreePlaneBendCommand
      Dim UserPoint() As LeadPoint
      ReDim UserPoint(3)

      Dim Curve() As Integer
      ReDim Curve(12)

      'Apply the filter
      UserPoint(0).X = 0
      UserPoint(0).Y = 0
      UserPoint(1).X = 3
      UserPoint(1).Y = 10
      UserPoint(2).X = 9
      UserPoint(2).Y = -10
      UserPoint(3).X = 12
      UserPoint(3).Y = 0

      EffectsUtilities.GetCurvePoints(Curve, UserPoint, CurvePointsType.Linear)
      command.Flags = FreePlaneBendCommandFlags.Color Or FreePlaneBendCommandFlags.Vertical
      command.Scale = 200
      command.FillColor = New RasterColor(255, 0, 0)
      command.Curve = Curve
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreePlaneBendCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         FreePlaneBendCommand command = new FreePlaneBendCommand();
         LeadPoint[] UserPoint = new LeadPoint[4];
         int[] Curve = new int[13];

         //Apply the filter
         UserPoint[0].X = 0;
         UserPoint[0].Y = 0;
         UserPoint[1].X = 3;
         UserPoint[1].Y = 10;
         UserPoint[2].X = 9;
         UserPoint[2].Y = -10;
         UserPoint[3].X = 12;
         UserPoint[3].Y = 0; 

         EffectsUtilities.GetCurvePoints(Curve, UserPoint, CurvePointsType.Linear);
         for(int i = 0; i &lt; Curve.Length; i++)
            Curve[i] /= 50;
         command.Flags = FreePlaneBendCommandFlags.Color | FreePlaneBendCommandFlags.Vertical;
         command.Scale = 200;
         command.FillColor = new RasterColor(255, 0, 0);
         command.Curve = Curve;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreePlaneBendCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.#ctor(System.Int32[],System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" /> class object with explicit parameters.
            </summary>
      <param name="curve">Array of integers that represent surface shape values. Valid values for each element in the curve array range between -1000 and 1000. Positive values mean the curve is concave in and negative values mean the curve is concave out. The values in this array are divided internally by 1000.</param>
      <param name="scale">Factor used to multiply the various amplitude values in the Curve array. Each value in the curve array is multiplied by this factor. For example, if you want to double the size of the amplitude values, use a Scale value of 2; to triple the amplitudes values, use a Scale value of 3, etc. The top practical limit for this parameter is the width and height of the Run method image. This parameter only accepts positive values.</param>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle exposed areas and the plane along which to stretch the pixels. You can use a bit wise OR (|) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FreePlaneBendConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim userPoint() As LeadPoint
      ReDim userPoint(3)
      'Apply the filter
      userPoint(0).X = 0
      userPoint(0).Y = 0
      userPoint(1).X = 3
      userPoint(1).Y = 10
      userPoint(2).X = 9
      userPoint(2).Y = -10
      userPoint(3).X = 12
      userPoint(3).Y = 0

      Dim curve() As Integer
      ReDim curve(12)
      EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear)

      Dim command As FreePlaneBendCommand
      command = New FreePlaneBendCommand(curve, 200, New RasterColor(255, 0, 0), FreePlaneBendCommandFlags.Color Or FreePlaneBendCommandFlags.Vertical)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FreePlaneBendConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadPoint[] userPoint = new LeadPoint[4];           
         //Apply the filter
         userPoint[0].X = 0;
         userPoint[0].Y = 0;
         userPoint[1].X = 3;
         userPoint[1].Y = 10;
         userPoint[2].X = 9;
         userPoint[2].Y = -10;
         userPoint[3].X = 12;
         userPoint[3].Y = 0; 

         int[] curve = new int[13];
         EffectsUtilities.GetCurvePoints(curve, userPoint, CurvePointsType.Linear);
         for(int i = 0; i &lt; curve.Length; i++)
            curve[i] /= 50;

         FreePlaneBendCommand command = new FreePlaneBendCommand(curve, 200, new RasterColor(255, 0, 255), FreePlaneBendCommandFlags.Color | FreePlaneBendCommandFlags.Vertical);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.FreePlaneBendCommand.FreePlaneBendConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.Curve">
      <summary>
            gets or sets an array of integers that represent surface shape values.
            </summary>
      <value>Array of integers that represent surface shape values. Valid values for each element in the Curve array range between -1000 and 1000. Positive values mean the curve is concave in and negative values mean the curve is concave out. The values in this array are divided internally by 1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.Scale">
      <summary>
            Gets or sets a factor used to multiply the various amplitude values in the Curve array.
            </summary>
      <value>Factor used to multiply the various amplitude values in the Curve array. Each value in the Curve array is multiplied by this factor. For example, if you want to double the size of the amplitude values, use a Scale value of 2; to triple the amplitudes values, use a Scale value of 3, etc. The top practical limit for this parameter is the width and height of the affected image. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand.Flags">
      <summary>
            Gets or sets flags that indicate how to handle exposed areas and the plane along which to stretch the pixels.
            </summary>
      <value>Flags that indicate how to handle exposed areas and the plane along which to stretch the pixels. You can use a bit wise OR (|) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommandFlags">
      <summary>
            This enumeration indicates how to handle exposed areas and the type of 
            conversion.
            </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Exposed Areas</td><td>Color, Repeat, NoChange</td></tr><tr><td>Conversion Type</td><td>CartToPolar, PolarToCart</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PolarCommandFlags.Color">
      <summary>
            Fill any exposed areas with the color stored in the FillColor property
            of the PolarCommand class, or the fillColor parameter if you are using the appropriate Constructor).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PolarCommandFlags.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PolarCommandFlags.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PolarCommandFlags.CartToPolar">
      <summary>
            Convert the image from Cartesian (rectangular) coordinates to polar 
            coordinates.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.PolarCommandFlags.PolarToCart">
      <summary>
            Convert the image from polar coordinates to Cartesian (rectangular)
            coordinates.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand">
      <summary>
            Converts the image from rectangular to polar coordinates and vice versa.
            This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command converts an image from Cartesian 
            (rectangular) coordinates to polar coordinates or vice versa. Rectangular
            coordinates use the form (x, y) where 'x' and 'y' are the horizontal and
            vertical distances from the origin, respectively. Polar coordinates are 
            in the form (r, E) where 'r' is the distance from the origin to the point
            and 'E' is the angle of the line the point makes with the positive x-axis.
            Polar coordinates use a grid made of concentric circles around the origin,
            along with lines that are rays radiating outward from the origin.</description>
          </item>
          <item>
            <description>This command considers the positions of the image's 
            pixels as values in a polar coordinate system.  Then it converts all the
            pixels in a line of the image into a circle around the center of the 
            image.</description>
          </item>
          <item>
            <description>If there is any region selected on the image, the 
            effect will be applied on the region dimensions only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images.
            Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the
            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Convert to polar coordinate.</para>
        <code lang="VB">   Public Sub PolarCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PolarCommand = New PolarCommand
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = PolarCommandFlags.Repeat Or PolarCommandFlags.CartToPolar
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PolarCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PolarCommand command   = new PolarCommand();
         command.FillColor      = new Leadtools.RasterColor(0,0,0);
         command.Flags          = PolarCommandFlags.Repeat | PolarCommandFlags.CartToPolar;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PolarCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PolarCommand.#ctor">
      <summary>
            Initializes a new PolarCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PolarCommand.#ctor(Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.PolarCommandFlags)">
      <summary>
            Initializes a new PolarCommand class object with explicit parameters.
            </summary>
      <param name="fillColor">Specifies the fill color for any exposed areas.</param>
      <param name="flags">Flag that indicates how to handle exposed 
            areas and the type of conversion.</param>
      <example>
        <para>Convert to polar coordinate.</para>
        <code lang="VB">   Public Sub PolarConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PolarCommand = New PolarCommand(New RasterColor(0, 0, 0), PolarCommandFlags.Repeat Or PolarCommandFlags.CartToPolar)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PolarConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PolarCommand command = new PolarCommand(new RasterColor(0,0,0), PolarCommandFlags.Repeat | PolarCommandFlags.CartToPolar);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PolarCommand.PolarConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PolarCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PolarCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PolarCommand.FillColor">
      <summary>
            Gets or sets the fill color for any exposed areas.
            </summary>
      <value>The fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PolarCommand.Flags">
      <summary>
            Gets or sets flags that indicate how to handle exposed areas and the type of 
            conversion.
            </summary>
      <value>Flags that indicate how to handle exposed areas and the 
            type of conversion. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand">
      <summary>
            Places the image on parallel planes along the Z-axis, and bends the planes toward the center point. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command shows the effect of placing images on planes
                        along the Z-axis and bending them toward a specific point. These images may
                        be placed above, below, to the left or to the right of the Z-axis. An
                        external light source of the specified color and brightness may be shined
                        on the images. The brightness may vary along the z-axis according to the
                        bright length value. The line of images may be bent toward a specific point
                        by setting a bending value.</description>
          </item>
          <item>
            <description>By changing the center point and the viewing screen Z-offset,
                        you can simulate moving along the axis.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the
                        region dimensions only.</description>
          </item>
          <item>
            <description>
                            For an example, see the following figure: 
                            <para><img src="PlaneBend_before.jpg" /></para>The following figure
                            shows the same image, after the effect has been applied: 
                            <para><img src="PlaneBend_after.jpg" /></para>To obtain this effect,
                            the following settings were used with the method:<br /><ol class="xmldocnumberedlist"><li class="xmldocnumberedlist"><description>
                                        CenterPoint = new
                                        <see cref="T:Leadtools.LeadPoint" />(640, 256)
                                    </description></li><li class="xmldocnumberedlist"><description>ZValue = 0</description></li><li class="xmldocnumberedlist"><description>Distance = 256</description></li><li class="xmldocnumberedlist"><description>PlaneOffset = 256</description></li><li class="xmldocnumberedlist"><description>Repeat = -1</description></li><li class="xmldocnumberedlist"><description>PyramidAngle = 0</description></li><li class="xmldocnumberedlist"><description>Stretch = 100</description></li><li class="xmldocnumberedlist"><description>BendFactor = 500</description></li><li class="xmldocnumberedlist"><description>StartBright = 0</description></li><li class="xmldocnumberedlist"><description>EndBright = 0</description></li><li class="xmldocnumberedlist"><description>BrightLength = 50</description></li><li class="xmldocnumberedlist"><description>
                                        BrightColor = new
                                        <see cref="T:Leadtools.RasterColor" />(255, 255, 255)
                                    </description></li><li class="xmldocnumberedlist"><description>
                                        FillColor = new <see cref="T:Leadtools.RasterColor" />(0,
                                        0, 0)
                                    </description></li><li class="xmldocnumberedlist"><description>
                                        Flags = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags" />.Down |
                                        <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags" />.Color
                                    </description></li><li class="xmldocnumberedlist"><description>This command does not support 32-bit grayscale
                                    images.</description></li></ol></description>
          </item>
          <item>
            <description>
                            This command supports 12- and 16-bit grayscale and 48- and 64-bit color
                            images. Support for 12- and 16-bit grayscale and 48- and 64-bit color
                            images is available only in the
                            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see>
                            toolkits.
                        </description>
          </item>
          <item>
            <description>This command does not support signed data
                        images.</description>
          </item>
        </list>For more information, refer to
                <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
                For more information, refer to
                <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PlaneBendCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PlaneBendCommand = New PlaneBendCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.ZValue = 0
      command.Distance = leadImage.Height
      command.PlaneOffset = leadImage.Width \ 2
      command.Repeat = -1
      command.PyramidAngle = 0
      command.Stretch = 100
      command.BendFactor = 400
      command.StartBright = 0
      command.EndBright = 100
      command.BrightLength = 20000
      command.BrightColor = New RasterColor(255, 255, 255)
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = PlaneCommandFlags.Down Or PlaneCommandFlags.Up Or PlaneCommandFlags.Color
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PlaneBendCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PlaneBendCommand command = new PlaneBendCommand();
         command.CenterPoint = new LeadPoint(image.Width / 2, image.Height / 2);
         command.ZValue = 0;
         command.Distance = image.Height;
         command.PlaneOffset = image.Width /2;
         command.Repeat = -1;
         command.PyramidAngle = 0;
         command.Stretch = 100;
         command.BendFactor = 400;
         command.StartBright = 0;
         command.EndBright = 100;
         command.BrightLength = 20000;
         command.BrightColor = new RasterColor(255, 255, 255);
         command.FillColor = new RasterColor(0, 0, 0);
         command.Flags = PlaneCommandFlags.Down | PlaneCommandFlags.Up | PlaneCommandFlags.Color;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PlaneBendCommand-->
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" /> class object with explicit parameters.
            </summary>
      <param name="centerPoint">Contains the point at which the camera or viewer is looking. This is also the point toward which the images will be bent. It may be outside the image borders.</param>
      <param name="zValue">Viewing screen offset on the Z-axis, in pixels.</param>
      <param name="distance">Camera distance from the viewing screen, in pixels.</param>
      <param name="planeOffset">Distance between the parallel planes. This property only accepts positive values.</param>
      <param name="repeat">Number of times the image repeats along the Z-axis. If Repeat equals -1 the image will be infinitely repeated. Its range starts from -1.</param>
      <param name="pyramidAngle">The view angle, off the Z-axis. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000.</param>
      <param name="stretch">Value that indicates whether to expand or compress the image, and by how much. If Stretch &lt; 100 image will be expanded. If stretch &gt; 100 the image will be compressed. Use 100 to maintain the image's dimensions. The value of this parameter is internally divided by 100. This parameter only accepts positive values.</param>
      <param name="bendFactor">Determines the plane's bending value. The range starts at 100 and increases indefinitely. If bendFactor equals 100 the planes will not be bent.If bendFactor &gt; 100 planes will be bent. The value of this parameter is internally divided by 100. This parameter only accepts positive values.</param>
      <param name="startBright">Value that indicates the brightness of an external light source on the first image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</param>
      <param name="endBright">Value that indicates the brightness of an external light source on the last image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</param>
      <param name="brightLength">Value that indicates how much the brightness changes as you move along the Z axis. This parameter is internally multiplied by 50.</param>
      <param name="brightColor">Specifies the color of an external light source that shines on the displayed images.</param>
      <param name="fillColor">Specifies the background color.</param>
      <param name="flags">Flags that indicate the background color and the planes to be shown. You can use a bit wise OR (|) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PlaneBendConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PlaneBendCommand = New PlaneBendCommand(New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), 0, leadImage.Height, CType((leadImage.Width / 2), Integer), -1, 0, 100, 400, 0, 100, 20000, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0), PlaneCommandFlags.Down Or PlaneCommandFlags.Up Or PlaneCommandFlags.Color)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PlaneBendConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PlaneBendCommand command = new PlaneBendCommand(new LeadPoint(image.Width / 2, image.Height / 2), 0, image.Height, image.Width / 2, -1, 0, 100, 400, 0, 100, 20000, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0), PlaneCommandFlags.Down | PlaneCommandFlags.Up | PlaneCommandFlags.Color);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PlaneBendCommand.PlaneBendConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.CenterPoint">
      <summary>
            Gets or sets the point at which the camera or viewer is looking.
            </summary>
      <value>Point structure that contains the point at which the camera or viewer is looking. This is also the point toward which the images will be bent. It may be outside the image borders.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.ZValue">
      <summary>
            Gets or sets the viewing screen offset on the Z-axis, in pixels.
            </summary>
      <value>Viewing screen offset on the Z-axis, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.Distance">
      <summary>
            Gets or sets the camera distance from the viewing screen, in pixels.
            </summary>
      <value>Camera distance from the viewing screen, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.PlaneOffset">
      <summary>
            Gets or sets the distance between the parallel planes.
            </summary>
      <value>Distance between the parallel planes. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.Repeat">
      <summary>
            Gets or sets the number of times the image repeats along the Z-axis.
            </summary>
      <value>Number of times the image repeats along the Z-axis. If Repeat equals -1 the image will be infinitely repeated. Its range starts from -1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.PyramidAngle">
      <summary>
            Gets or sets the view angle, off the Z-axis.
            </summary>
      <value>The view angle, off the Z-axis. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.Stretch">
      <summary>
            Gets or sets a value that indicates whether to expand or compress the image, and by how much.
            </summary>
      <value>Value that indicates whether to expand or compress the image, and by how much. If Stretch &lt; 100 image will be expanded. If Stretch &gt; 100 the image will be compressed. Use 100 to maintain the image's dimensions. The value of this property is internally divided by 100. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.BendFactor">
      <summary>
            Gets or sets the plane's bending value.
            </summary>
      <value>The plane's bending value. The range starts at 100 and increases indefinitely. If BendFactor equals 100 the planes will not be bent.If BendFactor &gt; 100 planes will be bent. The value of this property is internally divided by 100. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.StartBright">
      <summary>
            Gets or sets a value that indicates the brightness of an external light source on the first image displayed.
            </summary>
      <value>Value that indicates the brightness of an external light source on the first image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.EndBright">
      <summary>
            Gets or sets a value that indicates the brightness of an external light source on the last image displayed.
            </summary>
      <value>Value that indicates the brightness of an external light source on the last image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.BrightLength">
      <summary>
            Gets or sets a value that indicates how much the brightness changes as you move along the Z axis.
            </summary>
      <value>Value that indicates how much the brightness changes as you move along the Z axis. This property is internally multiplied by 50.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.BrightColor">
      <summary>
            Gets or sets the color of an external light source that shines on the displayed images.
            </summary>
      <value>The color of an external light source that shines on the displayed images.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.FillColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <value>The background color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand.Flags">
      <summary>
            Gets or sets flags that indicate the background color and the planes to be shown.
            </summary>
      <value>Flags that indicate the background color and the planes to be shown. You can use a bit wise OR (|) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType">
      <summary>
            This enumeration contains all the flags that are needed by the CloudsCommand.
            Specifies how to apply the clouds effect to an image.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType.Pure">
      <summary>
            Create a pure cloud texture.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType.Difference">
      <summary>
            Apply the difference between the created cloud texture and 
            the original image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType.Opacity">
      <summary>
            Combine the cloud colors with colors of the original image 
            by using Opacity value.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand">
      <summary>
            Applies cloud effects to a bitmap.
            This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above
            toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method can process the whole image or a region 
            of the image. If the image has a region, the effect is applied only to 
            the region.</description>
          </item>
          <item>
            <description>The Seed property gives the user the ability to change the 
            shape of the clouds effect by changing the starting point for the clouds 
            randomization process. If the user applies the effect many times with 
            the same value of the Seed property the shape of the clouds will be the same.
            </description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CloudsCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As CloudsCommand = New CloudsCommand
      command.Seed = 1000
      command.Frequency = 4
      command.Density = 10
      command.Opacity = 10
      command.BackColor = New RasterColor(255, 255, 255)
      command.CloudsColor = New RasterColor(0, 0, 0)
      command.Type = CloudsCommandType.Difference
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CloudsCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         CloudsCommand command = new CloudsCommand();
         command.Seed        = 1000;
         command.Frequency   = 4;
         command.Density     = 10;
         command.Opacity     = 10;
         command.BackColor   = new RasterColor(255,255,255);
         command.CloudsColor = new RasterColor(0,0,0);
         command.Type        = CloudsCommandType.Difference;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.CloudsCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.#ctor">
      <summary>
            Initializes a new CloudsCommand with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType)">
      <summary>
            Initializes a new CloudsCommand with explicit parameters.
            </summary>
      <param name="seed">Seed value that controls the cloud creation process. Possible values are 0 or greater.</param>
      <param name="frequency">Value that controls the number of clouds inside the image.
            Possible values are 0 or greater.</param>
      <param name="density">Value that indicates the detail in the clouds.
            Possible values are 0 or greater. Use larger values to increase the detail in the clouds, smaller values for blurring.</param>
      <param name="opacity">Value that indicates the transparency, in percent, between the cloud's image and the original image. 
            Valid values range from 0 to 100. This is used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType">CloudsCommandType.Opacity</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType">CloudsCommandType.Difference</see> 
            flag is set. A value of 0 indicates that no clouds are being used while the value of 100 represents a mix of clouds and image.</param>
      <param name="backColor">Represents the fill color for the areas outside the cloud.</param>
      <param name="cloudsColor">Represents the fill color for the cloud.</param>
      <param name="type">Enumeration that specifies how to apply the clouds effect.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CloudsConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As CloudsCommand = New CloudsCommand(1000, 4, 10, 10, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0), CloudsCommandType.Difference)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CloudsConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         CloudsCommand command  = new CloudsCommand(1000, 4, 10, 10, new RasterColor(255,255,255), new RasterColor(0, 0, 0), CloudsCommandType.Difference);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.CloudsCommand.CloudsConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>String that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.Seed">
      <summary>
            Gets or sets an integer that represents the starting point for the cloud's randomization process.
            </summary>
      <value>an integer that represents the starting point for the cloud's randomization process. Possible values are any values that are greater than or equal to 0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.Frequency">
      <summary>
            Gets or sets the value that controls the number of clouds inside the image.
            </summary>
      <value>Number of clouds inside the image. Possible values range from 0 to 16. The value of 0 means no cloud texture will be created, while the value of 16 means the maximum concentration of clouds.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.Density">
      <summary>
            Gets or sets the value that indicates the detail in the cloud.
            </summary>
      <value>Value that indicates the detail in the cloud.
            Possible values range from 0 to 16. The value of 0 means no cloud texture will be created, while the value of 16 means the maximum detail of texture in the clouds. Use larger values to increase the detail in the clouds, smaller values for blurring.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.Opacity">
      <summary>
            Gets or sets the value that indicates the transparency, in percent.
            </summary>
      <value>
            Value that indicates the transparency, in percent, between the cloud's image and the original image. Used if the <see cref="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.Opacity" /> or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType">CloudsCommandType.Difference</see> flag is set. Possible values range from 0 to 100.
            This is used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType">CloudsCommandType.Opacity</see> 
            or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommandType">CloudsCommandType.Difference</see> 
            flag is set. Valid values range from 0 to 100. A value of 0 indicates that no clouds are being used while the value of 100 represents a mix of clouds and image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.BackColor">
      <summary>
            Gets or sets a value that represents the fill color for the areas outside the cloud.
            </summary>
      <value>Represents the fill color for the areas outside the cloud.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.CloudsColor">
      <summary>
            Gets or sets a value that represents the value that specifies the fill color for the cloud.
            </summary>
      <value>Represents the value that specifies the fill color for the cloud.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand.Type">
      <summary>
            Gets or sets the enumeration that specifies how to apply the clouds effect.
            </summary>
      <value>Enumeration that specifies how to apply the clouds effect.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommandFlags">
      <summary>
        <para>Flags that identify how to distribute the canvas image with respect to the image and how to handle resizing. </para>
      </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>canvas image distribution</td><td>TileFit TileShift</td></tr><tr><td>Resizing interpolation</td><td>ResizeNormal ResizeResample ResizeBicubic</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CanvasCommandFlags.TileFit">
      <summary>
            Fit the canvas image so it has the same dimensions as the image that is being applied to the canvas, without tiling.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CanvasCommandFlags.TileShift">
      <summary>
            Shift the canvas image by the amount specified in TilesOffset.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CanvasCommandFlags.ResizeNormal">
      <summary>
            Resize normally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CanvasCommandFlags.ResizeResample">
      <summary>
            Use linear interpolation and averaging to produce a higher quality image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.CanvasCommandFlags.ResizeBicubic">
      <summary>
            Use bicubic interpolation and averaging to produce a higher quality image. This is slower than ResizeResample.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand">
      <summary>
             Combines two images, superimposing one image on another image that is used like a canvas. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>CanvasCommand combines two images, superimposing one image on another image that is used like a canvas.</description>
          </item>
          <item>
            <description>As an example, if you use the following figure:
             <para><img src="Rafting.jpg" /></para>
             And you use the following figure as the canvas image:
             <para><img src="ULAY2.gif" /></para>
             And you call CanvasCommand using the following values:
             <para><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>Transparency</td><td>90</td></tr><tr><td>Emboss</td><td>117</td></tr><tr><td>XOffset</td><td>0</td></tr><tr><td>YOffset</td><td>0</td></tr><tr><td>Flags</td><td>CanvasCommandFlags.TileShift</td></tr><tr><td>TilesOffset</td><td>0</td></tr></table></para>
             The following figure results:
             <para><img src="canvas.jpg" /></para></description>
          </item>
          <item>
            <description>In the following figure the rafting image has been combined with the canvas image using the same values, except that the CanvasCommandFlags.TileFit flag is used and so instead of tiling the canvas image has been stretched to fit the dimensions of the rafting image:
             <para><img src="fit.jpg" /></para></description>
          </item>
          <item>
            <description>
              <para>Other commands that allow you to combine images include:</para>
              <para>BumpCommand</para>
              <para>CombineCommand</para>
              <para>CombineWrapCommand</para>
              <para>TextureAlphaBlendCommand</para>
              <para>UnderlayCommand</para>
             For more information on this and other commands that can be used to combine images, Refer to Introduction to Image Processing With LEADTOOLS.
             </description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information Refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
             </remarks>
      <example>
        <para>This procedure run a <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> of the image using canvasImage.</para>
        <code lang="VB">   Public Sub CanvasCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")
      Dim canvasImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY1.BMP")

      ' Prepare the command
      Dim canvasCommand As CanvasCommand = New CanvasCommand
      canvasCommand.CanvasImage = canvasImage
      canvasCommand.Emboss = 100
      canvasCommand.Transparency = 100
      canvasCommand.XOffset = 10
      canvasCommand.YOffset = 10
      canvasCommand.TileOffset = 20
      canvasCommand.Flags = CanvasCommandFlags.TileShift
      canvasCommand.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CanvasCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");
         RasterImage canvasImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY1.BMP");

         // Prepaire the command
         CanvasCommand canvasCommand = new CanvasCommand();
         canvasCommand.CanvasImage = canvasImage;
         canvasCommand.Emboss = 100;
         canvasCommand.Transparency = 100;
         canvasCommand.XOffset = 10;
         canvasCommand.YOffset = 10;
         canvasCommand.TileOffset = 20;
         canvasCommand.Flags = CanvasCommandFlags.TileShift;

         // Apply the command
         canvasCommand.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.CanvasCommand-->
      </example>
             For more information on this and other commands that can be used to combine images, Refer to Introduction to Image Processing With LEADTOOLS.
             <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredPencilExtendedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.CombineWarpCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
             <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>..
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.#ctor(Leadtools.RasterImage,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> class object with explicit parameters.
            </summary>
      <param name="canvasImage">References the canvas image.</param>
      <param name="transparency">The transparency amount between the image and the canvas. Valid range is from 0 to 100. When set to 0, only the canvas image displays, and when set to 100, the canvas image is barely visible.</param>
      <param name="emboss">Apparent depth of the canvas image. Valid range is from 0 to 200. When Transparency is at 100, and Emboss is 0 only the image displays. Increasing Emboss increases the apparent depth of the canvas image.</param>
      <example>
        <para>This procedure run a <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> of the image using canvasImage.</para>
        <code lang="VB">   Public Sub CanvasConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")
      Dim canvasImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY1.BMP")

      ' Prepare the command
      Dim canvasCommand As CanvasCommand = New CanvasCommand(canvasImage, 100, 100)
      canvasCommand.XOffset = 10
      canvasCommand.YOffset = 10
      canvasCommand.TileOffset = 20
      canvasCommand.Flags = CanvasCommandFlags.TileShift
      canvasCommand.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CanvasConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");
         RasterImage canvasImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY1.BMP");

         // Prepaire the command
         CanvasCommand canvasCommand = new CanvasCommand(canvasImage, 100, 100);
         canvasCommand.XOffset = 10;
         canvasCommand.YOffset = 10;
         canvasCommand.Flags = CanvasCommandFlags.TileFit | CanvasCommandFlags.ResizeBicubic;

         // Apply the command.
         canvasCommand.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.CanvasCommand.CanvasConstructor_S1-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.#ctor(Leadtools.RasterImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.CanvasCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> class object with explicit parameters.
            </summary>
      <param name="canvasImage">References the canvas image.</param>
      <param name="transparency">The transparency amount between the image and the canvas. Valid range is from 0 to 100. When set to 0, only the canvas image displays, and when set to 100, the canvas image is barely visible.</param>
      <param name="emboss">Apparent depth of the canvas image. Valid range is from 0 to 200. When Transparency is at 100, and Emboss is 0 only the image displays. Increasing Emboss increases the apparent depth of the canvas image.</param>
      <param name="xOffset">The X distance between the canvas origin point and the image origin point (in pixels). Valid range is from -Canvas image width to +Canvas image width.</param>
      <param name="yOffset">The Y distance between the canvas origin point and the image origin point (in pixels). Valid range is from -Canvas image height to +Canvas image height.</param>
      <param name="tileOffset">The amount to shift every row of the canvas image from the origin. This parameter is not used when Flags is set to CanvasCommandFlags.TileFit.</param>
      <param name="flags">Flags that identify how to distribute the canvas image with respect to the image and how to handle resizing.</param>
      <example>
        <para>This procedure run a <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> of the image using canvasImage.</para>
        <code lang="VB">   Public Sub CanvasConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")
      Dim canvasImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY1.BMP")

      ' Prepare the command
      Dim canvasCommand As CanvasCommand = New CanvasCommand(canvasImage, 100, 100, 10, 10, 20, CanvasCommandFlags.TileFit)
      canvasCommand.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CanvasConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");
         RasterImage canvasImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "ULAY1.BMP");

         // Prepaire the command
         CanvasCommand canvasCommand = new CanvasCommand(canvasImage, 100, 100, 10, 10, 20, CanvasCommandFlags.TileFit);

         // Apply the command.
         canvasCommand.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.CanvasCommand.CanvasConstructor_S2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.CanvasImage">
      <summary>
            Gets or sets the image that references the canvas image.
            </summary>
      <value>References the canvas image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.Transparency">
      <summary>
            Gets or sets the transparency amount between the image and the canvas.
            </summary>
      <value>The transparency amount between the image and the canvas. Valid range is from 0 to 100. When set to 0, only the canvas image displays, and when set to 100, the canvas image is barely visible.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.Emboss">
      <summary>
            Gets or sets the apparent depth of the canvas image.
            </summary>
      <value>Apparent depth of the canvas image. Valid range is from 0 to 200. When Transparency is at 100, and Emboss is 0 only the image displays. Increasing Emboss increases the apparent depth of the canvas image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.XOffset">
      <summary>
            Gets or sets the X distance between the canvas origin point and the image origin point (in pixels).
            </summary>
      <value>The X distance between the canvas origin point and the image origin point (in pixels). Valid range is from -Canvas image width to +Canvas image width.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.YOffset">
      <summary>
            Gets or sets the Y distance between the canvas origin point and the image origin point (in pixels).
            </summary>
      <value>The Y distance between the canvas origin point and the image origin point (in pixels). Valid range is from -Canvas image height to +Canvas image height.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.TileOffset">
      <summary>
            Gets or sets the amount to shift every row of the canvas image from the origin.
            </summary>
      <value>The amount to shift every row of canvas image from the origin. This property is not used when Flags is set to CanvasCommandFlags.TileFit.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand.Flags">
      <summary>
            Gets or sets the flags that identify how to distribute the canvas image with respect to the image and how to handle resizing.
            </summary>
      <value>Flags that identify how to distribute the canvas image with respect to the image and how to handle resizing.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">
      <summary>
            This enumeration contains all flags that are needed by the RomanMosaicCommand.
            It is indicate the values used to select the shape of the tiles and the type of
            shadow.
            </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Drawing Shape</td><td>Rectangular, Circular, Both</td></tr><tr><td>Shadow</td><td>Flat, Gray, Colored</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags.Rectangular">
      <summary>
            Draws rectangular tiles in a grid. When this flag is used TileWidth property 
            will contain the tile width in pixels, and TileHeight property will 
            contain the tile height in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags.Circular">
      <summary>
            Draws rounded rectangular tiles in rings around the center of the image. 
            When this flag is used TileWidth property will contain the radial 
            component of the tile in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags.Both">
      <summary>
            Draws both rounded rectangular and rectangular tiles. Draws the largest 
            circle that will fit inside the image and fill that with rings of rounded 
            rectangular tiles. Any part of the image that is not covered by the 
            rounded rectangular tiles gets covered with a grid of rectangular tiles.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags.Flat">
      <summary>
            Do not apply shadows.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags.ColoredShadow">
      <summary>
            Apply colored shadows.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags.GrayShadow">
      <summary>
            Apply grayscale shadows.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand">
      <summary>
            Segments the image into rectangular or rounded rectangular tiles and fills 
            them with a color chosen randomly from the colors of the tile's pixels. 
            This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Use this method to divide the image into rectangular or 
            rounded rectangular tiles and then fill each tile with a color chosen 
            randomly from the colors of each tile's pixels.</description>
          </item>
          <item>
            <description>This method can process the whole image or a region 
            of the image. If the image has a region, the effect is applied only to 
            the region.</description>
          </item>
          <item>
            <description>This method supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RomanMosiacCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RomanMosaicCommand = New RomanMosaicCommand
      command.TileWidth = 15
      command.TileHeight = 15
      command.Border = 5
      command.ShadowAngle = ShadowCommandAngle.East
      command.ShadowThresh = 50
      command.Color = New RasterColor(0, 0, 0)
      command.Flags = RomanMosaicCommandFlags.Rectangular Or RomanMosaicCommandFlags.GrayShadow
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RomanMosiacCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RomanMosaicCommand command = new RomanMosaicCommand();
         command.TileWidth    = 15;
         command.TileHeight   = 15;
         command.Border       = 5;
         command.ShadowAngle  = ShadowCommandAngle.East;
         command.ShadowThresh = 50;
         command.Color        = new RasterColor(0,0,0);
         command.Flags        = RomanMosaicCommandFlags.Rectangular | RomanMosaicCommandFlags.GrayShadow;

         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RomanMosiacCommand-->
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.#ctor">
      <summary>
            Initializes a new RomanMosaicCommand with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags)">
      <summary>
            Initializes a new RomanMosaicCommand with explicit parameters.
            </summary>
      <param name="tileWidth">Value that indicates the width of the tile, in pixels. The meaning of 
            the TileWidth property differs according to the flags that are set in the Flags 
            property. Possible values are:
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, TileWidth property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for TileHeight property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Rectangular</b></td><td vlign="top" hlign="center"><b>The width of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image width / 2, if there is no region. If there is a region, then the range of values is just the region width/2.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Circular</b></td><td vlign="top" hlign="center"><b>The radial length of each arc-shaped tile, in pixels</b></td><td vlign="top" hlign="center"><b>1 to the half of the diagonal of the image, if there is no region. If there is a region, then the range of values is just the half of the diagonal of the region rectangle.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Both</b></td><td vlign="top" hlign="center"><b>The radial length of each arc-shaped tile, in pixels</b></td><td vlign="top" hlign="center"><b>1 to the half of the diagonal of the image, if there is no region. If there is a region, then the range of values is just the half of the diagonal of the region rectangle.</b></td></tr></table></param>
      <param name="tileHeight">Value that indicates the height of the tile. The meaning of the TileHeight
            property differs according to the flags that are set in the Flags property. 
            Possible values are:
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, TileHeight property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for TileHeight property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Rectangular</b></td><td vlign="top" hlign="center"><b>The height of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image height / 2, if there is no region. If there is a region, then the range of values is just the region height/2.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Circular</b></td><td vlign="top" hlign="center"><b>Will be ignored.</b></td><td vlign="top" hlign="center"><b>Will be ignored.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Both</b></td><td vlign="top" hlign="center"><b>The height of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image height / 2, if there is no region. If there is a region, then the range of values is just the region height/2.</b></td></tr></table></param>
      <param name="border">Value that indicates the border width, in pixels. The valid 
            range is from 1 to 15.</param>
      <param name="shadowAngle">Value indicates the direction of the light source that produces the 
            shadow. This property is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.ColoredShadow</see> 
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.GrayShadow</see> flag is set.
            Valid values are found in <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle" /></param>
      <param name="shadowThresh">Value that determines which pixels will be affected by the shadow. 
            Possible values range from 0 through 255. Pixel values less than the 
            threshold value will be unaffected. This member will be used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.ColoredShadow</see>
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.GrayShadow</see>
            flag is set.</param>
      <param name="color">Represents the value that specifies the fill color to be used in between the tiles.</param>
      <param name="flags">Enumeration contains all flags that are needed by the RomanMosaicCommand.
            It is indicate the values used to select the shape of the tiles and the type of
            shadow.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RomanMosiacConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RomanMosaicCommand = New RomanMosaicCommand(15, 15, 5, ShadowCommandAngle.East, 50, New RasterColor(0, 0, 0), RomanMosaicCommandFlags.Rectangular Or RomanMosaicCommandFlags.GrayShadow)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RomanMosiacConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RomanMosaicCommand command = new RomanMosaicCommand(15, 15, 5, ShadowCommandAngle.East, 50, new RasterColor(0,0,0), RomanMosaicCommandFlags.Rectangular | RomanMosaicCommandFlags.GrayShadow);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RomanMosiacCommand.RomanMosiacConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <returns>string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.TileWidth">
      <summary>
            Gets or sets the value that indicates the width of the tile, in pixels. 
            </summary>
      <value>Value that indicates the width of the tile, in pixels. The meaning of 
            the TileWidth property differs according to the flags that are set in the Flags 
            property. Possible values are:
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, TileWidth property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for TileWidth property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Rectangular</b></td><td vlign="top" hlign="center"><b>The width of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image width / 2, if there is no region. If there is a region, then the range of values is just the region width/2.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Circular</b></td><td vlign="top" hlign="center"><b>The radial length of each arc-shaped tile, in pixels</b></td><td vlign="top" hlign="center"><b>1 to the half of the diagonal of the image, if there is no region. If there is a region, then the range of values is just the half of the diagonal of the region rectangle.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Both</b></td><td vlign="top" hlign="center"><b>The radial length of each arc-shaped tile, in pixels</b></td><td vlign="top" hlign="center"><b>1 to the half of the diagonal of the image, if there is no region. If there is a region, then the range of values is just the half of the diagonal of the region rectangle.</b></td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.TileHeight">
      <summary>
            Gets or sets the value that indicates the height of the tile. 
            </summary>
      <value>
            Value that indicates the height of the tile. The meaning of the TileHeight
            property differs according to the flags that are set in the Flags property. 
            Possible values are:
            <br /><table><tr><td vlign="top" hlign="center"><b>If Flags property contains:	</b></td><td vlign="top" hlign="center"><b>Then, TileHeight property contains:</b></td><td vlign="top" hlign="center"><b>And the range of possible values for TileHeight property is:</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Rectangular</b></td><td vlign="top" hlign="center"><b>The height of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image height / 2, if there is no region. If there is a region, then the range of values is just the region height/2.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Circular</b></td><td vlign="top" hlign="center"><b>Will be ignored.</b></td><td vlign="top" hlign="center"><b>Will be ignored.</b></td></tr><tr><td vlign="top" hlign="center"><b>RomanMosaicCommandFlags.Both</b></td><td vlign="top" hlign="center"><b>The height of each rectangular tile, in pixels.</b></td><td vlign="top" hlign="center"><b>1 to the image height / 2, if there is no region. If there is a region, then the range of values is just the region height/2.</b></td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.Border">
      <summary>
            Gets or sets the value that indicates the border width, in pixels.
            </summary>
      <value> Value that indicates the border width, in pixels. The valid 
            range is from 1 to 15. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.ShadowAngle">
      <summary>
            Gets or sets the value indicating the direction of the light source that produces the shadow.
            </summary>
      <value>
            Value indicating the direction of the light source that produces the 
            shadow. This property is used if the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.ColoredShadow</see> 
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.GrayShadow</see> flag is set.
            Valid values are found in <see cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommandAngle" /></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.ShadowThresh">
      <summary>
            Gets or sets the value that determines which pixels will be affected by the shadow.
            </summary>
      <value>
            Value that determines which pixels will be affected by the shadow. 
            Possible values range from 0 through 255. Pixel values less than the 
            threshold value will be unaffected. This member will be used if the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.ColoredShadow</see>
            flag or the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommandFlags">RomanMosaicCommandFlags.GrayShadow</see>
            flag is set.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.Color">
      <summary>
            Gets or sets the value that represents the value which specifies the fill color to be used in between the tiles. 
            </summary>
      <value>Represents the value that specifies the fill color to be used in between the tiles. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand.Flags">
      <summary>
            Gets or sets the enumeration that contains all flags that are needed by the RomanMosaicCommand.
            It is indicate the values used to select the shape of the tiles and the type of
            shadow.
            </summary>
      <value>Enumeration contains all flags that are needed by the RomanMosaicCommand.
            It is indicate the values used to select the shape of the tiles and the type of
            shadow.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand">
      <summary>
            Adds a pseudo-3D wave effect to the image by drawing lines across the image, basing the line's height at each point on its brightness at that point. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command adds a pseudo-3D wave effect to the image . It is similar to the Rutt-Etra Video Synthesizer. The Rutt-Etra video synthesizer was a processor that modulated the deflection lines of a television image so that they appeared to adopt the contours of objects. It was invented by Steve Rutt and Bill Etra in the 1970s.</description>
          </item>
          <item>
            <description>With this command, you set the maximum height to be used for the pixels with the maximum brightness value. The other pixel heights are calculated by linear interpolation. Each line is 1 pixel in width. Control the spacing between the lines that are drawn across the image with the LineSpace parameter.</description>
          </item>
          <item>
            <description>You can get a more stable wave by performing the following:<br /><list type="number"><item><description>Apply any type of blur like <see cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand" /> blur with a large radius value.</description></item><item><description>Apply the RevEffectCommand and pass a small value for the maximum height.</description></item><item><description>This command does not support 32-bit grayscale images.</description></item></list></description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RevEffectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RevEffectCommand = New RevEffectCommand
      command.LineSpace = 3
      command.MaximumHeight = 35
      'Apply Rev effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RevEffectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RevEffectCommand command = new RevEffectCommand();
         command.LineSpace = 3;
         command.MaximumHeight = 35;
         //Apply Rev effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RevEffectCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand" /> class object with explicit parameters.
            </summary>
      <param name="lineSpace">The space (in pixels) between each wave. This parameter only accepts positive values.</param>
      <param name="maximumHeight">The maximum height (in pixels) that the wave can reach. This parameter only accepts positive values.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RevEffectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RevEffectCommand = New RevEffectCommand(3, 35)
      ' Apply Rev effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RevEffectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RevEffectCommand command = new RevEffectCommand(3, 35);
         // Apply Rev effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.RevEffectCommand.RevEffectConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand.LineSpace">
      <summary>
            Gets or sets a value that indicates the space (in pixels) between each wave.
            </summary>
      <value>The space (in pixels) between each wave. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand.MaximumHeight">
      <summary>
            Gets or sets the maximum height (in pixels) that the wave  can reach.
            </summary>
      <value>The maximum height (in pixels) that the wave  can reach. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand">
      <summary>
            Places the image on parallel planes along the Z-axis. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command shows the effect of placing images on planes along the Z-axis and bending them toward a specific point. These images may be placed above, below, to the left or to the right of the Z-axis. An external light source of the specified color and brightness may be shined on the images. The brightness may vary along the z-axis according to the BrightLength value.</description>
          </item>
          <item>
            <description>By changing CenterPoint and the viewing screen Z-offset, you can simulate moving along the axis.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the region dimensions only.</description>
          </item>
          <item>
            <description>For an example, see the following figure:<br /><img src="Plane_before.jpg" /><br />The following figure shows the same image, after the effect has been applied: <br /><img src="Plane_after.jpg" /><br />To obtain this effect, the following settings were used with the command:<br /><list type="number"><item><description>CenterPoint = new LeadPoint(320, 256)</description></item><item><description>ZValue = 0</description></item><item><description>Distance = 256</description></item><item><description>PlaneOffset = 256</description></item><item><description>Repeat = -1</description></item><item><description>PyramidAngle = 0</description></item><item><description>Stretch = 100</description></item><item><description>StartBright = 0</description></item><item><description>EndBright = 0</description></item><item><description>BrightLength = 50</description></item><item><description>BrightColor = new <see cref="T:Leadtools.RasterColor" />(255, 255, 255)</description></item><item><description>FillColor = new <see cref="T:Leadtools.RasterColor" />(0, 0, 0)</description></item><item><description>Flags = <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags" />.Down | <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags" />.Color</description></item><item><description>This command does not support 32-bit grayscale images.</description></item></list></description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PlaneCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PlaneCommand = New PlaneCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.ZValue = 0
      command.Distance = leadImage.Height
      command.PlaneOffset = leadImage.Width \ 2
      command.Repeat = -1
      command.PyramidAngle = 0
      command.Stretch = 25
      command.StartBright = 0
      command.EndBright = 100
      command.BrightLength = 20000
      command.BrightColor = New RasterColor(255, 255, 255)
      command.FillColor = New RasterColor(0, 0, 0)
      command.Flags = PlaneCommandFlags.Right Or PlaneCommandFlags.Left Or PlaneCommandFlags.Color
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PlaneCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PlaneCommand command = new PlaneCommand();
         command.CenterPoint = new LeadPoint(image.Width / 2, image.Height / 2);
         command.ZValue = 0;
         command.Distance = image.Height;
         command.PlaneOffset = image.Width /2;
         command.Repeat = -1;
         command.PyramidAngle = 0;
         command.Stretch = 25;
         command.StartBright = 0;
         command.EndBright = 100;
         command.BrightLength = 20000;
         command.BrightColor = new RasterColor(255, 255, 255);
         command.FillColor = new RasterColor(0, 0, 0);
         command.Flags = PlaneCommandFlags.Right | PlaneCommandFlags.Left | PlaneCommandFlags.Color;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PlaneCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.SpecialEffects.PlaneCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand" /> class object with explicit parameters.
            </summary>
      <param name="centerPoint">Contains the point at which the camera or viewer is looking. This is also the point toward which the images will be bent. It may be outside the image borders.</param>
      <param name="zValue">Viewing screen offset on the Z-axis, in pixels.</param>
      <param name="distance">Camera distance from the viewing screen, in pixels.</param>
      <param name="planeOffset">Distance between the parallel planes. This property only accepts positive values.</param>
      <param name="repeat">Number of times the image repeats along the Z-axis. If repeat equals -1 the image will be infinitely repeated. Its range starts from -1.</param>
      <param name="pyramidAngle">The view angle, off the Z-axis. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000.</param>
      <param name="stretch">Value that indicates whether to expand or compress the image, and by how much. If Stretch &lt; 100 image will be expanded. If Stretch &gt; 100 the image will be compressed. Use 100 to maintain the image's dimensions. The value of this parameter is internally divided by 100. This parameter only accepts positive values.</param>
      <param name="startBright">Value that indicates the brightness of an external light source on the first image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</param>
      <param name="endBright">Value that indicates the brightness of an external light source on the last image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</param>
      <param name="brightLength">Value that indicates how much the brightness changes as you move along the Z axis. This property is internally multiplied by 50.</param>
      <param name="brightColor">Specifies the color of an external light source that shines on the displayed images.</param>
      <param name="fillColor">Specifies the background color.</param>
      <param name="flags">Flags that indicate the background color and the planes to be shown. You can use a bit wise OR (|) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PlaneConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PlaneCommand = New PlaneCommand(New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), 0, leadImage.Height, CType((leadImage.Width / 2), Integer), -1, 0, 25, 0, 100, 20000, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0), PlaneCommandFlags.Right Or PlaneCommandFlags.Left Or PlaneCommandFlags.Color)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PlaneConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PlaneCommand command = new PlaneCommand(new LeadPoint(image.Width / 2, image.Height / 2), 0, image.Height, image.Width / 2, -1, 0, 25, 0, 100, 20000, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0), PlaneCommandFlags.Right | PlaneCommandFlags.Left | PlaneCommandFlags.Color);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.PlaneCommand.PlaneConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.CenterPoint">
      <summary>
            Point structure that contains the point at which the camera or viewer is looking.
            </summary>
      <value>Point structure that contains the point at which the camera or viewer is looking. This is also the point toward which the images will be bent. It may be outside the image borders.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.ZValue">
      <summary>
            gets or sets the viewing screen offset on the Z-axis, in pixels.
            </summary>
      <value>Viewing screen offset on the Z-axis, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.Distance">
      <summary>
            Gets or sets the camera distance from the viewing screen, in pixels.
            </summary>
      <value>Camera distance from the viewing screen, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.PlaneOffset">
      <summary>
            Gets or sets the distance between the parallel planes.
            </summary>
      <value>Distance between the parallel planes. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.Repeat">
      <summary>
            Gets or sets the number of times the image repeats along the Z-axis.
            </summary>
      <value>Number of times the image repeats along the Z-axis. If Repeat equals -1 the image will be infinitely repeated. Its range starts from -1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.PyramidAngle">
      <summary>
            Gets or sets the view angle, off the Z-axis.
            </summary>
      <value>The view angle, off the Z-axis. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.Stretch">
      <summary>
            Gets or sets a value that indicates whether to expand or compress the image, and by how much.
            </summary>
      <value>Value that indicates whether to expand or compress the image, and by how much. If Stretch &lt; 100 image will be expanded. If Stretch &gt; 100 the image will be compressed. Use 100 to maintain the image's dimensions. The value of this property is internally divided by 100. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.StartBright">
      <summary>
            Gets or sets a value that indicates the brightness of an external light source on the first image displayed.
            </summary>
      <value>Value that indicates the brightness of an external light source on the first image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.EndBright">
      <summary>
            Gets or sets a value that indicates the brightness of an external light source on the last image displayed.
            </summary>
      <value>Value that indicates the brightness of an external light source on the last image displayed. Possible values range from 0 to 100. A value of 0 indicates no external light displayed on the image. A value of 100 indicates an external light source with full brightness is displayed on the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.BrightLength">
      <summary>
            Gets or sets a value that indicates how much the brightness changes as you move along the Z axis.
            </summary>
      <value>Value that indicates how much the brightness changes as you move along the Z axis. This property is internally multiplied by 50.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.BrightColor">
      <summary>
            Gets or sets the color of an external light source that shines on the displayed images.
            </summary>
      <value>The color of an external light source that shines on the displayed images.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.FillColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <value>The background color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand.Flags">
      <summary>
            Gets or sets flags that indicate the background color and the planes to be shown.
            </summary>
      <value>Flags that indicate the background color and the planes to be shown. You can use a bit wise OR (|) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommandFlags">
      <summary>
        <para>Flags that indicate the direction of the rays.</para>
      </summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Rays direction</td><td>Inside, Outside</td></tr><tr><td>Fill rays</td><td>Inner</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommandFlags.Inside">
      <summary>
            The rays are directed toward the center of the star.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommandFlags.Outside">
      <summary>
            The rays are directed out from the center of the star.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommandFlags.Inner">
      <summary>
            The rays fill the star outward from the center. This flag can only be used with Outside.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand">
      <summary>
            Draws a star on the image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DrawStarCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DrawStarCommand = New DrawStarCommand
      command.CenterPoint = New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2)
      command.Spoke = 5
      command.StarWidth = leadImage.Width \ 2
      command.StarHeight = leadImage.Height \ 2
      command.HoleSize = 50
      command.Phase = 0
      command.Angle = 0
      command.DistanceOpacity = 0
      command.SpokeDivision = 0
      command.AngleOpacity = 0
      command.BorderOpacity = 0
      command.LowerColorFill = New RasterColor(255, 0, 0)
      command.UpperColorFill = New RasterColor(0, 0, 255)
      command.Opacity = 100
      command.Flags = DrawStarCommandFlags.Inside

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DrawStarCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DrawStarCommand command = new DrawStarCommand();

         command.CenterPoint     = new LeadPoint(image.Width/2, image.Height/2);
         command.Spoke           = 5;
         command.StarWidth       = image.Width/2;
         command.StarHeight      = image.Height/2;
         command.HoleSize        = 50;
         command.Phase           = 0;
         command.Angle           = 0;
         command.DistanceOpacity = 0;
         command.SpokeDivision   = 0;
         command.AngleOpacity    = 0;
         command.BorderOpacity   = 0;
         command.LowerColorFill  = new RasterColor(255, 0, 0);
         command.UpperColorFill  = new RasterColor(0, 0, 255);
         command.Opacity         = 100;
         command.Flags           = DrawStarCommandFlags.Inside;

         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DrawStarCommand-->
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.#ctor">
      <summary>
            Initializes a new DrawStarCommand class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.#ctor(Leadtools.LeadPoint,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,Leadtools.ImageProcessing.SpecialEffects.DrawStarCommandFlags)">
      <summary>
            Initializes a new DrawStarCommand class object with explicit parameters.
            </summary>
      <param name="centerPoint">Point structure that contains the star center.</param>
      <param name="spoke">Number of spokes or rays directed inside or outside the star. This parameter only accepts positive values.</param>
      <param name="starWidth">Star width. This parameter only accepts positive values.</param>
      <param name="starHeight">Star height. This parameter only accepts positive values.</param>
      <param name="holeSize">The hole size. This value is given as a percent of the whole star from which the rays start or in which they end.  The valid range is from 0 to 100.</param>
      <param name="phase">Angle to shift the star's rays. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000. A positive value will rotate the rays clockwise, while a negative value will rotate the rays counter-clockwise. </param>
      <param name="angle">Angle to rotate the star. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000. A positive value will rotate the star clockwise, while a negative value will rotate the star counter-clockwise.</param>
      <param name="distanceOpacity">Percent of feathering in towards or outward from the spoke center. The valid range is from -100 to 100.</param>
      <param name="spokeDivision">The percent by which to increment or decrement the size of the low part spoke. The valid range is from -100 to 100.</param>
      <param name="angleOpacity">Percent of feathering in towards or outward from the spoke border. The valid range is from -100 to 100.</param>
      <param name="borderOpacity">Transparency, in percent, of the spoke border. The valid range is from -100 to 100.</param>
      <param name="lowerColorFill">Lower spoke side color.</param>
      <param name="upperColorFill">Upper spoke side color.</param>
      <param name="opacity">Transparency, in percent, between the star and the affected image. The valid range is from 0 to 100.</param>
      <param name="flags">Flags that indicate the direction of the rays.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DrawStarConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DrawStarCommand
      command = New DrawStarCommand(New LeadPoint(CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer)), 5, CType((leadImage.Width / 2), Integer), CType((leadImage.Height / 2), Integer), 50, 0, 0, 0, -50, -50, 50, New RasterColor(255, 0, 0), New RasterColor(0, 0, 255), 100, DrawStarCommandFlags.Inside)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DrawStarConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DrawStarCommand command = new DrawStarCommand( new LeadPoint(image.Width/2, image.Height/2), 5, image.Width/2, image.Height/2, 50, 0, 0, 0, -50, -50, 50, new RasterColor(255, 0, 0), new RasterColor(0, 0, 255), 100, DrawStarCommandFlags.Inside);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <!--ImageProcessing.SpecialEffects.DrawStarCommand.DrawStarConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.CenterPoint">
      <summary>
            Get or sets the point structure that contains the star center.
            </summary>
      <value>Pointe structure that contains the star center.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.Spoke">
      <summary>
            Gets or sets the number of spokes or rays directed inside or outside the star.
            </summary>
      <value>Number of spokes or rays directed inside or outside the star, This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.StarWidth">
      <summary>
            Gets or sets the star width.
            </summary>
      <value>Star width. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.StarHeight">
      <summary>
            Gets or sets the star height.
            </summary>
      <value>Star height. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.HoleSize">
      <summary>
            Gets or sets the hole size.
            </summary>
      <value>The hole size. This value is given as a percent of the whole star from which the rays start or in which they end. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.Phase">
      <summary>
            Gets or sets the angle to shift the star's rays.
            </summary>
      <value>Angle to shift the star's rays. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000. A positive value will rotate the rays clockwise, while a negative value will rotate the rays counter-clockwise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.Angle">
      <summary>
            Gets or sets the angle to rotate the star.
            </summary>
      <value>Angle to rotate the star. This value is given in hundredths of a degree (+/-). This can be a number from 0 to 36,000. A positive value will rotate the star clockwise, while a negative value will rotate the star counter-clockwise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.DistanceOpacity">
      <summary>
            Gets or sets the percent of feathering in towards or outward from the spoke center.
            </summary>
      <value>Percent of feathering in towards or outward from the spoke center. The valid range is from -100 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.SpokeDivision">
      <summary>
            Gets or sets the percent by which to increment or decrement the size of the low part spoke.
            </summary>
      <value>The percent by which to increment or decrement the size of the low part spoke. The valid range is from -100 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.AngleOpacity">
      <summary>
            Gets or sets the percent of feathering in towards or outward from the spoke border.
            </summary>
      <value>Percent of feathering in towards or outward from the spoke border. The valid range is from -100 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.BorderOpacity">
      <summary>
            Gets or sets the transparency, in percent, of the spoke border.
            </summary>
      <value>Transparency, in percent, of the spoke border. The valid range is from -100 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.LowerColorFill">
      <summary>
            Gets or sets the RasterColor object that specifies lower spoke side color.
            </summary>
      <value>RasterColor object that specifies lower spoke side color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.UpperColorFill">
      <summary>
            Gets or sets the RasterColor object that specifies upper spoke side color.
            </summary>
      <value>RasterColor object that specifies upper spoke side color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.Opacity">
      <summary>
            Gets or sets the transparency, in percent, between the star and the applied image.
            </summary>
      <value>Transparency, in percent, between the star and the applied image. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand.Flags">
      <summary>
            Flag that indicates the direction of the rays.
            </summary>
      <value>Flag that indicates the direction of the rays.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand" />.
            </example>
      <noremarks />
    </member>
  </members>
</doc>