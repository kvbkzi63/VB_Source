<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.ImageProcessing.Effects</name>
  </assembly>
  <members>
    <member name="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand">
      <summary>
            Detects the variation of colors in the specified direction using statistical indices. It is similar to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" />, 
            but this command allows you to specify the direction angle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The edges are detected by applying a statistical filter that analyzes the variations of colors in a specified direction around each pixel. </description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" /> on an image, to find it is edges.</para>
        <code lang="VB">   Public Sub DirectionEdgeStatisticalCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DirectionEdgeStatisticalCommand = New DirectionEdgeStatisticalCommand

      command.Dimension = 15
      command.Threshold = 128
      command.Angle = 4500
      command.EdgeColor = New RasterColor(255, 255, 255)
      command.BackGroundColor = New RasterColor(0, 0, 0)
      'Find the edges in the image. 
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)


      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DirectionEdgeStatisticalCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DirectionEdgeStatisticalCommand command = new DirectionEdgeStatisticalCommand();

         command.Dimension    = 15;
         command.Threshold    = 128;
         command.Angle        = 4500;
         command.EdgeColor       = new RasterColor(255, 255, 255);
         command.BackGroundColor = new RasterColor(0, 0, 0);

         //Find the edges in the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DirectionEdgeStatisticalCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         DirectionEdgeStatisticalCommand command = new DirectionEdgeStatisticalCommand();
         command.Dimension = 15;
         command.Threshold = 128;
         command.Angle = 4500;
         command.EdgeColor = new RasterColor(255, 255, 255);
         command.BackGroundColor = new RasterColor(0, 0, 0);

         //Find the edges in the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DirectionEdgeStatisticalCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As DirectionEdgeStatisticalCommand = New DirectionEdgeStatisticalCommand()
         command.Dimension = 15
         command.Threshold = 128
         command.Angle = 4500
         command.EdgeColor = New RasterColor(255, 255, 255)
         command.BackGroundColor = New RasterColor(0, 0, 0)

         'Find the edges in the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.#ctor">
      <summary>
            Initializes a new DirectionEdgeStatisticalCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor)">
      <summary>
            Initializes a new DirectionEdgeStatisticalCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="dimension">The dimension or the number of pixels used to calculate the edge in the specified direction, This parameter only accepts positive values.</param>
      <param name="threshold">Threshold value used to determine which pixels are edge pixels. If the difference in the intensity value between the pixel being tested and the average intensity of the pixels in the area specified in the dimension parameter around it is greater than this value, the pixel is an edge pixel. The threshold range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. The threshold is applied on channels separately.</param>
      <param name="angle">Value that represents the edge detector direction, in hundredths of degrees.  Valid values range from -18000  through 18000. Positive values are produced by counterclockwise rotation above the horizon and negative values are produced by clockwise rotation below the horizon. This value is divided internally by 100.</param>
      <param name="edgeColor">Edge color.</param>
      <param name="backGroundColor">Non edge color.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" /> on an image, to find it is edges.</para>
        <code lang="VB">   Public Sub DirectionEdgeStatisticalConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DirectionEdgeStatisticalCommand = New DirectionEdgeStatisticalCommand(20, 128, 3000, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0))
      ' Find the edges in the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DirectionEdgeStatisticalConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DirectionEdgeStatisticalCommand command = new DirectionEdgeStatisticalCommand(20, 128, 3000, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0));
         // Find the edges in the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DirectionEdgeStatisticalConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         DirectionEdgeStatisticalCommand command = new DirectionEdgeStatisticalCommand(20, 128, 3000, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0));
         // Find the edges in the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DirectionEdgeStatisticalConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As DirectionEdgeStatisticalCommand = New DirectionEdgeStatisticalCommand(20, 128, 3000, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0))
         ' Find the edges in the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.Dimension">
      <summary>
            Gets or sets the dimension or the number of pixels used to calculate the edge in the specified direction. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>The dimension or the number of pixels used to calculate the edge in the specified direction. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.Threshold">
      <summary>
            Gets or sets the threshold value used to determine which pixels are edge pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Threshold value used to determine which pixels are edge pixels. If the difference in the intensity value between the pixel being tested and the average intensity of the pixels in the area specifeid in the Dimension property around it is greater than this value, the pixel is an edge pixel. The threshold range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. The threshold is applied on channels separately.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.Angle">
      <summary>
            Gets or sets a value that specifies the edge detector direction, in hundredths of degrees.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that specifies the edge detector direction, in hundredths of degrees.  Valid values range from -18000  through 18000. Positive values are produced by counterclockwise rotation above the horizon and negative values are produced by clockwise rotation below the horizon. This value is divided internally by 100. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.EdgeColor">
      <summary>
            Gets or sets the edge color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Edge color. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand.BackGroundColor">
      <summary>
            Gets or sets the non-edge color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Non-edge color. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand">
      <summary>
            Smoothes the rough edges in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command performs edge detection, then smoothes those edges that are found. The other points of the image are unchanged.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /><br />
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br />
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SmoothEdgesCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SmoothEdgesCommand = New SmoothEdgesCommand
      command.Amount = 75
      command.Threshold = 0
      ' Apply the Smooth Edge effect to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SmoothEdgesCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SmoothEdgesCommand command = new SmoothEdgesCommand();
         command.Amount    = 75;
         command.Threshold = 0;
         // Apply the Smooth Edge effect to the image.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SmoothEdgesCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SmoothEdgesCommand command = new SmoothEdgesCommand();
         command.Amount = 75;
         command.Threshold = 0;
         // Apply the Smooth Edge effect to the image.
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SmoothEdgesCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SmoothEdgesCommand = New SmoothEdgesCommand()
         command.Amount = 75
         command.Threshold = 0
         ' Apply the Smooth Edge effect to the image.
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand.#ctor">
      <summary>
            Initializes a new SmoothEdgesCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new SmoothEdgesCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="amount">This is a percentage value that indicates blur size. 0 means no blurring and 100 means total blurring.</param>
      <param name="threshold">Threshold value used to determine which pixels are edge pixels. If the difference determined for a pixel is greater than this value, the pixel is an edge. Valid values range from 0 through 255.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SmoothEdgesConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SmoothEdgesCommand = New SmoothEdgesCommand(75, 0)
      ' Apply the Smooth Edge effect to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SmoothEdgesConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SmoothEdgesCommand command = new SmoothEdgesCommand(75, 0);
         // Apply the Smooth Edge effect to the image.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SmoothEdgesConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SmoothEdgesCommand command = new SmoothEdgesCommand(75, 0);
         // Apply the Smooth Edge effect to the image.
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SmoothEdgesConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SmoothEdgesCommand = New SmoothEdgesCommand(75, 0)
         ' Apply the Smooth Edge effect to the image.
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand.Amount">
      <summary>
            Gets or sets a percentage value that indicates blur size.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Percentage value that indicates blur size. 0 means no blurring and 100 means total blurring.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand.Threshold">
      <summary>
            Gets or sets the threshold value used to determine which pixels are edge pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Threshold value used to determine which pixels are edge pixels. If the difference determined for a pixel is greater than this value, the pixel is an edge. Valid values range from 0 through 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommandFlags">
      <summary>
            Enumerated values that indicate the required contour points.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.RegionContourPointsCommandFlags.All">
      <summary>
            Gets all region contour points ignoring their order.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.RegionContourPointsCommandFlags.Outside">
      <summary>
        <noremarks />
            Gets the outside region contour points only in an ordered way that allows you to reconstruct the outside region shape from these points.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand">
      <summary>
            Gets the contour coordinates of a region.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command works only on images having a region. If the image does not have a region the command returns the error: Not Initialized.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RegionContourPointsCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim rcRect As LeadRect = New LeadRect(leadImage.Width \ 3, leadImage.Height \ 3, leadImage.Width * 2 \ 3, leadImage.Height * 2 \ 3)
      leadImage.AddEllipseToRegion(Nothing, rcRect, RasterRegionCombineMode.Set)
      Dim command As RegionContourPointsCommand = New RegionContourPointsCommand(Nothing)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RegionContourPointsCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadRect rcRect = new LeadRect(image.Width/3, image.Height/3, image.Width*2/3, image.Height*2/3);
         image.AddEllipseToRegion(null, rcRect, RasterRegionCombineMode.Set);
         RegionContourPointsCommand command = new RegionContourPointsCommand(null);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand.#ctor">
      <summary>
            Initializes a new RegionContourPointsCommand class object with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RegionContourPointsConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim rcRect As LeadRect = New LeadRect(leadImage.Width \ 3, leadImage.Height \ 3, leadImage.Width * 2 \ 3, leadImage.Height * 2 \ 3)
      leadImage.AddEllipseToRegion(Nothing, rcRect, RasterRegionCombineMode.Set)
      Dim command As RegionContourPointsCommand = New RegionContourPointsCommand
      command.XForm = New RasterRegionXForm
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      Dim points() As LeadPoint = command.Points

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RegionContourPointsConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadRect rcRect = new LeadRect(image.Width/3, image.Height/3, image.Width*2/3, image.Height*2/3);
         image.AddEllipseToRegion(null, rcRect, RasterRegionCombineMode.Set);
         RegionContourPointsCommand command = new RegionContourPointsCommand();
         command.XForm = new RasterRegionXForm();
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         LeadPoint[] points = command.Points;

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand.#ctor(Leadtools.RasterRegionXForm)">
      <summary>
            Initializes a new RegionContourPointsCommand class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="xForm">RasterRegionXForm object that contains information used to translate between display coordinates and image coordinates. If you specify null in this parameter, the scalar value defaults to 1, the offsets default to 0, and the view perspective defaults to the image's view perspective.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand.Flags">
      <summary>
            Gets or sets the required contour points.
            </summary>
      <noremarks />
      <value>Value that represent the required contour points.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand.XForm">
      <summary>
            Gets or sets a RasterRegionXForm object used to translate between display coordinates and image coordinates.
            </summary>
      <noremarks />
      <value>RasterRegionXForm object used to translate between display coordinates and image coordinates. If you specify null in this property, the scalar value defaults to 1, the offsets default to 0, and the view perspective defaults to the image's view perspective.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand.Points">
      <summary>
            Gets or sets an array that contains the coordinate points of the contour for the region.
            </summary>
      <noremarks />
      <value>An array that that contains the coordinate points of the contour for the region. A memory buffer for this array is allocated by the command.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand">
      <summary>
            Extracts a message (text or file) from the image, if the image has an embedded message.
             This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> Toolkits.
            </summary>
      <keywords>Embedded messages|Messages|Lossless|BMP|TIFF|JPEG|Security|Extracting</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command is used to extract the message that was added to the image by the <see cref="T:Leadtools.ImageProcessing.Effects.AddMessageCommand" />.</description>
          </item>
          <item>
            <description>Before calling this command, set the password, the starting point, and the directory using the same information used for these when the message was added.</description>
          </item>
          <item>
            <description>This command can extract a message from any type of lossless image format such as bmp, tiff, lossless jpeg, and so forth. If used with lossy format types the message may be corrupted or lost.</description>
          </item>
          <item>
            <description>This method supports 24- and 48-bits images, and 8- and 16-bits grayscale images.</description>
          </item>
          <item>
            <description>Support for 16-bit grayscale and 48-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" /> on an image by loading an image that has an embedded message and extracts the message from it.</para>
        <code lang="VB">   Public Sub ExtractMessageCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      Dim addmessagecommand As AddMessageCommand = New AddMessageCommand
      addmessagecommand.Message = "LEAD Technologies, Inc."
      ' Add the above message to image in the default position and with the default password.
      addmessagecommand.Run(leadImage)
      ' Prepare the command

      Dim command As ExtractMessageCommand = New ExtractMessageCommand

      ' set password and start properties values same as AddMessageCommand values.
      command.Password = Nothing
      command.Start = New LeadPoint(0, 0)
      command.Directory = LeadtoolsExamples.Common.ImagesPath.Path

      ' Extract the message from the image in the default position and with the default password.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)


      If (Not (IsNothing(command.Message))) Then
         MessageBox.Show(command.Message, "Extracted Message")
      ElseIf (Not (IsNothing(command.FileName))) Then
         MessageBox.Show(command.FileName, "Extracted File")
      End If

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ExtractMessageCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg");

         // Prepare the command
         AddMessageCommand addmessageCommand = new AddMessageCommand();
         addmessageCommand.Password = null;
         addmessageCommand.Start = new LeadPoint(0, 0);
         addmessageCommand.Message = "LEAD Technologies, Inc.";
         // Add the above message to image in the default position and with the default password.
         addmessageCommand.Run(image);

         // Prepare the command
         ExtractMessageCommand command = new ExtractMessageCommand();

         // set password and start properties values same as AddMessageCommand values.
         command.Password    = null;
         command.Start = new LeadPoint(0, 0);
         command.Directory   = LeadtoolsExamples.Common.ImagesPath.Path + "";

         // Extract the message from the image in the default position and with the default password.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         if(command.Message != null &amp;&amp; command.Message.Length != 0)
            MessageBox.Show(command.Message, "Extracted Message");
         else  if (command.FileName != null &amp;&amp; command.FileName.Length != 0)
            MessageBox.Show(command.FileName, "Extracted File");


         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddMessageCommand">
      </seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.#ctor">
      <summary>
            Initializes a new ExtractMessageCommand class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.#ctor(System.String,System.String,Leadtools.LeadPoint)">
      <summary>
            Initializes a new ExtractMessageCommand class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="password">String that contains the password used when extracting the message from the image.</param>
      <param name="directory">String that contains the full path name of the directory in which to save the extracted file. 
            If the extracted message is a file this parameter is used to specify the path for saving the extracted file. 
            To save the extracted file using the original path, set this parameter to null. If the extracted message is text this parameter has no effect. </param>
      <param name="start">LeadPoint at which the message will be extracted from the image.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.Message">
      <summary>
            This property is updated with the text extracted from the image.
            </summary>
      <noremarks />
      <value>String that contains the text extracted from the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.Password">
      <summary>
            Gets or sets the password used when extracting the message from the image.
            </summary>
      <noremarks />
      <value>Password used when extracting the message from the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.Directory">
      <summary>
            Gets or sets the full path name of the directory in which to save the extracted file.
            </summary>
      <noremarks />
      <value>Full path name of the directory in which to save the extracted file. 
            If the extracted message is a file this property is used to specify the path for saving the extracted file. 
            To save the extracted file using the original path, set this property to null. If the extracted message is text this property has no effect. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.Start">
      <summary>
            Gets or sets the point at which the message will be extracted from the image.
            </summary>
      <noremarks />
      <value>LeadPoint at which the message will be extracted from the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ExtractMessageCommand.FileName">
      <summary>
            This property is updated with the name of the file extracted from an image. 
            </summary>
      <noremarks />
      <value>String that contains the name of the file that will be extracted from an image. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType">
      <summary>
            Flag that indicates the type of edge to generate.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.SobelVertical">
      <summary>
            Detect the vertical edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.SobelHorizontal">
      <summary>
            Detect the horizontal edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.SobelBoth">
      <summary>
            Detect horizontal and vertical edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.PrewittVertical">
      <summary>
            Detect the vertical edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.PrewittHorizontal">
      <summary>
            Detect the horizontal edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.PrewittBoth">
      <summary>
            Detect horizontal and vertical edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.Laplace1">
      <summary>
            Detect vertical and horizontal edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.Laplace2">
      <summary>
            Detect general edges
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.Laplace3">
      <summary>
            Detect general edges. (The filter used for this option is different than the filter used for the Laplace2 filter.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.LaplaceDiagonal">
      <summary>
            Detect the diagonal edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.LaplaceHorizontal">
      <summary>
            Detect the horizontal edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.LaplaceVertical">
      <summary>
            Detect the vertical edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientNorth">
      <summary>
            Detect north edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientNorthEast">
      <summary>
            Detect north east edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientEast">
      <summary>
            Detect east edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientSouthEast">
      <summary>
            Detect south east edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientSouth">
      <summary>
            Detect south edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientSouthWest">
      <summary>
            Detect south west edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientWest">
      <summary>
            Detect west edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType.GradientNorthWest">
      <summary>
            Detect north west edges.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand">
      <summary>
            Applies the specified edge filter to an image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document</see> Toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Filters such as Sobel filter, Prewitt filter, Laplacian filter, and Gradient filter are used to determine the pixels belonging to edges in the image.</description>
          </item>
          <item>
            <description>The threshold range for the 16, 48, and 64-bit images is from 0 to 65535 and for 12-bit images from 0 to 4095. Otherwise, it is from 0 to 255. The threshold is applied on channels separately.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand" /> on an image.</para>
        <code lang="VB">   Public Sub EdgeDetectorCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EdgeDetectorCommand = New EdgeDetectorCommand
      command.Threshold = 60
      command.Filter = EdgeDetectorCommandType.SobelBoth
      'find the edges of the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EdgeDetectorCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EdgeDetectorCommand command = new EdgeDetectorCommand();
         command.Threshold = 60;
         command.Filter = EdgeDetectorCommandType.SobelBoth;
         //find the edges of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EdgeDetectorCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EdgeDetectorCommand command = new EdgeDetectorCommand();
         command.Threshold = 60;
         command.Filter = EdgeDetectorCommandType.SobelBoth;
         //find the edges of the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EdgeDetectorCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EdgeDetectorCommand = New EdgeDetectorCommand()
         command.Threshold = 60
         command.Filter = EdgeDetectorCommandType.SobelBoth
         'find the edges of the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand.#ctor(System.Int32,Leadtools.ImageProcessing.Effects.EdgeDetectorCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="threshold">Threshold value used to determine which pixels are edge pixels. If the difference determined for a pixel is greater than this value, the pixel is an edge pixel. This parameter only accepts positive values.</param>
      <param name="filter">Flag that indicates which edge detection filter to apply.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand" /> on an image.</para>
        <code lang="VB">   Public Sub EdgeDetectorConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EdgeDetectorCommand
      command = New EdgeDetectorCommand(60, EdgeDetectorCommandType.Laplace2)
      ' find the edges of the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EdgeDetectorConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EdgeDetectorCommand command = new EdgeDetectorCommand(60, EdgeDetectorCommandType.Laplace2);
         // find the edges of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EdgeDetectorConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EdgeDetectorCommand command = new EdgeDetectorCommand(60, EdgeDetectorCommandType.Laplace2);
         // find the edges of the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EdgeDetectorConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EdgeDetectorCommand = New EdgeDetectorCommand(60, EdgeDetectorCommandType.Laplace2)
         ' find the edges of the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand.Threshold">
      <summary>
            Gets or sets the threshold value used to determine which pixels are edge pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Threshold value used to determine which pixels are edge pixels. If the difference determined for a pixel is greater than this value, the pixel is an edge pixel. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand.Filter">
      <summary>
            Flag that indicates which edge detection filter to apply.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Flag that indicates which edge detection filter to apply.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.CombineCommandFlags">
      <summary>
            Enumeration that indicates the treatment of the source, treatment of the destination, the operation to use when combining the data, and the treatment of the resulting image. The flags apply only to the defined rectangles (not necessarily the whole image).
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para><strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that define treatment of the source rectangle</td><td>SourceNop, SourceNot, Source0, Source1</td></tr><tr><td>Flags that define treatment of the destination rectangle</td><td>DestinationNop, DestinationNot, Destination0, Destination1</td></tr><tr><td>Flags that define the operation to use when combining the data</td><td>OperationAnd, OperationOr, OperationXor, OperationAdd, OperationSubtractSource, OperationSubtractDestination, OperationMultiply, OperationDivideSource, OperationDivideDestination, OperationAverage, OperationMinimum, OperationMaximum, AbsoluteDifference</td></tr><tr><td>Flags that define treatment of the resulting image rectangle</td><td>ResultNop, ResultNot, Result0, Result1</td></tr><tr><td>Flags that define the channel of the source image rectangle</td><td>SourceMaster, SourceRed, SourceGreen, SourceBlue</td></tr><tr><td>Flags that define the channel of the destination image rectangle</td><td>DestinationMaster, DestinationRed, DestinationGreen, DestinationBlue</td></tr><tr><td>Flags that define the channel of the resulting image rectangle</td><td>ResultMaster, ResultRed, ResultGreen, ResultBlue</td></tr></table>
            The flags will work with the following order:
            First the operations on source and destination  rectangles will take effect then the combining operation will 
            be implemented, then the operation on result rectangle will take effect.
            
            For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheCombineCommand">Flags for the CombineCommand</see>.
             </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.SourceNop">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.SourceNot">
      <summary>
            Invert the color, resulting in its complement.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.Source0">
      <summary>
            Change all bits to 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.Source1">
      <summary>
            Change all bits to 1.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.DestinationNop">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.DestinationNot">
      <summary>
            Invert the color, resulting in its complement.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.Destination0">
      <summary>
            Change all bits to 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.Destination1">
      <summary>
            Change all bits to 1.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationAnd">
      <summary>
            Combine each set of bytes using a bitwise AND.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationOr">
      <summary>
             Combine each set of bytes using a bitwise OR.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationXor">
      <summary>
            Combine each set of bytes using a bitwise exclusive OR (^).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationAdd">
      <summary>
            Add the byte values, allowing a maximum of 255.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationSubtractSource">
      <summary>
            Subtract the source from the destination, allowing a minimum of 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationSubtractDestination">
      <summary>
            Subtract the destination from the source, allowing a minimum of 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationMultiply">
      <summary>
            Multiply the byte values, allowing a maximum of 255. The result is calculated as follows: result = (source * destination) / 255.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationDivideSource">
      <summary>
            Divide the destination by the source. If source &gt; 0, then the result is calculated as follows: result = min( (destination / source) * 255, 255 ). Otherwise, if source = 0, then result = 255.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationDivideDestination">
      <summary>
            Divide the source by the destination. If dest &gt; 0, then the result is calculated as follows: result = min( (source / destination) * 255, 255 ). Otherwise, if destination = 0, then result = 255.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationAverage">
      <summary>
             Use the average of the two values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationMinimum">
      <summary>
             Use the lesser of the two values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.OperationMaximum">
      <summary>
            Use the greater of the two values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.ResultNop">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.ResultNot">
      <summary>
            Invert the color, resulting in its complement.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.Result0">
      <summary>
            Change all bits to 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.Result1">
      <summary>
            Change all bits to 1.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.SourceCopy">
      <summary>
            Copy source to destination.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.SourceMaster">
      <summary>
            Perform the operation on all channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.SourceRed">
      <summary>
            Perform the operation on the red channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.SourceGreen">
      <summary>
            Perform the operation on the green channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.SourceBlue">
      <summary>
            Perform the operation on the blue channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.DestinationMaster">
      <summary>
            Perform the operation on all channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.DestinationRed">
      <summary>
            Perform the operation on the red channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.DestinationGreen">
      <summary>
            Perform the operation on the green channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.DestinationBlue">
      <summary>
            Perform the operation on the blue channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.ResultMaster">
      <summary>
            Perform the operation on all channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.ResultRed">
      <summary>
            Perform the operation on the red channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.ResultGreen">
      <summary>
            Perform the operation on the green channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.ResultBlue">
      <summary>
            Perform the operation on the blue channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.AbsoluteDifference">
      <summary>
            Calculate the Absolute difference between the two values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CombineCommandFlags.RawCombine">
      <summary>
            Perform a raw combine.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.CombineCommand">
      <summary>
            Combines image data from two images (source and destination), letting you specify the areas to be combined, the operations to be performed when combining the data, and which color planes (R or G or B or R, G, and B) are used.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>For example, suppose you use the <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> to apply an edge detection filter. You can then use this command to combine the resulting image with the original one to produce an image with hard edges.</description>
          </item>
          <item>
            <description>This method combines the data byte-by-byte. The two images can be any color resolution. Images that are 24-bits per pixel are the easiest and fastest to combine. This command uses Windows-style coordinates (with a top-left origin) to specify the areas to be combined. </description>
          </item>
          <item>
            <description>If the channel setting for one of the images is the master channel (<see cref="T:Leadtools.ImageProcessing.Effects.CombineCommandFlags" />.SourceMaster, <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommandFlags" />.DestinationMaster, or <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommandFlags" />.ResultMaster) the settings for all the images will be set to master.</description>
          </item>
          <item>
            <description>If a region is defined for either the source or destination image, or both images, the combine applies only to the intersection of regions.</description>
          </item>
          <item>
            <description>For example, assume <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommandFlags" />.SourceRed is passed for the source image, <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommandFlags" />.DestinationBlue is passed for the destination image and <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommandFlags" />.ResultGreen is passed for the resulting image. In this case, the green channel of the resulting image is calculated as the result of the operations applied to the red channel of the source image and the blue channel of the destination image. The other channels of the resulting image are unchanged.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
          <item>
            <description>All images must be either signed or unsigned.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br />
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CombineCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As CombineCommand = New CombineCommand
      command.SourceImage = leadImage.Clone()
      command.DestinationRectangle = New LeadRect(leadImage.Width \ 8, leadImage.Height \ 8, leadImage.Width, leadImage.Height)
      command.SourcePoint = New LeadPoint(0, 0)
      command.Flags = CombineCommandFlags.OperationAdd Or CombineCommandFlags.Destination0 Or CombineCommandFlags.SourceRed Or CombineCommandFlags.DestinationGreen Or CombineCommandFlags.ResultBlue
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CombineCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         CombineCommand command = new CombineCommand();
         command.SourceImage = image.Clone();
         command.DestinationRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         command.SourcePoint = new LeadPoint(0, 0);
         command.Flags = CombineCommandFlags.OperationAdd | CombineCommandFlags.Destination0 | CombineCommandFlags.SourceRed | CombineCommandFlags.DestinationGreen | CombineCommandFlags.ResultBlue;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void CombineCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         CombineCommand command = new CombineCommand();
         command.SourceImage = image.Clone();
         command.DestinationRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         command.SourcePoint = new LeadPoint(0, 0);
         command.Flags = CombineCommandFlags.OperationAdd | CombineCommandFlags.Destination0 | CombineCommandFlags.SourceRed | CombineCommandFlags.DestinationGreen | CombineCommandFlags.ResultBlue;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CombineCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As CombineCommand = New CombineCommand()
         command.SourceImage = image.Clone()
         command.DestinationRectangle = New LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height)
         command.SourcePoint = New LeadPoint(0, 0)
         command.Flags = CombineCommandFlags.OperationAdd Or CombineCommandFlags.Destination0 Or CombineCommandFlags.SourceRed Or CombineCommandFlags.DestinationGreen Or CombineCommandFlags.ResultBlue
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.FlagsForTheCombineCommand">Flags for the CombineCommand</seealso>.
            <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ApplyTransformationParametersCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Core.CoreUtilities.GetRegistrationMarksCenterMass(Leadtools.RasterImage,Leadtools.LeadPoint[])"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SearchRegistrationMarksCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CombineCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CombineCommand.#ctor(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.LeadPoint,Leadtools.ImageProcessing.Effects.CombineCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="sourceImage">RasterImage object that references the source image, which is combined with the destination image.</param>
      <param name="destinationRectangle">LeadRect structure that contains the destination rectangle.</param>
      <param name="sourcePoint">LeadPoint structure that contains the origin of the source rectangle. The width and height of the source rectangle are the same as the destination rectangle.</param>
      <param name="flags">Flags from seven groups that define treatment of the source, treatment of the destination, the operation to use when combining the data, treatment of the resulting image, and the color plan for the destination, source and resulting images. The flags apply only to the defined rectangles (not necessarily the whole image). You can use a bitwise OR ( | ) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CombineConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim tempImage As RasterImage = leadImage.Clone()
      Dim rect As LeadRect = New LeadRect(CType((leadImage.Width / 8), Integer), CType((leadImage.Height / 8), Integer), leadImage.Width, leadImage.Height)
      Dim srcPoint As LeadPoint = New LeadPoint(0, 0)
      Dim command As CombineCommand = New CombineCommand(tempImage, rect, srcPoint, CombineCommandFlags.OperationAnd Or CombineCommandFlags.Destination1 Or CombineCommandFlags.SourceRed Or CombineCommandFlags.DestinationRed Or CombineCommandFlags.ResultBlue)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CombineConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterImage tempImage = image.Clone();
         LeadRect rect = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         LeadPoint srcPoint = new LeadPoint(0, 0);
         CombineCommand command = new CombineCommand(tempImage, rect, srcPoint,CombineCommandFlags.OperationAnd | CombineCommandFlags.Destination1 | CombineCommandFlags.SourceRed | CombineCommandFlags.DestinationRed | CombineCommandFlags.ResultBlue);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void CombineConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         RasterImage tempImage = image.Clone();
         LeadRect rect = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         LeadPoint srcPoint = new LeadPoint(0, 0);
         CombineCommand command = new CombineCommand(tempImage, rect, srcPoint, CombineCommandFlags.OperationAnd | CombineCommandFlags.Destination1 | CombineCommandFlags.SourceRed | CombineCommandFlags.DestinationRed | CombineCommandFlags.ResultBlue);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CombineConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim tempImage As RasterImage = image.Clone()
         Dim rect As LeadRect = New LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height)
         Dim srcPoint As LeadPoint = New LeadPoint(0, 0)
         Dim command As CombineCommand = New CombineCommand(tempImage, rect, srcPoint, CombineCommandFlags.OperationAnd Or CombineCommandFlags.Destination1 Or CombineCommandFlags.SourceRed Or CombineCommandFlags.DestinationRed Or CombineCommandFlags.ResultBlue)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CombineCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CombineCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CombineCommand.SourceImage">
      <summary>
            Gets or sets the RasterImage object that references the source image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>RasterImage object that references the source image, which is combined with the destination image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CombineCommand.DestinationRectangle">
      <summary>
            Gets or sets the rectangle structure that contains the destination rectangle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>LeadRect structure that contains the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CombineCommand.SourcePoint">
      <summary>
            Gets or sets a point structure that contains the origin of the source rectangle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>LeadPoint structure that contains the origin of the source rectangle. The width and height of the source rectangle are the same as the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CombineCommand.Flags">
      <summary>
            Gets or sets flags from seven groups that define treatment of the source, treatment of the destination, the operation to use when combining the data, treatment of the resulting image, and the color plan for the destination, source and resulting images.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that represent the flags.  The flags apply only to the defined rectangles (not necessarily the whole image). You can use a bitwise OR ( | ) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand">
      <summary>
            Shows the effect of using an enlarged halftone screen on each image 
            channel. The filter divides the image into rectangles and replaces 
            each rectangle with circles. Each channel has a separate grid of circles, and has its own angle setting. 
            The size of each circle is proportional to the brightness of the rectangle that it is replacing.  
            This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.
             <strong> Supported in Silverlight</strong>.
</summary>
      <keywords>Bitmaps|Effects|Artistic effects|Filters|Halftone screens</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>If the image has a region, this method works only on 
            the region. If the image does not have a region, this method works on the
            entire image.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorHalftoneCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Beauty16.jpg", 16, CodecsLoadByteOrder.BgrOrGray, 1, 1)

      ' Prepare the command
      Dim command As New ColorHalftoneCommand
      command.MaximumRadius = 15
      command.CyanAngle = 10800
      command.MagentaAngle = 16200
      command.YellowAngle = 9000
      command.BlackAngle = 4500
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorHalftoneCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Beauty16.jpg",16,CodecsLoadByteOrder.BgrOrGray,1,1);


         // Prepare the command
         ColorHalftoneCommand command  = new ColorHalftoneCommand();
         command.MaximumRadius = 15;
         command.CyanAngle = 10800;
         command.MagentaAngle = 16200;
         command.YellowAngle = 9000;
         command.BlackAngle = 4500;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorHalftoneCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorHalftoneCommand command = new ColorHalftoneCommand();
         command.MaximumRadius = 15;
         command.CyanAngle = 10800;
         command.MagentaAngle = 16200;
         command.YellowAngle = 9000;
         command.BlackAngle = 4500;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorHalftoneCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ColorHalftoneCommand = New ColorHalftoneCommand()
         command.MaximumRadius = 15
         command.CyanAngle = 10800
         command.MagentaAngle = 16200
         command.YellowAngle = 9000
         command.BlackAngle = 4500
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</seealso>.   /// <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorCountCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinMaxBitsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinMaxValuesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="M:Leadtools.RasterPalette.WindowLevelFillLookupTable(Leadtools.RasterColor[],Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> example.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="maximumRadius">Maximum dot(i.e. circle) size, in pixels. This value should not be less than 5.</param>
      <param name="cyanAngle">Cyan screen angle in a hundredths of degrees (+/-). A positive value will rotate the 
            screen clockwise, while a negative value will rotate the screen counter-clockwise. Valid values are from -36000 to + 36000.</param>
      <param name="magentaAngle">Magenta screen angle, in a hundredths of degrees (+/-). A positive value will rotate 
            the screen clockwise, while a negative value will rotate the screen counter-clockwise. Valid values are from -36000 to + 36000.</param>
      <param name="yellowAngle"> Yellow screen angle in a hundredths of degrees (+/-). A positive value will rotate the 
            screen clockwise, while a negative value will rotate the screen counter-clockwise. Valid values are from -36000 to + 36000.</param>
      <param name="blackAngle"> Black screen angle in a hundredths of degrees (+/-). A positive value will rotate the 
            screen clockwise, while a negative value will rotate the screen counter-clockwise. Valid values are from -36000 to + 36000.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorHalftoneConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Beauty16.jpg", 16, CodecsLoadByteOrder.BgrOrGray, 1, 1)

      ' Prepare the command
      Dim command As New ColorHalftoneCommand(15, 10800, 16200, 9000, 4500)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorHalftoneConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Beauty16.jpg", 16, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         // Prepare the command
         ColorHalftoneCommand command = new ColorHalftoneCommand(15,10800,16200, 9000, 4500);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorHalftoneConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorHalftoneCommand command = new ColorHalftoneCommand(15, 10800, 16200, 9000, 4500);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorHalftoneConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ColorHalftoneCommand = New ColorHalftoneCommand(15, 10800, 16200, 9000, 4500)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>string that is the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.MaximumRadius">
      <summary>
            Gets or sets a value that represents the maximum dot size, in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that represents the maximum dot size. This value should not be less than 5.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.CyanAngle">
      <summary>
            Gets or sets a value that represents the cyan screen angle in a hundredths of degrees (+/-).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value represents the cyan screen angle in a hundredths of degrees (+/-). 
            A positive value will rotate the screen clockwise, while a negative value
            will rotate the screen counter-clockwise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.MagentaAngle">
      <summary>
            Gets or sets a value that represents the magenta screen angle in a hundredths of degrees (+/-).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that represents the magenta screen angle in a hundredths of degrees (+/-). 
            A positive value will rotate the screen clockwise, while a negative value
            will rotate the screen counter-clockwise. Valid values are from -36000 to + 36000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.YellowAngle">
      <summary>
            Gets or sets a value that represents the yellow screen angle in a hundredths of degrees (+/-).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that represents the yellow screen angle in a hundredths of degrees (+/-). 
            A positive value will rotate the screen clockwise, while a negative value
            will rotate the screen counter-clockwise. Valid values are from -36000 to + 36000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand.BlackAngle">
      <summary>
            Gets or sets a value that represents the black screen angle in a hundredths of degrees (+/-).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value represents the black screen angle in a hundredths of degrees (+/-). 
            A positive value will rotate the screen clockwise, while a negative value
            will rotate the screen counter-clockwise. Valid values are from -36000 to + 36000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand" /> example.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.AddMessageCommand">
      <summary>
            Adds a message (text or file) to the image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> Toolkits.
            </summary>
      <keywords>Embedded messages|Messages|Lossless|BMP|TIFF|JPEG|Security|Adding</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>The purpose of this command is for security since the message added will be embedded into the image without 
            any visible changes and the resulting image has the same size as the original.</description>
          </item>
          <item>
            <description>This command can add a message to any type of lossless image such as BMP, TIFF, lossless JPEG, and so forth. 
            If used with lossy format types the message may be corrupted or lost.</description>
          </item>
          <item>
            <description>To extract the embedded message use <see cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand" />.</description>
          </item>
          <item>
            <description>This command supports 24- and 48-bits images, and 8- and 16-bits grayscale images</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AddMessageCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AddMessageCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AddMessageCommand = New AddMessageCommand
      command.Message = "LEAD Technologies, Inc."
      ' Add the above message to image in the default position and with the default password.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddMessageCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AddMessageCommand command = new AddMessageCommand();
         command.Message  = "LEAD Technologies, Inc.";
         // Add the above message to image in the default position and with the default password.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.ExtractMessageCommand">
      </seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddMessageCommand.#ctor">
      <summary>
            Initializes a new AddMessageCommand class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AddMessageCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddMessageCommand.#ctor(System.String,System.String,System.String,Leadtools.LeadPoint)">
      <summary>
            Initializes a new AddMessageCommand class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="message">String that will be added to the image. If you want to add a file, set this parameter to null. </param>
      <param name="password">String that contains the password that will be used when adding the message to the image. 
            To use the default password set this parameter to null. The default password is, "LEAD Technologies".</param>
      <param name="fileName">String that contains the name of the file that will be added to the image. 
            When adding a file to the image this string contains the name of the file that will be added, 
            and the message parameter must be set to null, otherwise this parameter has no effect. </param>
      <param name="start">LeadPoint at which the message will be added to the image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AddMessageCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AddMessageConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AddMessageCommand
      command = New AddMessageCommand("This is The Message", Nothing, Nothing, New LeadPoint(0, 0))
      ' Run the commnad.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddMessageConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AddMessageCommand command = new AddMessageCommand("This is The Message", null, null, new LeadPoint(0, 0));
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddMessageCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
            </summary>
      <noremarks />
      <returns>String that contains the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddMessageCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AddMessageCommand.Message">
      <summary>
            Gets or sets the string that will be added to the image.
            </summary>
      <noremarks />
      <value>String that will be added to the image. If you want to add a file, set this property to null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AddMessageCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AddMessageCommand.Password">
      <summary>
            Gets or sets the string that contains the password that will be used when adding the message to the image. 
            </summary>
      <noremarks />
      <value>Password that will be used when adding the message to the image. 
            To use the default password set this property to null. The default password is, "LEAD Technologies".</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Effects.AddMessageCommand.FileName" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AddMessageCommand.FileName">
      <summary>
            Gets or sets a string that contains the name of the file that will be added to the image.
            </summary>
      <noremarks />
      <value>String that contains the name of the file that will be added to the image. 
            When adding a message to the image this string contains the name of the file that will be added, 
            and the message property must be set to null, otherwise this parameter has no effect.</value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AddMessageCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FileNamePropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AddMessageCommand = New AddMessageCommand
      ' Assign the file name.
      command.FileName = LeadtoolsExamples.Common.ImagesPath.Path + "Message.txt"
      ' You must set this property to null.
      command.Message = Nothing
      ' Assign the password.
      command.Password = "LEAD Technologies"
      ' The starting point.
      command.Start = New LeadPoint(0, 0)
      ' Run the commnad.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FileNamePropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AddMessageCommand command = new AddMessageCommand();
         // Assign the file name.
         command.FileName = LeadtoolsExamples.Common.ImagesPath.Path + "Message.txt";
         // You must set this property to null.
         command.Message = null;
         // Assign the password.
         command.Password = "LEAD Technologies";
         // The starting point.
         command.Start = new LeadPoint(0, 0);
         // Run the commnad.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AddMessageCommand.Start">
      <summary>
            Gets or sets the point at which the message will be added to the image.
            </summary>
      <noremarks />
      <value>LeadPoint at which the message will be added to the image.</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Effects.AddMessageCommand.FileName" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand">
      <summary>
            Picturizes the image using a specific thumbnail image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The image, or selected region, is broken down into rectangles of size CellWidth x CellHeight. For each rectangle, the thumbnail image is corrected to approximate that rectangle, and inserted in the original image. Note that every rectangle is replaced by the same image.</description>
          </item>
          <item>
            <description>The lightness factor can be used to change the lightness of the big image by changing the lightness of each rectangle.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PicturizeListCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PicturizeListCommand = New PicturizeListCommand
      command.CellHeight = 20
      command.CellWidth = 15
      command.LightnessFactor = 200
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PicturizeListCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PicturizeListCommand command = new PicturizeListCommand();
         command.CellHeight      = 20;
         command.CellWidth       = 15;
         command.LightnessFactor = 200;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeListCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeListCommand.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="cellWidth">Width of the thumbnail image. This parameter only accepts positive values.</param>
      <param name="cellHeight">Height of the thumbnail image. This parameter only accepts positive values.</param>
      <param name="lightnessFactor">Value that represents how much to lighten the thumbnail image. Valid values are between 0 and 1000. This value is divided internally by 1000. Values between 0 and 499 darken the image. Values between 500 and 1000 lighten the image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" /> on an image.</para>
        <code lang="VB">   Public Sub PicturizeListConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PicturizeListCommand = New PicturizeListCommand(15, 20, 200)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PicturizeListConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PicturizeListCommand command = new PicturizeListCommand(15, 20, 200);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeListCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeListCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.PicturizeListCommand.CellWidth">
      <summary>
            Gets or sets the width of the thumbnail image.
            </summary>
      <noremarks />
      <value>Width of the thumbnail image. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.PicturizeListCommand.CellHeight">
      <summary>
            Gets or sets the height of the thumbnail image.
            </summary>
      <noremarks />
      <value>Height of the thumbnail image. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.PicturizeListCommand.LightnessFactor">
      <summary>
            Gets or sets a value that represents how much to lighten the thumbnail image.
            </summary>
      <noremarks />
      <value>Value that represents how much to lighten the thumbnail image. Valid values are between 0 and 1000. This value is divided internally by 1000. Values between 0 and 499 darken the image. Values between 500 and 1000 lighten the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommandType">
      <summary>
            Enumeration that indicates which mask to use in the convolution process.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.MaskConvolutionCommandType.Emboss">
      <summary>
            Apply the Emboss Mask on the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.MaskConvolutionCommandType.EdgeDetection">
      <summary>
            Apply the Edge Detection Mask on the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.MaskConvolutionCommandType.EmbossSplotch">
      <summary>
            Apply the Emboss-Splotch Mask on the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.MaskConvolutionCommandType.Splotch">
      <summary>
            Apply the Splotch Mask on the image.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand">
      <summary>
            Applies various 3d effects to an image. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>For EdgeDetection, the results are the same for opposite angles. For example, angles 0 and 180 have 
            the same result when used with the edge detection mask.</description>
          </item>
          <item>
            <description>When an image undergoes image convolution each pixel of the image is multiplied by a mask to create 
            a new pixel value. The mask is an array of values that describes the weight that should be given to each of the pixels 
            surrounding a specific pixel. The new pixel value is the result of the mask sum being divided by the mask weight. 
            Using different masks result in different alterations of the image. The masks used in this command result in different 
            types of edge detection.</description>
          </item>
          <item>
            <description>As an example of the different masks, consider the following example:<br /><img src="maskconvolution.jpg" /></description>
          </item>
          <item>
            <description>To obtain these images, the following settings were used:<br /><table><tr><td><b>Parameters</b></td><td><b>Emboss</b></td><td><b>Edge</b></td><td><b>ESplotch</b></td><td><b>Splotch</b></td></tr><tr><td><i>Angle</i></td><td>0</td><td>0</td><td>180</td><td>0</td></tr><tr><td><i>Depth</i></td><td>3</td><td>3</td><td>3</td><td>3</td></tr><tr><td><i>Height</i></td><td>250</td><td>250</td><td>100</td><td>100</td></tr></table><br /></description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only 
            in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand" /> on an image.</para>
        <code lang="VB">   Public Sub MaskConvolutionCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As New MaskConvolutionCommand

      ' Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
      ' depth of 1.50, and height of 3
      command.Angle = 0
      command.Depth = 150
      command.Height = 3
      command.Type = MaskConvolutionCommandType.Emboss
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MaskConvolutionCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MaskConvolutionCommand command = new MaskConvolutionCommand();

         // Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
         // depth of 1.50, and height of 3
         command.Angle = 0;
         command.Depth = 150;
         command.Height = 3;
         command.Type = MaskConvolutionCommandType.Emboss;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void MaskConvolutionCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         MaskConvolutionCommand command = new MaskConvolutionCommand();
         // Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
         // depth of 1.50, and height of 3
         command.Angle = 0;
         command.Depth = 150;
         command.Height = 3;
         command.Type = MaskConvolutionCommandType.Emboss;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub MaskConvolutionCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As MaskConvolutionCommand = New MaskConvolutionCommand()
         ' Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
         ' depth of 1.50, and height of 3
         command.Angle = 0
         command.Depth = 150
         command.Height = 3
         command.Type = MaskConvolutionCommandType.Emboss
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
            /// <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.#ctor">
      <summary>
            Initializes a new MaskConvolutionCommand with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand" /> example.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.MaskConvolutionCommandType)">
      <summary>
            Initializes a new MaskConvolutionCommand with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="angle">Angle of apparent light source, in hundredths of degrees. Possible values range from -36000 to 36000.</param>
      <param name="depth">The depth of the 3D effect. (This value is divided internally by 100). This value is used as a multiplier for the individual mask values.</param>
      <param name="height">Non-zero value greater than 2, that represents the height of the mask matrix.  This value determines the height of the 3D effect. 
            The larger the value, the more complex and time-consuming the operations will be.</param>
      <param name="type">Flag that indicates which mask to use in the convolution process.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand" /> on an image.</para>
        <code lang="VB">   Public Sub MaskConvolutionConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      ' Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
      ' depth of 1.50, and height of 3
      Dim command As MaskConvolutionCommand = New MaskConvolutionCommand(0, 150, 3, MaskConvolutionCommandType.Emboss)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MaskConvolutionConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         // Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
         // depth of 1.50, and height of 3
         MaskConvolutionCommand command = new MaskConvolutionCommand(0, 150, 3, MaskConvolutionCommandType.Emboss);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void MaskConvolutionConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         // Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
         // depth of 1.50, and height of 3
         MaskConvolutionCommand command = new MaskConvolutionCommand(0, 150, 3, MaskConvolutionCommandType.Emboss);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub MaskConvolutionConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         ' Apply 3D emboss effect on the image, with 0 degrees as the angle of apparent light,
         ' depth of 1.50, and height of 3
         Dim command As MaskConvolutionCommand = New MaskConvolutionCommand(0, 150, 3, MaskConvolutionCommandType.Emboss)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.Angle">
      <summary>
            Gets or sets the angle of apparent light source, in hundredths of degrees.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Angle of apparent light source, in hundredths of degrees. Possible values range from -36000 to 36000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.Depth">
      <summary>
            Gets or sets the depth of the 3d effect.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>The depth of the 3D effect. (This value is divided internally by 100). This value is used as a multiplier for the individual mask values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.Height">
      <summary>
            Gets or sets the height of the 3D effect.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Non-zero value greater than 2, that represents the height of the mask.  This value determines the height of the 3D effect. The larger the value, the more complex and time-consuming the operations will be.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand.Type">
      <summary>
            Gets or sets the mask to use in the convolution process.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Enumeration that indicates which mask to use in the convolution process.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand" /> example.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.GaussianCommand">
      <summary>
            Smooths or blurs an image by applying a Gaussian filter to the specified image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Each pixel in the image is blurred based on neighborhood pixels. The radius value determines the size of the neighborhood to consider when blurring a pixel. The result is a blurred version of the original image.</description>
          </item>
          <item>
            <description>The amount of blur is controlled by specifying the size of the neighborhood used for blurring or smoothing. The value of the Radius property determines the size and values of the mask.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand" /> on an image and applies the Gaussian filter.</para>
        <code lang="VB">   Public Sub GaussianCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GaussianCommand = New GaussianCommand
      command.Radius = 20
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GaussianCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GaussianCommand command = new GaussianCommand();
         command.Radius = 20;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GaussianCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GaussianCommand command = new GaussianCommand();
         command.Radius = 20;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GaussianCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GaussianCommand = New GaussianCommand()
         command.Radius = 20
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.GaussianCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.GaussianCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="radius">Value that indicates the radius of the neighborhood on which the filter is applied.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand" /> on an image and applies the Gaussian filter.</para>
        <code lang="VB">   Public Sub GaussianConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GaussianCommand = New GaussianCommand(20)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GaussianConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GaussianCommand command = new GaussianCommand(20);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GaussianConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GaussianCommand command = new GaussianCommand(20);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GaussianConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GaussianCommand = New GaussianCommand(20)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.GaussianCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.GaussianCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.GaussianCommand.Radius">
      <summary>
            Gets or sets a value that indicates the radius of the neighborhood on which the filter is applied.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the radius of the neighborhood on which the filter is applied.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand">
      <summary>
            Computes the Feret's diameter of an object (the maximum distance between the points of the perimeter of the region), and finds its end points. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command calculates the Feret's Diameter (caliper length), the longest distance between any two points along the boundary.  This is equivalent to the minimum diameter of a tube through which this object can pass.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FeretsDiameterCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim rcRect As LeadRect = New LeadRect(leadImage.Width \ 4, leadImage.Height \ 4, leadImage.Width * 3 \ 4, leadImage.Height * 3 \ 4)
      leadImage.AddEllipseToRegion(Nothing, rcRect, RasterRegionCombineMode.Set)

      Dim contourcommand As RegionContourPointsCommand = New RegionContourPointsCommand(Nothing)

      contourcommand.Run(leadImage)
      Dim command As FeretsDiameterCommand = New FeretsDiameterCommand(contourcommand.Points)
      command.Run()
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FeretsDiameterCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadRect rcRect = new LeadRect(image.Width / 4, image.Height / 4, image.Width * 3 / 4, image.Height * 3 / 4);
         image.AddEllipseToRegion(null, rcRect, RasterRegionCombineMode.Set); 

         RegionContourPointsCommand contourcommand = new RegionContourPointsCommand(null);
         if (contourcommand != null)
         {
            contourcommand.Run(image);
            codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         }
         FeretsDiameterCommand command = new FeretsDiameterCommand(contourcommand.Points);
         command.Run();

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FeretsDiameterConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim rcRect As LeadRect = New LeadRect(leadImage.Width \ 4, leadImage.Height \ 4, leadImage.Width * 3 \ 4, leadImage.Height * 3 \ 4)
      leadImage.AddEllipseToRegion(Nothing, rcRect, RasterRegionCombineMode.Set)

      Dim contourcommand As RegionContourPointsCommand = New RegionContourPointsCommand(Nothing)
      contourcommand.Run(leadImage)
      Dim command As FeretsDiameterCommand = New FeretsDiameterCommand
      command.Points = contourcommand.Points
      MessageBox.Show("The length of the Feret's diameter is: " &amp; command.FeretsDiameter)
      MessageBox.Show("The index of the first end point of the Feret's diameter is: " &amp; command.FirstIndex)
      MessageBox.Show("The index of the second end point of the Feret's diameter is: " &amp; command.SecondIndex)
      command.Run()
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FeretsDiameterConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadRect rcRect = new LeadRect(image.Width / 4, image.Height / 4, image.Width * 3 / 4, image.Height * 3 / 4);
         image.AddEllipseToRegion(null, rcRect, RasterRegionCombineMode.Set); 

         RegionContourPointsCommand contourcommand = new RegionContourPointsCommand(null);
         if (contourcommand != null)
         {
            contourcommand.Run(image);
            codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         }

         FeretsDiameterCommand command = new FeretsDiameterCommand();
         command.Points = contourcommand.Points;

         MessageBox.Show("The length of the Feret's diameter is: " + command.FeretsDiameter + "\n" + "The index of the first end point of the Feret's diameter is: " + command.FirstIndex + "\n" + "The index of the second end point of the Feret's diameter is: " + command.SecondIndex);
         command.Run();

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.#ctor(Leadtools.LeadPoint[])">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="points">An array of object contour coordinate points.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.Run">
      <summary>
            Apply the method.
            </summary>
      <noremarks />
      <returns>1     the command was successful <br /> &lt; 1   An error occurred. </returns>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.FeretsDiameter">
      <summary>
            A property to be updated with the length of the Feret's diameter.
            </summary>
      <noremarks />
      <value>The length of the Feret's diameter. The length is measured in pixels and is internally multiplied by 1000. Divide this value by 1000 to obtain the real length.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.#ctor">FeretsDiameterCommand()</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.FirstIndex">
      <summary>
            A property to be updated with the index of the first end point of the Feret's diameter.
            </summary>
      <noremarks />
      <value>Index of the first end point of the Feret's diameter.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.#ctor">FeretsDiameterCommand()</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.SecondIndex">
      <summary>
            A property to be updated with the index of the second end point of the Feret's diameter.
            </summary>
      <noremarks />
      <value>Index of the second end point of the Feret's diameter.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.#ctor">FeretsDiameterCommand()</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.Points">
      <summary>
            Gets or sets an array of object contour coordinate points.
            </summary>
      <noremarks />
      <value>An array of object contour coordinate points.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand.#ctor">FeretsDiameterCommand()</see></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand">
      <summary>
            Applies a filter, which creates the illusion of movement in an image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" /> on an image and creates motion blur.</para>
        <code lang="VB">   Public Sub MotionBlurCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MotionBlurCommand = New MotionBlurCommand
      command.Dimension = 20
      command.Angle = 4500
      command.UniDirection = False
      ' blur the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MotionBlurCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MotionBlurCommand command = new MotionBlurCommand();
         command.Dimension    = 20;
         command.Angle        = 4500;
         command.UniDirection = false;
         //blur the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MotionBlurCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="dimension">Size of the blur effect, in pixels. This parameter only accepts positive values.</param>
      <param name="angle">Value that represents the direction of the motion, in hundredths of a degree (+/-) This value can be a number from 0 to 36000. If the value is positive, the motion will be clockwise. If the value is negative, the motion is counter-clockwise.</param>
      <param name="uniDirection">Flag that indicates whether the motion extends only in one direction. Possible values are:<br /><br /><table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td>true</td><td>The motion blur effect is only in the direction specified in angle.</td></tr><tr><td>false</td><td>The motion blur effect is along the line with that angle. For example, if angle is 0, the blur effect will occur in the 0 degree direction and the 180 degree direction.</td></tr></table></param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" /> on an image and creates motion blur.</para>
        <code lang="VB">   Public Sub MotionBlurConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MotionBlurCommand = New MotionBlurCommand(20, 4500, False)
      ' blur the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MotionBlurConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MotionBlurCommand command = new MotionBlurCommand(20, 4500, false);
         // blur the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MotionBlurCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MotionBlurCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MotionBlurCommand.Dimension">
      <summary>
            Gets or sets the size of the blur effect.
            </summary>
      <noremarks />
      <value> Size of the blur effect, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MotionBlurCommand.Angle">
      <summary>
            Gets or sets a value that represents the direction of the motion.
            </summary>
      <noremarks />
      <value> Value that represents the direction of the motion, in hundredths of a degree (+/-) This value can be a number from 0 to 36000. If the value is positive, the motion will be clockwise. If the value is negative, the motion is counter-clockwise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MotionBlurCommand.UniDirection">
      <summary>
            Gets or sets a flag that indicates whether the motion extends only in one direction.
            </summary>
      <noremarks />
      <value>Flag that indicates whether the motion extends only in one direction. Possible values are:<br /><br /><table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td>true</td><td>The motion blur effect is only in the direction specified in the Angle property.</td></tr><tr><td>false</td><td>The motion blur effect is along the line with that angle. For example, if the Angle property is 0, the blur effect will occur in the 0 degree direction and the 180 degree direction.</td></tr></table></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.ContourFilterCommandType">
      <summary>
            This enumeration controls the resulting image by telling the method what 
            process to complete before returning.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.ContourFilterCommandType.Thin">
      <summary>
            return after the thinning algorithm.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.ContourFilterCommandType.LinkBlackWhite">
      <summary>
            return after contour linking, using only black and white.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.ContourFilterCommandType.LinkGray">
      <summary>
             return after contour linking, using 256 grayscale.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.ContourFilterCommandType.LinkColor">
      <summary>
            return after contour linking, using colors.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.ContourFilterCommandType.ApproxColor">
      <summary>
             return after line segment approximation, using colors.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand">
      <summary>
            Performs a contour segment filter on the source image. This command is 
            available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Medical</see> Toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The bits per pixel of the affected image will change 
            according to the value of Type property, or the type parameter of the constructor as follows:
            <br /><table><tr><td>If the type is</td><td>Bits per pixel will be:</td></tr><tr><td>Thin</td><td>8 bits per pixel grayscale</td></tr><tr><td>LinkBlackWhite</td><td>1 bit per pixel</td></tr><tr><td>LinkGray</td><td>8 bits per pixel grayscale</td></tr><tr><td>LinkColor</td><td>8 bits per pixel color</td></tr><tr><td>ApproxColor</td><td>8 bits per pixel color</td></tr></table></description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Supportfor 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ContourFilterCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ContourFilterCommand = New ContourFilterCommand
      command.Threshold = 15
      command.DeltaDirection = 35
      command.MaximumError = 5
      command.Type = ContourFilterCommandType.Thin

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ContourFilterCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Beauty16.jpg", 16, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         // Prepare the command
         ContourFilterCommand command = new ContourFilterCommand();
         command.Threshold = 15;
         command.DeltaDirection = 35;
         command.MaximumError = 5;
         command.Type = ContourFilterCommandType.Thin;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ContourFilterCommand.#ctor">
      <summary>
            Initializes a new ContourFilterCommand class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ContourFilterCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.ContourFilterCommandType)">
      <summary>
            Initializes a new ContourFilterCommand class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="threshold">Threshold of the gradient magnitude. Values 
            below this will be considered as background, and will be set to 0. 
            Values can be from 1 to 254.  A lower threshold provides a better 
            quality image. Default is 15.</param>
      <param name="deltaDirection">Maximum angle for the thinning algorithm.
            Values can be from 1 to 64. Default is 35.</param>
      <param name="maximumError">Maximum error for approximation algorithm. Values can be from 0 
            to 255. Default is 5. This parameter is only valid if the type parameter 
            is set to ApproxColor.</param>
      <param name="type">Flag that controls the resulting image. This
            value tells the command what process to complete before returning.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand" /> on an image with LinkColor Option.</para>
        <code lang="VB">   Public Sub ContourFilterConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ContourFilterCommand
      command = New ContourFilterCommand(15, 35, 5, ContourFilterCommandType.LinkColor)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ContourFilterConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Beauty16.jpg", 16, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         // Prepare the command
         ContourFilterCommand command = new ContourFilterCommand(15, 35, 5, ContourFilterCommandType.LinkColor);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ContourFilterCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ContourFilterCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ContourFilterCommand.Threshold">
      <summary>
            Gets or sets the threshold of the gradient magnitude.
            </summary>
      <noremarks />
      <value>Threshold of the gradient magnitude. Values below this will be 
            considered as background, and will be set to 0. Values can be from 1 
            to 254.  A lower threshold provides a better quality image. Default 
            is 15.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ContourFilterCommand.DeltaDirection">
      <summary>
            Gets or sets the maximum angle for the thinning algorithm.
            </summary>
      <noremarks />
      <value>Maximum angle for the thinning algorithm. Values can be from 1 to 
            64. Default is 35.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ContourFilterCommand.MaximumError">
      <summary>
            Gets or sets the maximum error for the approximation algorithm.
            </summary>
      <noremarks />
      <value>Maximum error for the approximation algorithm. Values can be from 0 
            to 255. Default is 5. This property is only valid if the Type property is
            set to ApproxColor.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ContourFilterCommand.Type">
      <summary>
            Gets or sets a value that controls the resulting image. 
            </summary>
      <noremarks />
      <value>Enumerated value that controls the resulting image. This value tells
            the method what process to complete before returning.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ContourFilterCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType">
      <summary>
            Enumerated values that indicate the type of anti-aliasing filter to use.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType.Type1">
      <summary>
            Anti-alias the image vertically and horizontally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType.Type2">
      <summary>
            Anti-alias the image in all directions.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType.Type3">
      <summary>
            Anti-alias the image in all directions. The filter used for this option is different from the filter used for the Type2 option.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType.Diagonal">
      <summary>
             Anti-alias the image diagonally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType.Horizontal">
      <summary>
            Anti-alias the image horizontally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType.Vertical">
      <summary>
            Anti-alias the image vertically.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand">
      <summary>
            Applies an anti-aliasing filter to the specified image. This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document</see> Toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The best results for anti-aliasing text can be obtained with the filter <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommandType" />.Type2.</description>
          </item>
          <item>
            <description>The value of the Dimension property determines the extent of the anti-aliasing.</description>
          </item>
          <item>
            <description>The threshold range for 16, 48 and 64-bit images is from 0 to 65535 and for 12-bit images the threshold range is from 0 to 4095. Otherwise, it is from 0 to 255. The threshold is applied on channels separately.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. And can process the whole image or a region of the image. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" /> on an image and does anti-aliasing on it.</para>
        <code lang="VB">   Public Sub AntiAliasingCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AntiAliasingCommand = New AntiAliasingCommand
      'do the anti-aliasing on the image.
      command.Threshold = 25
      command.Dimension = 7
      command.Filter = AntiAliasingCommandType.Type1
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AntiAliasingCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AntiAliasingCommand command = new AntiAliasingCommand();
         //do the anti-aliasing on the image.
         command.Threshold = 25;
         command.Dimension = 7;
         command.Filter = AntiAliasingCommandType.Type1;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AntiAliasingCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AntiAliasingCommand command = new AntiAliasingCommand();
         //do the anti-aliasing on the image.
         command.Threshold = 25;
         command.Dimension = 7;
         command.Filter = AntiAliasingCommandType.Type1;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AntiAliasingCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AntiAliasingCommand = New AntiAliasingCommand()
         'do the anti-aliasing on the image.
         command.Threshold = 25
         command.Dimension = 7
         command.Filter = AntiAliasingCommandType.Type1
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AntiAliasingCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AntiAliasingCommand.#ctor(System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.AntiAliasingCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="threshold">Threshold value that indicates which pixels to smooth. The application of the anti-aliasing filter on the image associates a value with each pixel. Only pixels with values above this threshold are smoothed. This parameter only accepts positive values.</param>
      <param name="dimension">Value that indicates the size of the anti-aliasing mask. For example, a value of three indicates an anti-aliasing mask of 3 X 3. This parameter only accepts positive values.</param>
      <param name="filter">Flag that indicates the type of anti-aliasing filter to use.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" /> on an image and does anti-aliasing on it.</para>
        <code lang="VB">   Public Sub AntiAliasingConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim threshold As Integer = 25
      Dim dimension As Integer = 7

      Dim command As AntiAliasingCommand = New AntiAliasingCommand(threshold, dimension, AntiAliasingCommandType.Type1)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AntiAliasingConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int threshold = 25;
         int dimension = 7;
         AntiAliasingCommand command = new AntiAliasingCommand(threshold, dimension, AntiAliasingCommandType.Type1);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AntiAliasingConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int threshold = 25;
         int dimension = 7;
         AntiAliasingCommand command = new AntiAliasingCommand(threshold, dimension, AntiAliasingCommandType.Type1);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AntiAliasingConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim threshold As Integer = 25
         Dim dimension As Integer = 7
         Dim command As AntiAliasingCommand = New AntiAliasingCommand(threshold, dimension, AntiAliasingCommandType.Type1)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AntiAliasingCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AntiAliasingCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AntiAliasingCommand.Threshold">
      <summary>
            Gets or sets the threshold value that indicates which pixels to smooth.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Threshold value that indicates which pixels to smooth. The application of the anti-aliasing filter on the image associates a value with each pixel. Only pixels with values above this threshold are smoothed. This parameter only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AntiAliasingCommand.Dimension">
      <summary>
            Gets or sets a value that indicates the size of the anti-aliasing mask.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the size of the anti-aliasing mask. For example, a value of three indicates an anti-aliasing mask of 3 X 3. This parameter only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AntiAliasingCommand.Filter">
      <summary>
            Gets or sets a value that indicates the type of anti-aliasing filter to use.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the type of anti-aliasing filter to use.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AntiAliasingCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand">
      <summary>
            Picturizes the image using a specific thumbnail image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The image, or selected region, is broken down into rectangles of size cell width x cell height. For each rectangle, the thumbnail image is corrected to approximate that rectangle, and inserted in the original image. Note that every rectangle is replaced by the same image.</description>
          </item>
          <item>
            <description>The LightnessFactor can be used to change the lightness of the big image by changing the lightness of each rectangle.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" /> on an image and picturize it with the same image.</para>
        <code lang="VB">   Public Sub PicturizeSingleCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PicturizeSingleCommand = New PicturizeSingleCommand
      command.CellWidth = 20
      command.CellHeight = 15
      command.LightnessFactor = 200
      command.ThumbImage = leadImage
      'Picturize the bitmap.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PicturizeSingleCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PicturizeSingleCommand command = new PicturizeSingleCommand();
         command.CellWidth = 20;
         command.CellHeight = 15;
         command.LightnessFactor = 200;
         command.ThumbImage = image;
         //Picturize the bitmap.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.PicturizeListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.#ctor(Leadtools.RasterImage,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="thumbImage">RasterImage object that references the image used to create the thumbnail.</param>
      <param name="cellWidth">Width of the thumbnail image. This parameter only accepts positive values.</param>
      <param name="cellHeight">Height of the thumbnail image. This parameter only accepts positive values.</param>
      <param name="lightnessFactor">Value that represents how much to lighten the thumbnail image. Valid values are between 0 and 1000. This value is divided internally by 1000. Values between 0 and 499 darken the image. Values between 500 and 1000 lighten the image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" /> on an image and picturize it with the same image.</para>
        <code lang="VB">   Public Sub PicturizeSingleConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PicturizeSingleCommand = New PicturizeSingleCommand(leadImage, 20, 15, 200)
      'Picturize the bitmap.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PicturizeSingleConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PicturizeSingleCommand command = new PicturizeSingleCommand(image, 20,15,200);
         //Picturize the bitmap.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.ThumbImage">
      <summary>
            Gets or sets an RasterImage object that references the image used to create the thumbnail.
            </summary>
      <noremarks />
      <value>RasterImage object that references the image used to create the thumbnail.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.CellWidth">
      <summary>
            Gets or sets the width of the thumbnail image.
            </summary>
      <noremarks />
      <value>Width of the thumbnail image. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.CellHeight">
      <summary>
            Gets or sets the height of the thumbnail image.
            </summary>
      <noremarks />
      <value>Height of the thumbnail image. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand.LightnessFactor">
      <summary>
            Gets or sets a value that represents how much to lighten the thumbnail image.
            </summary>
      <noremarks />
      <value>Value that represents how much to lighten the thumbnail image. Valid values are between 0 and 1000. This value is divided internally by 1000. Values between 0 and 499 darken the image. Values between 500 and 1000 lighten the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.PicturizeSingleCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand">
      <summary>
            Combines image data from two images with feathering. The two images can be combined with variable opacity applied by specifying the region of a fade mask image. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>To combine two images with a fixed opacity, use the <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" />.</description>
          </item>
          <item>
            <description>The FeatherAlphaBlendCommand achieves feathering between two images by using variable opacity values, obtained from the fade mask referenced by <see cref="P:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.MaskImage" />. Use the <see cref="P:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.MaskSourcePoint" /> to specify a region of the mask image, these values are the coordinates of the origin of the mask rectangle.</description>
          </item>
          <item>
            <description>To create an image that contains a fade mask, use <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommand" /> command.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FeatherAlphaBlendCommandExample()
      ' Load an image
      RasterCodecs.Startup()
      Dim codecs As RasterCodecs = New RasterCodecs()
      Dim backgroundImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path &amp; "Image1.cmp")
      Dim sourceImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path &amp; "LittleGFlyingAlpha.png", 32, CodecsLoadByteOrder.Bgr, 1, 1)
      Dim command As FeatherAlphaBlendCommand = New FeatherAlphaBlendCommand()
      command.DestinationRectangle = New LeadRect(0, 0, sourceImage.Width, sourceImage.Height)
      command.MaskImage = sourceImage.CreateAlphaImage()
      command.SourceImage = sourceImage
      command.SourcePoint = New LeadPoint(0, 0)
      command.Run(backgroundImage)
      codecs.Save(backgroundImage, LeadtoolsExamples.Common.ImagesPath.Path &amp; "Result.jpg", RasterImageFormat.Jpeg, 24)
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FeatherAlphaBlendCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         RasterImage backgroundImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image1.cmp");
         RasterImage sourceImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "LittleGFlyingAlpha.png", 32, CodecsLoadByteOrder.Bgr, 1, 1);
         FeatherAlphaBlendCommand command = new FeatherAlphaBlendCommand();
         command.DestinationRectangle = new LeadRect(0, 0, sourceImage.Width, sourceImage.Height);
         command.MaskImage = sourceImage.CreateAlphaImage();
         command.SourceImage = sourceImage;
         command.SourcePoint = new LeadPoint(0, 0);
         command.Run(backgroundImage);
         codecs.Save(backgroundImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void FeatherAlphaBlendCommandExample(RasterImage image, RasterImage maskImage, RasterImage sourceImage, Stream outStream)
      {
         FeatherAlphaBlendCommand command = new FeatherAlphaBlendCommand();
         command.DestinationRectangle = new LeadRect(0, 0, image.Width / 2, image.Height / 2);
         command.MaskImage = maskImage;
         command.SourcePoint = new LeadPoint(image.Width / 2, image.Height / 2);
         command.SourceImage = sourceImage;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         maskImage.Dispose();
         sourceImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub FeatherAlphaBlendCommandExample(ByVal image As RasterImage, ByVal maskImage As RasterImage, ByVal sourceImage As RasterImage, ByVal outStream As Stream)
         Dim command As FeatherAlphaBlendCommand = New FeatherAlphaBlendCommand()
         command.DestinationRectangle = New LeadRect(0, 0, image.Width / 2, image.Height / 2)
         command.MaskImage = maskImage
         command.SourcePoint = New LeadPoint(image.Width / 2, image.Height / 2)
         command.SourceImage = sourceImage
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         maskImage.Dispose()
         sourceImage.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
            The default parameters values are:
            <list type="table"><item><term>sourceImage</term><description>null</description></item><item><term>maskImage</term><description>null</description></item><item><term>destinationRectangle</term><description>LeadRect(0, 0, 100, 100)</description></item><item><term>sourcePoint</term><description>LeadPoint(0, 100)</description></item><item><term>maskSourcePoint</term><description>LeadPoint(0, 0)</description></item></list></remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> class.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.#ctor(Leadtools.RasterImage,Leadtools.LeadPoint,Leadtools.LeadRect,Leadtools.RasterImage)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="sourceImage">RasterImage object that references the source image.</param>
      <param name="sourcePoint">LeadPoint structure that contains the origin of the source rectangle. The width and height are the same width and height for the destination rectangle.</param>
      <param name="destinationRectangle">LeadRect structure that contains the destination rectangle.</param>
      <param name="maskImage">RasterImage object that references the fade mask. If you want to combine the two images just with opacity set this property to null.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FeatherAlphaBlendConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Try
         Dim maskImage As RasterImage
         ' Loading the maskimage.
         maskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Dim command As FeatherAlphaBlendCommand = New FeatherAlphaBlendCommand(leadImage, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), New LeadRect(0, 0, leadImage.Width \ 2, leadImage.Height \ 2), maskImage)
         command.Run(leadImage)
         codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      Catch ex As Exception
         MessageBox.Show(ex.Message)
      End Try

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FeatherAlphaBlendConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         try
         {
            RasterImage maskImage;
            // Loading the maskimage.
            maskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1);
            FeatherAlphaBlendCommand command = new FeatherAlphaBlendCommand(image, new LeadPoint(image.Width / 2, image.Height / 2), new LeadRect(0, 0, image.Width / 2, image.Height / 2), maskImage);
            command.Run(image);
            codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         }    
         catch(Exception exception)
         {
            MessageBox.Show(exception.Message);
         }

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void FeatherAlphaBlendConstructorExample_S1(RasterImage image, RasterImage maskImage, Stream outStream)
      {
         // Prepare the command
         FeatherAlphaBlendCommand command = new FeatherAlphaBlendCommand(image, new LeadPoint(image.Width / 2, image.Height / 2), new LeadRect(0, 0, image.Width / 2, image.Height / 2), maskImage);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         maskImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub FeatherAlphaBlendConstructorExample_S1(ByVal image As RasterImage, ByVal maskImage As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As FeatherAlphaBlendCommand = New FeatherAlphaBlendCommand(image, New LeadPoint(image.Width / 2, image.Height / 2), New LeadRect(0, 0, image.Width / 2, image.Height / 2), maskImage)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         maskImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.#ctor(Leadtools.RasterImage,Leadtools.LeadPoint,Leadtools.LeadRect,Leadtools.RasterImage,Leadtools.LeadPoint)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="sourceImage">RasterImage object that references the source image.</param>
      <param name="sourcePoint">LeadPoint structure that contains the origin of the source rectangle. The width and height are the same width and height for the destination rectangle.</param>
      <param name="destinationRectangle">LeadRect structure that contains the destination rectangle.</param>
      <param name="maskImage">RasterImage object that references the fade mask. If you want to combine the two images just with opacity set this property to null.</param>
      <param name="maskSourcePoint">LeadPoint structure that contains the origin of the mask rectangle. The width and height for the mask rectangle are the same width and height for the destination rectangle.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FeatherAlphaBlendConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Try
         Dim maskImage As RasterImage
         ' Loading the maskimage.
         maskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Dim command As FeatherAlphaBlendCommand = New FeatherAlphaBlendCommand(leadImage, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2), New LeadRect(0, 0, leadImage.Width \ 2, leadImage.Height \ 2), maskImage, New LeadPoint(leadImage.Width \ 2, leadImage.Height \ 2))
         command.Run(leadImage)
         codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      Catch ex As Exception
         MessageBox.Show(ex.Message)
      End Try

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FeatherAlphaBlendConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         try
         {
            RasterImage maskImage;
            // Loading the maskimage.
            maskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1);
            FeatherAlphaBlendCommand command = new FeatherAlphaBlendCommand(image, new LeadPoint(image.Width / 2, image.Height / 2), new LeadRect(0, 0, image.Width / 2, image.Height / 2), maskImage, new LeadPoint(image.Width / 2, image.Height / 2));
            command.Run(image);
            codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         }
         catch (Exception exception)
         {
            MessageBox.Show(exception.Message);
         }

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void FeatherAlphaBlendConstructorExample_S2(RasterImage image, RasterImage maskImage, Stream outStream)
      {
         // Prepare the command
         FeatherAlphaBlendCommand command = new FeatherAlphaBlendCommand(image, new LeadPoint(image.Width / 2, image.Height / 2), new LeadRect(0, 0, image.Width / 2, image.Height / 2), maskImage, new LeadPoint(image.Width / 2, image.Height / 2));
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         maskImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub FeatherAlphaBlendConstructorExample_S2(ByVal image As RasterImage, ByVal maskImage As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As FeatherAlphaBlendCommand = New FeatherAlphaBlendCommand(image, New LeadPoint(image.Width / 2, image.Height / 2), New LeadRect(0, 0, image.Width / 2, image.Height / 2), maskImage, New LeadPoint(image.Width / 2, image.Height / 2))
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         maskImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.SourceImage">
      <summary>
            Gets or set the RasterImage object that references the source image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>RasterImage object that references the source image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.MaskImage">
      <summary>
            Gets or sets the RasterImage object that references the fade mask.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>RasterImage object that references the fade mask. If you want to combine the two images with opacity only, set this property to null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.DestinationRectangle">
      <summary>
            Rectangle structure the contains the destination rectangle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>LeadRect structure that contains the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.SourcePoint">
      <summary>
            Gets or sets the origin of the source rectangle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Origin of the source rectangle. The width and height are the same width and height for the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand.MaskSourcePoint">
      <summary>
            Gets or sets the origin of the mask rectangle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Origin of the mask rectangle. The width and height are the same width and height for the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.DisplacementCommandFlags">
      <summary>
            Flags that indicate how to handle exposed areas, and the way to use the displacement map image. 
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para><strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how to handle exposed areas</td><td>Color, Repeat, NoChange, WrapAround</td></tr><tr><td>Flags that indicate the way to use the displacement map image</td><td>StretchToFit, Tile</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DisplacementCommandFlags.Color">
      <summary>
             Fill any exposed areas with fillColor.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DisplacementCommandFlags.Repeat">
      <summary>
             Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DisplacementCommandFlags.NoChange">
      <summary>
             Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DisplacementCommandFlags.WrapAround">
      <summary>
             Fill any exposed area with the opposite side of the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DisplacementCommandFlags.StretchToFit">
      <summary>
             Stretch the displacement map image over the entire image area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DisplacementCommandFlags.Tile">
      <summary>
             Repeat the displacement map image to cover the image area.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.DisplacementCommand">
      <summary>
            Displaces image pixels horizontally and vertically according to the values of the displacement map image. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command shifts image pixels according to the values of the displacement map. Red values in the 
            displacement map shift the original pixels horizontally. Green values in the displacement map shift the original values 
            vertically. Blue values are ignored. A displacement map value of 128 means not to shift anything.  A displacement map 
            value of 0 means to shift pixels the complete vertical or horizontal percentage, to the left or down. A displacement 
            map value of 255 means to shift pixels the complete vertical or horizontal percentage, to the right or up.</description>
          </item>
          <item>
            <description>Displacement maps modify the geometry of the object. As a result, pixel shifts and forms may be 
            added to the image, and the image may be warped or distorted.</description>
          </item>
          <item>
            <description>As an example, if you use the following image:<br /><img src="ColorBalance_Befor_1.jpg"><br />
            And you were to use the following image as your displacement map:<br /><img src="displacementmap.jpg"><br />
            And you were to call DisplacementCommand using the following settings:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>HorizontalFactor</td><td>17</td></tr><tr><td>VerticalFactor</td><td>24</td></tr><tr><td>FillColor</td><td>na</td></tr><tr><td>Flags</td><td>DisplacementCommandFlags.NoChange | DisplacementCommandFlags.StretchToFit</td></tr></table><br />
            The following figure results:<br /><img src="displacementmapafter.jpg" /></img></img></description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64 bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> on an image and applies the Displace Map filter.</para>
        <code lang="VB">   Public Sub DisplacementCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim fillColor As RasterColor = New RasterColor(0, 0, 0)
      Dim command As DisplacementCommand = New DisplacementCommand

      command.DisplacementMapImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "slave.jpg")
      command.HorizontalFactor = 17
      command.VerticalFactor = 24
      command.FillColor = fillColor
      command.Flags = DisplacementCommandFlags.NoChange Or DisplacementCommandFlags.StretchToFit
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DisplacementCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor fillColor = new RasterColor(0, 0, 0);
         DisplacementCommand command = new DisplacementCommand();

         command.DisplacementMapImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "slave.jpg");
         command.HorizontalFactor = 17;
         command.VerticalFactor = 24;
         command.FillColor = fillColor;
         command.Flags = DisplacementCommandFlags.NoChange | DisplacementCommandFlags.StretchToFit;
         command.Run (image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DisplacementCommandExample(RasterImage image, RasterImage displacementMapImage, Stream outStream)
      {
         // Prepare the command
         RasterColor fillColor = new RasterColor(0, 0, 0);
         DisplacementCommand command = new DisplacementCommand();
         command.DisplacementMapImage = displacementMapImage;
         command.HorizontalFactor = 17;
         command.VerticalFactor = 24;
         command.FillColor = fillColor;
         command.Flags = DisplacementCommandFlags.NoChange | DisplacementCommandFlags.StretchToFit;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         displacementMapImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DisplacementCommandExample(ByVal image As RasterImage, ByVal displacementMapImage As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim fillColor As RasterColor = New RasterColor(0, 0, 0)
         Dim command As DisplacementCommand = New DisplacementCommand()
         command.DisplacementMapImage = displacementMapImage
         command.HorizontalFactor = 17
         command.VerticalFactor = 24
         command.FillColor = fillColor
         command.Flags = DisplacementCommandFlags.NoChange Or DisplacementCommandFlags.StretchToFit
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         displacementMapImage.Dispose()
      End Sub</code>
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DisplacementCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> example.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DisplacementCommand.#ctor(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.Effects.DisplacementCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="displacementMapImage">The displacement map image.</param>
      <param name="horizontalFactor">Horizontal displacement factor, in percent of the image dimensions. The valid range is from 0 to 100.</param>
      <param name="verticalFactor">Vertical displacement factor, in percent of the image dimensions. The valid range is from 0 to 100.</param>
      <param name="fillColor">The RasterColor value that specifies the fill color for any exposed areas.</param>
      <param name="flags">Flags that indicate how to handle exposed areas, and the way to use the displacement map image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> on an image and applies the Displace Map filter.</para>
        <code lang="VB">   Public Sub DisplacementConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim fillColor As RasterColor = New RasterColor(0, 0, 0)
      Dim displaceImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "slave.jpg")
      Dim command As DisplacementCommand = New DisplacementCommand(displaceImage, 17, 24, fillColor, DisplacementCommandFlags.NoChange Or DisplacementCommandFlags.StretchToFit)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DisplacementConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor fillColor = new RasterColor(0, 0, 0);
         RasterImage displaceImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "slave.jpg");

         DisplacementCommand command = new DisplacementCommand(displaceImage, 17, 24, fillColor, DisplacementCommandFlags.NoChange | DisplacementCommandFlags.StretchToFit);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DisplacementConstructorExample(RasterImage image, RasterImage displaceImage, Stream outStream)
      {
         // Prepare the command
         RasterColor fillColor = new RasterColor(0, 0, 0);
         DisplacementCommand command = new DisplacementCommand(displaceImage, 17, 24, fillColor, DisplacementCommandFlags.NoChange | DisplacementCommandFlags.StretchToFit);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         displaceImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DisplacementConstructorExample(ByVal image As RasterImage, ByVal displaceImage As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim fillColor As RasterColor = New RasterColor(0, 0, 0)
         Dim command As DisplacementCommand = New DisplacementCommand(displaceImage, 17, 24, fillColor, DisplacementCommandFlags.NoChange Or DisplacementCommandFlags.StretchToFit)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         displaceImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DisplacementCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DisplacementCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DisplacementCommand.DisplacementMapImage">
      <summary>
            Gets or sets the value that indicates the displacement image handle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the displacement image handle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DisplacementCommand.HorizontalFactor">
      <summary>
            Gets or sets the value that indicates the horizontal displacement factor, in percent of the image dimensions.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the horizontal displacement factor, in percent of the image dimensions. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DisplacementCommand.VerticalFactor">
      <summary>
            Gets or sets the value that indicates the vertical displacement factor, in percent of the image dimensions.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the vertical displacement factor, in percent of the image dimensions. The valid range is from 0 to 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DisplacementCommand.FillColor">
      <summary>
            Gets or sets the value that indicates the RasterColor value that specifies the fill color for any exposed areas.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the RasterColor value that specifies the fill color for any exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DisplacementCommand.Flags">
      <summary>
            Gets or sets the value that indicates the how to handle exposed areas, and the way to use the displacement map image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the how to handle exposed areas, and the way to use the displacement map image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand" /> example.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EmbossCommandDirection">
      <summary>
            Enumerated values used to determine the direction of the apparent light source.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.North">
      <summary>
            North.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.NorthEast">
      <summary>
            Northeast.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.East">
      <summary>
            East.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.SouthEast">
      <summary>
            Southeast.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.South">
      <summary>
            South.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.SouthWest">
      <summary>
            Southwest.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.West">
      <summary>
            West.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EmbossCommandDirection.NorthWest">
      <summary>
            Northwest.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EmbossCommand">
      <summary>
            Applies an emboss effect to an image, letting you specify the depth and 
            direction of the effect.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand" /> on an image and embosses it.</para>
        <code lang="VB">   Public Sub EmbossCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EmbossCommand = New EmbossCommand
      'Emboss with northeast direction and average depth.
      command.Direction = EmbossCommandDirection.North
      command.Depth = 500

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EmbossCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EmbossCommand command  = new EmbossCommand();
         //Emboss with northeast direction and average depth.
         command.Direction      = EmbossCommandDirection.North;
         command.Depth          = 500;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EmbossCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EmbossCommand command = new EmbossCommand();
         //Emboss with northeast direction and average depth.
         command.Direction = EmbossCommandDirection.North;
         command.Depth = 500;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EmbossCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EmbossCommand = New EmbossCommand()
         'Emboss with northeast direction and average depth.
         command.Direction = EmbossCommandDirection.North
         command.Depth = 500
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EmbossCommand.#ctor">
      <summary>
            Initializes a new EmbossCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EmbossCommand.#ctor(Leadtools.ImageProcessing.Effects.EmbossCommandDirection,System.Int32)">
      <summary>
            Initializes a new EmbossCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="direction">The direction of the apparent light source. 
            Only positive values are accepted.</param>
      <param name="depth">The apparent depth of this three-dimensional 
            effect. Valid values are 0 to 1000, with 500 as normal.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand" /> on an image and embosses it.</para>
        <code lang="VB">   Public Sub EmbossConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EmbossCommand
      command = New EmbossCommand(EmbossCommandDirection.North, 750)
      ' Emboss with northeast direction and 3 / 4  depth.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EmbossConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EmbossCommand command = new EmbossCommand(EmbossCommandDirection.North, 750);
         // Emboss with northeast direction and 3 / 4 depth.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EmbossConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EmbossCommand command = new EmbossCommand(EmbossCommandDirection.North, 750);
         // Emboss with northeast direction and 3 / 4 depth.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EmbossConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EmbossCommand = New EmbossCommand(EmbossCommandDirection.North, 750)
         ' Emboss with northeast direction and 3 / 4 depth.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EmbossCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EmbossCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EmbossCommand.Direction">
      <summary>
            Gets or sets a value that represents the direction of the apparent light source.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that represents the direction of the apparent light source.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EmbossCommand.Depth">
      <summary>
            Gets or sets a value that represents the apparent depth of this three-dimensional effect.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that represents the apparent depth of this three-dimensional effect. Valid values are 0 to 1000, with 500 as normal.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.AverageCommand">
      <summary>
            Changes the color of each pixel in an image to the average color of pixels in its neighborhood. This results in a blur effect.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>You control the amount of blur by specifying the size of the neighborhood that is used for averaging. </description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AverageCommand" /> on an image with a neighborhood Dimensions = 3x3 pixels.</para>
        <code lang="VB">   Public Sub AverageCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AverageCommand = New AverageCommand
      ' Average with a neighborhood of 3x3 pixels 
      command.Dimension = 3

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AverageCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AverageCommand command = new AverageCommand();
         // Average with a neighborhood of 3x3 pixels 
         command.Dimension = 3;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AverageCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AverageCommand command = new AverageCommand();
         // Average with a neighborhood of 3x3 pixels 
         command.Dimension = 3;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AverageCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AverageCommand = New AverageCommand()
         ' Average with a neighborhood of 3x3 pixels 
         command.Dimension = 3
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AverageCommand.#ctor">
      <summary>
            Initializes a new AverageCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AverageCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AverageCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new AverageCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="dimension">Size of the averaging neighborhood. It is the length, in pixels, of one side of a square.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AverageCommand" /> on an image with a neighborhood Dimensions = 3x3 pixels.</para>
        <code lang="VB">   Public Sub AverageConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim dimension As Integer = 3
      Dim command As AverageCommand = New AverageCommand(dimension)
      ' Average with a neighborhood of dimension x dimension pixels 
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AverageConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int dimension = 3;
         AverageCommand command = new AverageCommand(dimension);
         // Average with a neighborhood of dimension x dimension pixels 
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AverageConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int dimension = 3;
         AverageCommand command = new AverageCommand(dimension);
         // Average with a neighborhood of dimension x dimension pixels 
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AverageConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim dimension As Integer = 3
         Dim command As AverageCommand = New AverageCommand(dimension)
         ' Average with a neighborhood of dimension x dimension pixels 
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AverageCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AverageCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AverageCommand.Dimension">
      <summary>
            Gets or sets the size of the averaging neighborhood.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Size of the averaging neighborhood. It is the length, in pixels, of one side of a square.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AverageCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand">
      <summary>
            Detects edges by examining the variation of colors in all directions using statistical indices.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The edges are detected by applying a statistical filter that analyzes the variations of colors in all directions around each pixel.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" /> on an image.</para>
        <code lang="VB">   Public Sub EdgeDetectStatisticalCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EdgeDetectStatisticalCommand = New EdgeDetectStatisticalCommand
      command.Dimension = 15
      command.Threshold = 128
      command.EdgeColor = New RasterColor(255, 255, 255)
      command.BackGroundColor = New RasterColor(0, 0, 0)
      ' Apply an edge detector statistical command.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EdgeDetectStatisticalCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EdgeDetectStatisticalCommand command = new EdgeDetectStatisticalCommand();
         command.Dimension       = 15;
         command.Threshold       = 128;
         command.EdgeColor       = new RasterColor(255, 255, 255);
         command.BackGroundColor = new RasterColor(0, 0, 0);
         // Apply an edge detector statistical command.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EdgeDetectStatisticalCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EdgeDetectStatisticalCommand command = new EdgeDetectStatisticalCommand();
         command.Dimension = 15;
         command.Threshold = 128;
         command.EdgeColor = new RasterColor(255, 255, 255);
         command.BackGroundColor = new RasterColor(0, 0, 0);
         // Apply an edge detector statistical command.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EdgeDetectStatisticalCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EdgeDetectStatisticalCommand = New EdgeDetectStatisticalCommand()
         command.Dimension = 15
         command.Threshold = 128
         command.EdgeColor = New RasterColor(255, 255, 255)
         command.BackGroundColor = New RasterColor(0, 0, 0)
         ' Apply an edge detector statistical command.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.#ctor">
      <summary>
            Initializes a new EdgeDetectStatisticalCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.#ctor(System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor)">
      <summary>
            Initializes a new EdgeDetectStatisticalCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="dimension">Dimensions of the neighborhood used to detect edges (Dimension x Dimension), in pixels. This parameter only accepts positive values.</param>
      <param name="threshold">Threshold value used to determine which pixels are edge pixels. 
            If the difference determined by the edge detector algorithm for a pixel is greater than this value, 
            the pixel is an edge pixel. This parameter only accepts positive values.</param>
      <param name="edgeColor">Edge color.</param>
      <param name="backGroundColor">Non edge color.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" /> on an image.</para>
        <code lang="VB">   Public Sub EdgeDetectStatisticalConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EdgeDetectStatisticalCommand
      command = New EdgeDetectStatisticalCommand(5, 100, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0))
      ' Apply an edge detector statistical command.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EdgeDetectStatisticalConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EdgeDetectStatisticalCommand command = new EdgeDetectStatisticalCommand(5, 100, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0));
         // Apply an edge detector statistical command.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EdgeDetectStatisticalConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EdgeDetectStatisticalCommand command = new EdgeDetectStatisticalCommand(5, 100, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0));
         // Apply an edge detector statistical command.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EdgeDetectStatisticalConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EdgeDetectStatisticalCommand = New EdgeDetectStatisticalCommand(5, 100, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0))
         ' Apply an edge detector statistical command.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.Dimension">
      <summary>
            Gets or sets the dimensions of the neighborhood used to detect edges (Dimension x Dimension), in pixels. This property only accepts positive values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Dimensions of the neighborhood used to detect edges (Dimension x Dimension), in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.Threshold">
      <summary>
            Gets or sets the threshold value used to determine which pixels are edge pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Threshold value used to determine which pixels are edge pixels. If the difference determined by the edge detector algorithm for a pixel is greater than this value, the pixel is an edge pixel. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.EdgeColor">
      <summary>
            Gets or sets the edge color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Edge color. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand.BackGroundColor">
      <summary>
            Gets or sets the non-edge color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Non-edge color. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      <summary>
            Adds random pixels to an image, letting you specify the percentage of coverage and the color plane.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" /> to add red noise to the image.</para>
        <code lang="VB">   Public Sub AddNoiseCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AddNoiseCommand = New AddNoiseCommand
      command.Range = 250
      'Add red noise with 25 percent coverage
      command.Channel = RasterColorChannel.Red

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddNoiseCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AddNoiseCommand command = new AddNoiseCommand();
         command.Range = 250;
         //Add red noise with 25 percent coverage
         command.Channel = RasterColorChannel.Red;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AddNoiseCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AddNoiseCommand command = new AddNoiseCommand();
         command.Range = 250;
         //Add red noise with 25 percent coverage
         command.Channel = RasterColorChannel.Red;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddNoiseCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AddNoiseCommand = New AddNoiseCommand()
         command.Range = 250
         'Add red noise with 25 percent coverage
         command.Channel = RasterColorChannel.Red
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddNoiseCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddNoiseCommand.#ctor(System.Int32,Leadtools.ImageProcessing.RasterColorChannel)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="range">Percentage of coverage, expressed in tenths of a percent. Valid values are 0 to 1000.</param>
      <param name="channel">value that represents the color plane to which to add the noise.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" /> to add red noise to the image(Default constructor example).</para>
        <code lang="VB">   Public Sub AddNoiseConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AddNoiseCommand = New AddNoiseCommand(250, RasterColorChannel.Red)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddNoiseConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AddNoiseCommand command = new AddNoiseCommand(250, RasterColorChannel.Red);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AddNoiseConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AddNoiseCommand command = new AddNoiseCommand(250, RasterColorChannel.Red);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddNoiseConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AddNoiseCommand = New AddNoiseCommand(250, RasterColorChannel.Red)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddNoiseCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that is the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AddNoiseCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AddNoiseCommand.Range">
      <summary>
            Gets or sets a value that represents the percentage of coverage, expressed in tenths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Percentage of coverage, expressed in tenths of a percent. Valid values are 0 to 1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AddNoiseCommand.Channel">
      <summary>
            Gets or sets a value that represents the color plane to which to add the noise.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Color plane constant. This plane will be affected by the noise.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.OffsetCommandType">
      <summary>
        <para>Flags that indicate how to handle any exposed areas resulting from the bitmap shift.</para>
        <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
             You can use a bitwise OR (|) to specify one type from each group.
             </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.OffsetCommandType.Color">
      <summary>
            Fill any exposed areas with <see cref="P:Leadtools.ImageProcessing.Effects.OffsetCommand.BackColor" />.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.OffsetCommandType.Repeat">
      <summary>
            Stretch the image edges to fill the exposed area.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.OffsetCommandType.NoChange">
      <summary>
            Leave the exposed area as is, without changing it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.OffsetCommandType.WrapAround">
      <summary>
            Fill any exposed areas with the opposite side of the image.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.OffsetCommand">
      <summary>
            Shifts the image data horizontally and vertically.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> on an image.</para>
        <code lang="VB">   Public Sub OffsetCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As OffsetCommand = New OffsetCommand
      command.HorizontalShift = leadImage.Width \ 2
      command.VerticalShift = leadImage.Height \ 2
      command.BackColor = New RasterColor(128, 128, 128)
      command.Type = OffsetCommandType.Color
      'Apply offset on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void OffsetCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         OffsetCommand command = new OffsetCommand();
         command.HorizontalShift = image.Width / 2;
         command.VerticalShift = image.Height / 2;
         command.BackColor = new RasterColor(128, 128, 128);
         command.Type = OffsetCommandType.Color;
         //Apply offset on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void OffsetCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         OffsetCommand command = new OffsetCommand();
         command.HorizontalShift = image.Width / 2;
         command.VerticalShift = image.Height / 2;
         command.BackColor = new RasterColor(128, 128, 128);
         command.Type = OffsetCommandType.Color;
         //Apply offset on the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub OffsetCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As OffsetCommand = New OffsetCommand()
         command.HorizontalShift = image.Width / 2
         command.VerticalShift = image.Height / 2
         command.BackColor = New RasterColor(128, 128, 128)
         command.Type = OffsetCommandType.Color
         'Apply offset on the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OffsetCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> example.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OffsetCommand.#ctor(System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.Effects.OffsetCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="horizontalShift">Horizontal shift of the image, in pixels.</param>
      <param name="verticalShift">Vertical shift of the image, in pixels.</param>
      <param name="backColor">Fill color for the exposed areas.</param>
      <param name="type">Flags that indicate how to handle any exposed areas resulting from the image shift.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> on an image.</para>
        <code lang="VB">   Public Sub OffsetConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As OffsetCommand = New OffsetCommand(leadImage.Width \ 2, leadImage.Height \ 2, New RasterColor(128, 128, 128), OffsetCommandType.Color)
      'Apply offset command on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void OffsetConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         OffsetCommand command = new OffsetCommand(image.Width / 2, image.Height / 2, new RasterColor(128, 128, 128), OffsetCommandType.Color);
         //Apply offset command on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void OffsetConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         OffsetCommand command = new OffsetCommand(image.Width / 2, image.Height / 2, new RasterColor(128, 128, 128), OffsetCommandType.Color);
         //Apply offset command on the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub OffsetConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As OffsetCommand = New OffsetCommand(image.Width / 2, image.Height / 2, New RasterColor(128, 128, 128), OffsetCommandType.Color)
         'Apply offset command on the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OffsetCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OffsetCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.OffsetCommand.HorizontalShift">
      <summary>
            Gets or sets the horizontal shift of the image, in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Horizontal shift of the image, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.OffsetCommand.VerticalShift">
      <summary>
            Gets or sets the vertical shift of the image, in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Vertical shift of the image, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.OffsetCommand.BackColor">
      <summary>
            Gets or sets the fill color for the exposed areas.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Fill color for the exposed areas.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.OffsetCommand.Type">
      <summary>
            Gets or sets a value that indicates how to handle any exposed areas resulting from the image shift. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Flags that indicate how to handle any exposed areas resulting from the image shift.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand" /> example.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand">
      <summary>
            Determines the position, orientation and roundness of the object in the image. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>All the objects in the image are considered to be a single object. This command determines various attributes of the object in the image to identify the objects and to determine their position and orientation. If you do not need certain values pass null instead.</description>
          </item>
          <item>
            <description>The results point and angle information obtained by this command are multiplied by 100 in order to obtain more precision. To get the actual results, divide by 100.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ObjectInformationCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      'Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass Nothing_
      Dim command As ObjectInformationCommand = New ObjectInformationCommand(False)
      command.Run(leadImage)

      MessageBox.Show("Angle = " + command.Angle.ToString + Chr(13) + _
         "Roundness = " + command.Roundness.ToString + Chr(13) + _
         "X = " + command.CenterOfMass.X.ToString + Chr(13) + _
         "Y = " + command.CenterOfMass.Y.ToString)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ObjectInformationCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass NULL_
         ObjectInformationCommand command = new ObjectInformationCommand(false);
         command.Run(image);

         MessageBox.Show("Angle = "     + command.Angle + "\n" +
            "Roundness = " + command.Roundness + "\n" +
            "X = "         + command.CenterOfMass.X + "\n" +
            "Y = "         + command.CenterOfMass.Y);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ObjectInformationCommandExample(RasterImage image)
      {
         // Prepare the command
         //Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass NULL_
         ObjectInformationCommand command = new ObjectInformationCommand(false);
         command.Run(image);
         Debug.WriteLine("Angle = " + command.Angle + "\n" +
            "Roundness = " + command.Roundness + "\n" +
            "X = " + command.CenterOfMass.X + "\n" +
            "Y = " + command.CenterOfMass.Y);
      }</code>
        <code lang="SilverlightVB">      Public Sub ObjectInformationCommandExample(ByVal image As RasterImage)
         ' Prepare the command
         'Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass NULL_
         Dim command As ObjectInformationCommand = New ObjectInformationCommand(False)
         command.Run(image)
         Debug.WriteLine("Angle = " &amp; command.Angle + Constants.vbLf &amp; "Roundness = " &amp; command.Roundness + Constants.vbLf &amp; "X = " &amp; command.CenterOfMass.X + Constants.vbLf &amp; "Y = " &amp; command.CenterOfMass.Y)
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ObjectInformationConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      ' Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass Nothing_
      Dim command As ObjectInformationCommand = New ObjectInformationCommand
      command.Weighted = False
      command.Run(leadImage)

      MessageBox.Show("Angle = " + command.Angle.ToString + Chr(13) + _
         "Roundness = " + command.Roundness.ToString + Chr(13) + _
         "X = " + command.CenterOfMass.X.ToString + Chr(13) + _
         "Y = " + command.CenterOfMass.Y.ToString)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ObjectInformationConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         // Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass NULL_
         ObjectInformationCommand command = new ObjectInformationCommand();
         command.Weighted = false;
         command.Run(image);

         MessageBox.Show("Angle = "     + command.Angle + "\n" +
            "Roundness = " + command.Roundness + "\n" +
            "X = "         + command.CenterOfMass.X + "\n" +
            "Y = "         + command.CenterOfMass.Y);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ObjectInformationConstructorExample(RasterImage image)
      {
         // Prepare the command
         // Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass NULL_
         ObjectInformationCommand command = new ObjectInformationCommand();
         command.Weighted = false;
         command.Run(image);
         Debug.WriteLine("Angle = " + command.Angle + "\n" +
            "Roundness = " + command.Roundness + "\n" +
            "X = " + command.CenterOfMass.X + "\n" +
            "Y = " + command.CenterOfMass.Y);
      }</code>
        <code lang="SilverlightVB">      Public Sub ObjectInformationConstructorExample(ByVal image As RasterImage)
         ' Prepare the command
         ' Get the objects center of mass and it's roundness. I am not interested in the axis' orientation, so I pass NULL_
         Dim command As ObjectInformationCommand = New ObjectInformationCommand()
         command.Weighted = False
         command.Run(image)
         Debug.WriteLine("Angle = " &amp; command.Angle + Constants.vbLf &amp; "Roundness = " &amp; command.Roundness + Constants.vbLf &amp; "X = " &amp; command.CenterOfMass.X + Constants.vbLf &amp; "Y = " &amp; command.CenterOfMass.Y)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.#ctor(System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="weighted">Flag that indicates the weighting factor. If this parameter is true, then the pixel intensity value (color) will be used as a weighting factor. If this parameter is false, then all non-zero pixels will have the same weight.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.CenterOfMass">
      <summary>
            This property is updated with the object's center of mass.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>LeadPoint structure that is updated with the object's center of mass.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.Angle">
      <summary>
            A property to be updated with the orientation angle of the object's axis.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>A property to be updated with the orientation angle of the object's axis. Valid values are in degrees from -180.00 to 180.00, with negative values produced from clockwise rotation and where 0 is the horizon.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.Roundness">
      <summary>
            This property is updated with the object's roundness (compactness).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>A property to be updated with the object's roundness (compactness). This ratio will be 0 for a line and 100 for a circle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.Weighted">
      <summary>
            Gets or sets a value that indicates the weighting factor.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the weighting factor. If this property is true, then the pixel intensity value (color) will be used as a weighting factor. If this property set to false, then all non-zero pixels will have the same weight.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.ObjectInformationCommand.#ctor">ObjectInformationCommand()</see></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommandFlags">
      <summary>
            Flags that indicate how to deinterlace the image and whether to remove odd lines or even lines.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para><strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how to deinterlace the image.</td><td>Smooth, Normal</td></tr><tr><td>Flags that indicate whether to remove odd or even lines.</td><td>Odd, Even</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DeinterlaceCommandFlags.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DeinterlaceCommandFlags.Odd">
      <summary>
            Remove the odd lines.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DeinterlaceCommandFlags.Even">
      <summary>
             Remove the even lines.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DeinterlaceCommandFlags.Smooth">
      <summary>
            Deinterlace the image by averaging the data lines and copying the averaged data into the removed lines.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.DeinterlaceCommandFlags.Normal">
      <summary>
            Deinterlace the image by copying the data line into the removed lines.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand">
      <summary>
            Deinterlaces video source images by removing the black lines.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command deinterlaces video source images by removing the black lines. It proceeds by merging lines in the image and/or blending them. Different options are available through the use of flags.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DeinterlaceCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DeinterlaceCommand = New DeinterlaceCommand
      command.Flags = DeinterlaceCommandFlags.Smooth Or DeinterlaceCommandFlags.Odd
      ' Remove odd lines smoothly.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DeinterlaceCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DeinterlaceCommand command = new DeinterlaceCommand();
         command.Flags = DeinterlaceCommandFlags.Smooth | DeinterlaceCommandFlags.Odd;
         // Remove odd lines smoothly.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DeinterlaceCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         DeinterlaceCommand command = new DeinterlaceCommand();
         command.Flags = DeinterlaceCommandFlags.Smooth | DeinterlaceCommandFlags.Odd;
         // Remove odd lines smoothly.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DeinterlaceCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As DeinterlaceCommand = New DeinterlaceCommand()
         command.Flags = DeinterlaceCommandFlags.Smooth Or DeinterlaceCommandFlags.Odd
         ' Remove odd lines smoothly.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DeinterlaceCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DeinterlaceCommand.#ctor(Leadtools.ImageProcessing.Effects.DeinterlaceCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="flags">Flags that indicate how to deinterlace the image and whether to remove odd lines or even lines. You can use a bit wise OR (|) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DeinterlaceConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DeinterlaceCommand
      command = New DeinterlaceCommand(DeinterlaceCommandFlags.Smooth Or DeinterlaceCommandFlags.Odd)
      ' Remove odd lines smoothly.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DeinterlaceConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DeinterlaceCommand command = new DeinterlaceCommand(DeinterlaceCommandFlags.Smooth | DeinterlaceCommandFlags.Odd);
         // Remove odd lines smoothly.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DeinterlaceConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         DeinterlaceCommand command = new DeinterlaceCommand(DeinterlaceCommandFlags.Smooth | DeinterlaceCommandFlags.Odd);
         // Remove odd lines smoothly.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DeinterlaceConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As DeinterlaceCommand = New DeinterlaceCommand(DeinterlaceCommandFlags.Smooth Or DeinterlaceCommandFlags.Odd)
         ' Remove odd lines smoothly.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DeinterlaceCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.DeinterlaceCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.DeinterlaceCommand.Flags">
      <summary>
            Gets or sets flags that indicate how to deinterlace the image and whether to remove odd lines or even lines.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Flags that indicate how to deinterlace the image and whether to remove odd lines or even lines. You can use a bit wise OR (|) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand">
      <summary>
            Combines image data from two images, using a specific opacity value.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The opacity determines how much the affected image will show through the source image. For example, if the Opacity property (or the opacity parameter in the constructor) is set to 255 (completely opaque) then the source image will appear and the affected image will not show through the source image at all. If the opacity is 128 (half opacity), then the pixels for that area will consist of 50 percent from the source image and 50 percent from the affected image.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AlphaBlendCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim SrcImage As RasterImage
      SrcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 4, CodecsLoadByteOrder.Bgr, 1, 1)

      Dim command As AlphaBlendCommand = New AlphaBlendCommand
      'Combine SrcImage with image, with half opacity.
      command.DestinationRectangle = New LeadRect(leadImage.Width \ 8, leadImage.Height \ 8, leadImage.Width, leadImage.Height)
      command.SourceImage = SrcImage
      command.Opacity = 128
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AlphaBlendCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterImage SrcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         AlphaBlendCommand command = new AlphaBlendCommand();
         //Combine SrcImage with image, with half opacity.
         command.DestinationRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         command.SourceImage = SrcImage;
         command.Opacity = 128;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AlphaBlendCommandExample(RasterImage image, RasterImage srcImage, Stream outStream)
      {
         // Prepare the command
         AlphaBlendCommand command = new AlphaBlendCommand();
         //Combine SrcImage with image, with half opacity.
         command.DestinationRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         command.SourceImage = srcImage;
         command.Opacity = 128;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AlphaBlendCommandExample(ByVal image As RasterImage, ByVal srcImage As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AlphaBlendCommand = New AlphaBlendCommand()
         'Combine SrcImage with image, with half opacity.
         command.DestinationRectangle = New LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height)
         command.SourceImage = srcImage
         command.Opacity = 128
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         srcImage.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.#ctor(Leadtools.RasterImage,Leadtools.LeadPoint,Leadtools.LeadRect,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="sourceImage">RasterImage object that references the source image.</param>
      <param name="sourcePoint">LeadPoint structure that contains the origin of the source rectangle. The width and height are the same width and height for the destination rectangle.</param>
      <param name="destinationRect">LeadRect structure that contains the destination rectangle.</param>
      <param name="opacity">Opacity value used when combining the areas from the source and affected images. This value is between 0 and 255.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AlphaBlendConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim srcImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1)

      Dim Left As Integer = CType((leadImage.Width / 8), Integer)
      Dim Top As Integer = CType((leadImage.Height / 8), Integer)
      Dim Width As Integer = CType(leadImage.Width, Integer)
      Dim Height As Integer = CType(leadImage.Height, Integer)

      ' Combine srcImage with image, with half opacity.
      Dim command As AlphaBlendCommand = New AlphaBlendCommand(srcImage, New LeadPoint(0, 0), New LeadRect(Left, Top, Width, Height), 128)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AlphaBlendConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterImage srcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1);
         AlphaBlendCommand command = new AlphaBlendCommand(srcImage, new LeadPoint(0, 0), new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height), 128);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AlphaBlendConstructorExample(RasterImage image, RasterImage srcImage, Stream outStream)
      {
         // Prepare the command
         AlphaBlendCommand command = new AlphaBlendCommand(srcImage, new LeadPoint(0, 0), new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height), 128);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AlphaBlendConstructorExample(ByVal image As RasterImage, ByVal srcImage As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AlphaBlendCommand = New AlphaBlendCommand(srcImage, New LeadPoint(0, 0), New LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height), 128)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>string that is the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.SourceImage">
      <summary>
            Gets or sets the RasterImage object that references the source image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>RasterImage object that references the source image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.DestinationRectangle">
      <summary>
            Gets or sets the rectangle structure that contains the destination rectangle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>LeadRect structure that contains the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.SourcePoint">
      <summary>
            Gets or sets the point structure that contains the origin of the source rectangle.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>LeadPoint structure that contain the origin of the source rectangle. the Width and Height are the same Width and Height for the destination rectangle.</value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SourcePointPropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim srcImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1)

      Dim Left As Integer = CType((leadImage.Width / 8), Integer)
      Dim Top As Integer = CType((leadImage.Height / 8), Integer)
      Dim Width As Integer = CType((leadImage.Width), Integer)
      Dim Height As Integer = CType((leadImage.Height), Integer)

      ' Combine srcImage with image, with half opacity.
      Dim command As AlphaBlendCommand = New AlphaBlendCommand
      command.DestinationRectangle = New LeadRect(Left, Top, Width, Height)
      command.SourceImage = srcImage
      command.SourcePoint = New LeadPoint(0, 0)
      command.Opacity = 128
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SourcePointPropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterImage srcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1);

         AlphaBlendCommand command = new AlphaBlendCommand();
         // Combine srcImage with image, with half opacity.
         //command.DestinationRectangle = new LeadRect(image.Width / 2 - srcImage.Width / 2, image.Height / 2 - srcImage.Height / 2, image.Width / 2 + srcImage.Width / 8, image.Height / 2 + srcImage.Height / 8);
         command.DestinationRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         command.SourceImage = srcImage;
         command.SourcePoint = new LeadPoint(0, 0);
         command.Opacity = 128;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SourcePointPropertyExample(RasterImage image, RasterImage srcImage, Stream outStream)
      {
         // Prepare the command
         AlphaBlendCommand command = new AlphaBlendCommand();
         // Combine srcImage with image, with half opacity.
         //command.DestinationLeadRect = new LeadRect(image.Width / 2 - srcImage.Width / 2, image.Height / 2 - srcImage.Height / 2, image.Width / 2 + srcImage.Width / 8, image.Height / 2 + srcImage.Height / 8);
         command.DestinationRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height);
         command.SourceImage = srcImage;
         command.SourcePoint = new LeadPoint(0, 0);
         command.Opacity = 128;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SourcePointPropertyExample(ByVal image As RasterImage, ByVal srcImage As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AlphaBlendCommand = New AlphaBlendCommand()
         ' Combine srcImage with image, with half opacity.
         'command.DestinationLeadRect = new LeadRect(image.Width / 2 - srcImage.Width / 2, image.Height / 2 - srcImage.Height / 2, image.Width / 2 + srcImage.Width / 8, image.Height / 2 + srcImage.Height / 8);
         command.DestinationRectangle = New LeadRect(image.Width / 8, image.Height / 8, image.Width, image.Height)
         command.SourceImage = srcImage
         command.SourcePoint = New LeadPoint(0, 0)
         command.Opacity = 128
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.AlphaBlendCommand.Opacity">
      <summary>
            Gets or sets the opacity value used when combining the areas from the source and destination images.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>The valid range is from 0 - 65535 for 64-bit, 48-bit and 16-bit grayscale images and from 0 - 4095 for 12-bit grayscale images. Otherwise, it is from 0 to 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommandColorType">
      <summary>
            Enumeration that indicates the color space in which to apply the mask.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.UnsharpMaskCommandColorType.None">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.UnsharpMaskCommandColorType.Rgb">
      <summary>
            Apply the mask in the RGB color space.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.UnsharpMaskCommandColorType.Yuv">
      <summary>
            Apply the mask in the YUV color space.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand">
      <summary>
            Sharpens the image by applying the unsharp mask.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command is actually considered a sharpening method. It is used to sharpen the image with a minimum of noise. To reduce the noise, it starts by blurring a copy of the original image. The amount of blur depends on Radius. The method then determines the difference between each pixel's value of the original image and the corresponding pixel's value in the blurred image. If the difference is greater than the threshold value, then the difference between the pixel values is multiplied by the amount value and added to the original pixel value.</description>
          </item>
          <item>
            <description>To increase the thickness of the sharpened edges, increase the radius value.</description>
          </item>
          <item>
            <description>To increase the amount of sharpness, increase the amount value.</description>
          </item>
          <item>
            <description>To reduce the noise and eliminate the small edges or individual pixels that will produce noise in image, increase the threshold value.</description>
          </item>
          <item>
            <description>Using the Yuv color space decreases the processing time.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" /> on an image.</para>
        <code lang="VB">   Public Sub UnsharpMaskCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As UnsharpMaskCommand = New UnsharpMaskCommand
      command.Amount = 200
      command.Radius = 15
      command.Threshold = 50
      command.ColorType = UnsharpMaskCommandColorType.Rgb
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void UnsharpMaskCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         UnsharpMaskCommand command = new UnsharpMaskCommand();
         command.Amount = 200;
         command.Radius = 15;
         command.Threshold = 50;
         command.ColorType = UnsharpMaskCommandColorType.Rgb;
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void UnsharpMaskCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         UnsharpMaskCommand command = new UnsharpMaskCommand();
         command.Amount = 200;
         command.Radius = 15;
         command.Threshold = 50;
         command.ColorType = UnsharpMaskCommandColorType.Rgb;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub UnsharpMaskCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As UnsharpMaskCommand = New UnsharpMaskCommand()
         command.Amount = 200
         command.Radius = 15
         command.Threshold = 50
         command.ColorType = UnsharpMaskCommandColorType.Rgb
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.UnsharpMaskCommandColorType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="amount">Value that represents an adjustment factor. This is a percentage.</param>
      <param name="radius">Value that indicates the size of the neighborhood used for blurring each pixel of the image.</param>
      <param name="threshold">Value that indicates the threshold for modifying the original value of the pixel. If the difference in the original pixel value and the blurred pixel value is greater than the threshold value, the original pixel value will be modified.</param>
      <param name="colorType">Flag that indicates the color space in which to apply the mask.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" /> on an image.</para>
        <code lang="VB">   Public Sub UnsharpMaskConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As UnsharpMaskCommand = New UnsharpMaskCommand(200, 15, 50, UnsharpMaskCommandColorType.Rgb)
      command.Run(leadImage)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void UnsharpMaskConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         UnsharpMaskCommand command = new UnsharpMaskCommand(200, 15, 50, UnsharpMaskCommandColorType.Rgb);
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void UnsharpMaskConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         UnsharpMaskCommand command = new UnsharpMaskCommand(200, 15, 50, UnsharpMaskCommandColorType.Rgb);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub UnsharpMaskConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As UnsharpMaskCommand = New UnsharpMaskCommand(200, 15, 50, UnsharpMaskCommandColorType.Rgb)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.Amount">
      <summary>
            Gets or sets a value that represents an adjustment factor. This is a percentage.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that represents an adjustment factor. This is a percentage.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.Radius">
      <summary>
            Gets or sets a value that indicates the size of the neighborhood used for blurring each pixel of the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the size of the neighborhood used for blurring each pixel of the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.Threshold">
      <summary>
            Gets or sets a value that indicates the threshold for modifying the original value of the pixel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the threshold for modifying the original value of the pixel. If the difference in the original pixel value and the blurred pixel value is greater than the threshold value, the original pixel value will be modified.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand.ColorType">
      <summary>
            Gets or sets a value that indicates the color space in which to apply the mask.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the color space in which to apply the mask.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand">
      <summary>
            Returns statistical information about the image. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command calculates statistical information about the image.</description>
          </item>
          <item>
            <description>The start and end values designate the range of colors that will be taken in consideration for producing the results. Only the values between Start and End are used for the calculation of the results. The range of each one depends on the bits per pixel of the image: in the case of 8 bits per component (RGB), the range is between 0 and 255; for 16 bits, the range is 0 through 65535;and from -32768 to 32767 for signed images; and for 12 bits, the range is 0 through 4095.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> on an image.</para>
        <code lang="VB">   Public Sub StatisticsInformationCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As StatisticsInformationCommand = New StatisticsInformationCommand
      command.Channel = RasterColorChannel.Master
      command.Start = 0
      command.End = 255
      'Get statistical image information.
      command.Run(leadImage)
      MessageBox.Show("Minimum = " + command.Minimum.ToString + Chr(13) + _
         "Maximum = " + command.Maximum.ToString + Chr(13) + _
         "Mean = " + command.Mean.ToString + Chr(13) + _
         "Median = " + command.Median.ToString + Chr(13) + _
         "Percent = " + command.Percent.ToString + Chr(13) + _
         "PixelCount = " + command.PixelCount.ToString + Chr(13) + _
         "StandardDeviation = " + command.StandardDeviation.ToString + Chr(13) + _
         "TotalPixelCount = " + command.TotalPixelCount.ToString)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void StatisticsInformationCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         StatisticsInformationCommand command = new StatisticsInformationCommand();
         command.Channel = RasterColorChannel.Master;
         command.Start   = 0;
         command.End    = 255;
         //Get statistical image information.
         command.Run(image);
         MessageBox.Show("Minimum = " + command.Minimum + "\n" +
            "Maximum = " + command.Maximum + "\n" +
            "Mean = " + command.Mean + "\n" +
            "Median = " + command.Median + "\n" +
            "Percent = " + command.Percent + "\n" +
            "PixelCount = " + command.PixelCount + "\n" +
            "StandardDeviation = " + command.StandardDeviation + "\n" +
            "TotalPixelCount = " + command.TotalPixelCount);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void StatisticsInformationCommandExample(RasterImage image)
      {
         // Prepare the command
         StatisticsInformationCommand command = new StatisticsInformationCommand();
         command.Channel = RasterColorChannel.Master;
         command.Start = 0;
         command.End = 255;
         //Get statistical image information.
         command.Run(image);
         Debug.WriteLine("Minimum = " + command.Minimum + "\n" +
            "Maximum = " + command.Maximum + "\n" +
            "Mean = " + command.Mean + "\n" +
            "Median = " + command.Median + "\n" +
            "Percent = " + command.Percent + "\n" +
            "PixelCount = " + command.PixelCount + "\n" +
            "StandardDeviation = " + command.StandardDeviation + "\n" +
            "TotalPixelCount = " + command.TotalPixelCount);
      }</code>
        <code lang="SilverlightVB">      Public Sub StatisticsInformationCommandExample(ByVal image As RasterImage)
         ' Prepare the command
         Dim command As StatisticsInformationCommand = New StatisticsInformationCommand()
         command.Channel = RasterColorChannel.Master
         command.Start = 0
         command.End = 255
         'Get statistical image information.
         command.Run(image)
         Debug.WriteLine("Minimum = " &amp; command.Minimum + Constants.vbLf &amp; "Maximum = " &amp; command.Maximum + Constants.vbLf &amp; "Mean = " &amp; command.Mean + Constants.vbLf &amp; "Median = " &amp; command.Median + Constants.vbLf &amp; "Percent = " &amp; command.Percent + Constants.vbLf &amp; "PixelCount = " &amp; command.PixelCount + Constants.vbLf &amp; "StandardDeviation = " &amp; command.StandardDeviation + Constants.vbLf &amp; "TotalPixelCount = " &amp; command.TotalPixelCount)
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</seealso>.   /// <seealso cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.#ctor">
      <summary>
            Initializes a new StatisticsInformationCommand with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.#ctor(Leadtools.ImageProcessing.RasterColorChannel,System.Int32,System.Int32)">
      <summary>
            Initializes a new StatisticsInformationCommand with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="channel">The channel for which to get the information. This value is ignored if the image is 12 or 16-bit grayscale.</param>
      <param name="start">Indicates the beginning color value of the range for the evaluation. This property only accepts positive values.</param>
      <param name="end">Indicates the ending color value of the range for the evaluation. This property only accepts positive values.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> on an image.</para>
        <code lang="VB">   Public Sub StatisticsInformationConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As StatisticsInformationCommand = New StatisticsInformationCommand(RasterColorChannel.Master, 0, 255)
      ' Get statistical image information.
      command.Run(leadImage)
      MessageBox.Show("Minimum = " + command.Minimum.ToString + Chr(13) + _
         "Maximum = " + command.Maximum.ToString + Chr(13) + _
         "Mean = " + command.Mean.ToString + Chr(13) + _
         "Median = " + command.Median.ToString + Chr(13) + _
         "Percent = " + command.Percent.ToString + Chr(13) + _
         "PixelCount = " + command.PixelCount.ToString + Chr(13) + _
         "StandardDeviation = " + command.StandardDeviation.ToString + Chr(13) + _
         "TotalPixelCount = " + command.TotalPixelCount.ToString)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void StatisticsInformationConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         StatisticsInformationCommand command = new StatisticsInformationCommand(RasterColorChannel.Master, 0, 255);
         // Get statistical image information.
         command.Run(image);
         MessageBox.Show("Minimum = " + command.Minimum + "\n" +
            "Maximum = " + command.Maximum + "\n" +
            "Mean = " + command.Mean + "\n" +
            "Median = " + command.Median + "\n" +
            "Percent = " + command.Percent + "\n" +
            "PixelCount = " + command.PixelCount + "\n" +
            "StandardDeviation = " + command.StandardDeviation + "\n" +
            "TotalPixelCount = " + command.TotalPixelCount);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void StatisticsInformationConstructorExample(RasterImage image)
      {
         // Prepare the command
         StatisticsInformationCommand command = new StatisticsInformationCommand(RasterColorChannel.Master, 0, 255);
         // Get statistical image information.
         command.Run(image);
         Debug.WriteLine("Minimum = " + command.Minimum + "\n" +
            "Maximum = " + command.Maximum + "\n" +
            "Mean = " + command.Mean + "\n" +
            "Median = " + command.Median + "\n" +
            "Percent = " + command.Percent + "\n" +
            "PixelCount = " + command.PixelCount + "\n" +
            "StandardDeviation = " + command.StandardDeviation + "\n" +
            "TotalPixelCount = " + command.TotalPixelCount);
      }</code>
        <code lang="SilverlightVB">      Public Sub StatisticsInformationConstructorExample(ByVal image As RasterImage)
         ' Prepare the command
         Dim command As StatisticsInformationCommand = New StatisticsInformationCommand(RasterColorChannel.Master, 0, 255)
         ' Get statistical image information.
         command.Run(image)
         Debug.WriteLine("Minimum = " &amp; command.Minimum + Constants.vbLf &amp; "Maximum = " &amp; command.Maximum + Constants.vbLf &amp; "Mean = " &amp; command.Mean + Constants.vbLf &amp; "Median = " &amp; command.Median + Constants.vbLf &amp; "Percent = " &amp; command.Percent + Constants.vbLf &amp; "PixelCount = " &amp; command.PixelCount + Constants.vbLf &amp; "StandardDeviation = " &amp; command.StandardDeviation + Constants.vbLf &amp; "TotalPixelCount = " &amp; command.TotalPixelCount)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>string that is the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.StandardDeviation">
      <summary>
            (Read only) Gets the standard deviation value found.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>get the standard deviation value found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.Mean">
      <summary>
            (Read only) Gets the mean value found.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Get the mean value found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.Median">
      <summary>
            (Read only) Gets the median value found.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Gets the median value found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.Maximum">
      <summary>
            (Read only) Gets the Maximum value found.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Gets the Maximum value found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.Minimum">
      <summary>
            (Read only) Gets the Minimum value found.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Gets the Minimum value found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.PixelCount">
      <summary>
            (Read only) Gets the Pixel number value found.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Gets the Pixel number value found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.TotalPixelCount">
      <summary>
            (Read only) Gets the whole image Pixel number value found.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Gets the whole image Pixel number value found.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.Percent">
      <summary>
            (Read only) Gets the percent value of selected pixel to the whole pixels in the image, in hundredths of percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Get the percent value of selected pixel to the whole pixels in the image, in hundredths of percent.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.Channel">
      <summary>
             Gets or sets the channel for which to get the information.
              <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>The channel for which to get the information. This value is ignored if the image is 12 or 16-bit grayscale.</value>
      <example>
             Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
             </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.Start">
      <summary>
             Gets or sets the beginning color value of the range for the evaluation.
              <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Indicates the beginning color value of the range for the evaluation. This property only accepts positive values.</value>
      <example>
             Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
             </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand.End">
      <summary>
             Gets or sets the ending color value of the range for the evaluation.
              <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Indicates the ending color value of the range for the evaluation. This property only accepts positive values.</value>
      <example>
             Refer to <see cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand" /> example.
             </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined">
      <summary>
            Enumerated values that represent a predefined spatial filter to use.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossNorth">
      <summary>
            Creates an image with an embossed appearance to the north. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossNorthEast">
      <summary>
            Creates an image with an embossed appearance to the north-east. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossEast">
      <summary>
            Creates an image with an embossed appearance to the east. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossSouthEast">
      <summary>
            Creates an image with an embossed appearance to the south-east. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossSouth">
      <summary>
            Creates an image with an embossed appearance to the south. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossSouthWest">
      <summary>
            Creates an image with an embossed appearance to the south-west. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossWest">
      <summary>
            Creates an image with an embossed appearance to the west. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.EmbossNorthWest">
      <summary>
            Creates an image with an embossed appearance to the north-west. (This is used for artistic effect, but is listed here because it is one of the predefined filters.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementNorth">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is north.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementNorthEast">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is north-east.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementEast">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is east.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementSouthEast">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is south-east.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementSouth">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is south.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementSouthWest">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is south-west.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementWest">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is west.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.GradientEdgeEnhancementNorthWest">
      <summary>
            Detects edges using a Gradient directional filter. The direction of the effect is north-west.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LaplacianFilter1">
      <summary>
            Applies Laplacian line detection number 1. All pixels not on the detected lines are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LaplacianFilter2">
      <summary>
            Applies Laplacian line detection number 2. All pixels not on the detected lines are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LaplacianFilter3">
      <summary>
            Applies Laplacian line detection number 3. All pixels not on the detected lines are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LaplacianDiagonal">
      <summary>
            Applies diagonal Laplacian line detection. All pixels not on the detected lines are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LaplacianHorizontal">
      <summary>
            Applies horizontal Laplacian line detection. All pixels not on the detected lines are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LaplacianVertical">
      <summary>
            Applies vertical Laplacian line detection. All pixels not on the detected lines are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.SobelHorizontal">
      <summary>
            Applies horizontal Sobel edge detection. All pixels not on the detected edges are changed to black. (The usage is the same as Prewitt, but the algorithm is different.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.SobelVertical">
      <summary>
            Applies vertical Sobel edge detection. All pixels not on the detected edges are changed to black. (The usage is the same as Prewitt, but the algorithm is different.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.PrewittHorizontal">
      <summary>
            Applies horizontal Prewitt edge detection. All pixels not on the detected edges are changed to black. (The usage is the same as Sobel, but the algorithm is different.) Choose the appropriate value for horizontal or vertical detection.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.PrewittVertical">
      <summary>
            Applies vertical Prewitt edge detection. All pixels not on the detected edges are changed to black. (The usage is the same as Sobel, but the algorithm is different.) Choose the appropriate value for horizontal or vertical detection.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.ShiftAndDifferenceDiagonal">
      <summary>
            Applies diagonal shift-and-difference edge detection. All pixels not on the detected edges are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.ShiftAndDifferenceHorizontal">
      <summary>
            Applies horizontal shift-and-difference edge detection. All pixels not on the detected edges are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.ShiftAndDifferenceVertical">
      <summary>
            Applies vertical shift-and-difference edge detection. All pixels not on the detected edges are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LineSegmentHorizontal">
      <summary>
            Applies horizontal line segment line detection. You can use this filter to find line discontinuities in an image. All pixels not on the detected line segments are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LineSegmentVertical">
      <summary>
            Applies vertical line segment line detection. You can use this filter to find line discontinuities in an image. All pixels not on the detected line segments are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LineSegmentLeftToRight">
      <summary>
            Applies left to right line segment line detection. You can use this filter to find line discontinuities in an image. All pixels not on the detected line segments are changed to black.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined.LineSegmentRightToLeft">
      <summary>
            Applies right to left line segment line detection. You can use this filter to find line discontinuities in an image. All pixels not on the detected line segments are changed to black.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand">
      <summary>
            Imposes a spatial filter on an image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> Toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>A spatial filter recomputes the brightness of each pixel in an image by using a weighted averaging technique that considers the surrounding pixels. Spatial filters are used for operations such as sharpening an image or detecting edges within the image.</description>
          </item>
          <item>
            <description>The SpatialFilterCommand works best with 24-bit, 16-bit, or grayscale images. If the image uses a color palette, this command matches the new brightness value of each pixel to the nearest color in the existing palette.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>It is beyond the scope of this documentation to explain how applying various weighting factors affects an image. If you specify your own filter, you should refer to a textbook on image processing. For example, Digital Image Processing: Principles and Applications, by Gregory A. Baxes.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ListOfSpatialFilters">List of Spatial Filters</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> on an image and applies a Prewitt edge detection filter.</para>
        <code lang="VB">   Public Sub SpatialFilterCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SpatialFilterCommand = New SpatialFilterCommand(SpatialFilterCommandPredefined.PrewittHorizontal)
      'Apply a Prewitt edge detection filter.

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SpatialFilterCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SpatialFilterCommand command = new SpatialFilterCommand(SpatialFilterCommandPredefined.PrewittHorizontal);
         //Apply a Prewitt edge detection filter.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SpatialFilterCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SpatialFilterCommand command = new SpatialFilterCommand(SpatialFilterCommandPredefined.PrewittHorizontal);
         //Apply a Prewitt edge detection filter.
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SpatialFilterCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SpatialFilterCommand = New SpatialFilterCommand(SpatialFilterCommandPredefined.PrewittHorizontal)
         'Apply a Prewitt edge detection filter.
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.Topics.ListOfSpatialFilters">List of Spatial Filters</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SpatialFilterConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command1 As SpatialFilterCommand = New SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth)
      Dim data() As Integer = command1.Matrix
      Dim command As SpatialFilterCommand = New SpatialFilterCommand
      command.Divisor = command1.Divisor
      command.Bias = command1.Bias
      command.Matrix = data
      MessageBox.Show("Array Dimension is :" &amp; command1.Dimension.ToString())
      'Apply the filter.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SpatialFilterConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SpatialFilterCommand command1 = new SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth);
         int [] data = command1.Matrix;
         SpatialFilterCommand command = new SpatialFilterCommand();
         command.Divisor = command1.Divisor;
         command.Bias = command1.Bias;
         command.Matrix = data;
         MessageBox.Show("Array Dimension is :" + command1.Dimension.ToString());
         //Apply the filter.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SpatialFilterConstructorExample_S1(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SpatialFilterCommand command1 = new SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth);
         int[] data = command1.Matrix;
         SpatialFilterCommand command = new SpatialFilterCommand();
         command.Divisor = command1.Divisor;
         command.Bias = command1.Bias;
         command.Matrix = data;
         Debug.WriteLine("Array Dimension is :" + command1.Dimension.ToString());
         //Apply the filter.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SpatialFilterConstructorExample_S1(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command1 As SpatialFilterCommand = New SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth)
         Dim data As Integer() = command1.Matrix
         Dim command As SpatialFilterCommand = New SpatialFilterCommand()
         command.Divisor = command1.Divisor
         command.Bias = command1.Bias
         command.Matrix = data
         Debug.WriteLine("Array Dimension is :" &amp; command1.Dimension.ToString())
         'Apply the filter.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.#ctor(Leadtools.ImageProcessing.Effects.SpatialFilterCommandPredefined)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="predefined">Value that represents a predefined spatial filters.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.#ctor(System.Int32,System.Int32,System.Int32[])">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="divisor">Number used to divide the sum of weighted values.</param>
      <param name="bias">Number added to the weighted average.</param>
      <param name="matrix">The array of weighting factors. The factors apply to pixels in the neighborhood read left to right and top to bottom, as shown below<img src="spaflt.jpg" /><br /></param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SpatialFilterConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command1 As SpatialFilterCommand = New SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth)
      Dim data() As Integer = command1.Matrix
      Dim command As SpatialFilterCommand = New SpatialFilterCommand(command1.Divisor, command1.Bias, data)
      'Apply the filter.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SpatialFilterConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SpatialFilterCommand command1 = new SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth);
         int [] data = command1.Matrix;
         SpatialFilterCommand command = new SpatialFilterCommand(command1.Divisor , command1.Bias , data);
         //Apply the filter.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SpatialFilterConstructorExample_S2(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SpatialFilterCommand command1 = new SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth);
         int[] data = command1.Matrix;
         SpatialFilterCommand command = new SpatialFilterCommand(command1.Divisor, command1.Bias, data);
         //Apply the filter.
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SpatialFilterConstructorExample_S2(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command1 As SpatialFilterCommand = New SpatialFilterCommand(SpatialFilterCommandPredefined.EmbossSouth)
         Dim data As Integer() = command1.Matrix
         Dim command As SpatialFilterCommand = New SpatialFilterCommand(command1.Divisor, command1.Bias, data)
         'Apply the filter.
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.Divisor">
      <summary>
            Gets or sets the number used to divide the sum of weighted values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Number used to divide the sum of weighted values.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.#ctor">SpatialFilterCommand()</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.Bias">
      <summary>
            Gets or sets the number added to the weighted average.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Number added to the weighted average.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.#ctor">SpatialFilterCommand()</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.Dimension">
      <summary>
            This property is updated with the number of pixels on one side of the square (neighborhood) used for averaging.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Number of pixels on one side of the square (neighborhood) used for averaging. Usually an odd number such as 3 or 5 is used. If you specify an even number, the target pixel is the one northwest of the midpoint. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.#ctor">SpatialFilterCommand()</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.Matrix">
      <summary>
            Gets or sets the array of weighting factors.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>The array of weighting factors. The factors apply to pixels in the neighborhood read left to right and top to bottom in the ABC order shown below. <img src="spaflt.jpg" /><br /></value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.SpatialFilterCommand.#ctor">SpatialFilterCommand()</see></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.OilifyCommand">
      <summary>
            Applies an oil-painting effect to the image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>You control the effect by specifying the size of the 
            neighborhood that is used for calculating the pixel value. For example, 
            for 8x8, set 8 in the Dimension property or pass 8 inthe dimension parameter of the Constructor. You increase the size of the 
            neighborhood in order to decrease the amount of detail in the resulting 
            image.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand" /> on an image and oilifies it.</para>
        <code lang="VB">   Public Sub OllifyCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As OilifyCommand = New OilifyCommand
      'Oilify with neighborhood of 15 x 15 .
      command.Dimension = 15

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void OllifyCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         OilifyCommand command  = new OilifyCommand();
         //Oilify with neighborhood of 15 x 15 .
         command.Dimension      = 15;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OilifyCommand.#ctor">
      <summary>
            Initializes a new OilifyCommand class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OilifyCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new OilifyCommand class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="dimension">Dimensions of the neighborhood used for filtering
             (dimension x dimension), in pixels. Only positive values are accepted.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand" /> on an image and oilifies it.</para>
        <code lang="VB">   Public Sub OllifyConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As OilifyCommand = New OilifyCommand(15)
      ' Oilify with neighborhood of 15 x 15 .
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void OllifyConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         OilifyCommand command  = new OilifyCommand(15);
         // Oilify with neighborhood of 15 x 15 .
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OilifyCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.OilifyCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.OilifyCommand.Dimension">
      <summary>
            Gets or sets the dimensions of the neighborhood used for filtering (Dimension x 
            Dimension), in pixels.
            </summary>
      <noremarks />
      <value>Dimensions of the neighborhood used for filtering (Dimension x
            Dimension), in pixels. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand">
      <summary>
            Combines image data from two images with feathering and constant opacity; by combining the two images with a variable opacity that depends on a fade mask then combine the result with the destination image with a constant opacity. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>To combine two images with a fixed opacity, use the <see cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand" />.</description>
          </item>
          <item>
            <description>To combine two images with a feather, use the <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.</description>
          </item>
          <item>
            <description>The TextureAlphaBlendCommand does the two operations; first it combines the two images with feathering using the fade mask image, then combines the result with the destination image with a fixed opacity.</description>
          </item>
          <item>
            <description>To create an image that contains a fade mask, use <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommand" />.</description>
          </item>
          <item>
            <description>This command can also underlay the fade mask image with the underlay image before using it in the feather combine operation.</description>
          </item>
          <item>
            <description>This command also combines the fade mask image with the underlay image so that it appears to be an underlying texture for the fade mask image.</description>
          </item>
          <item>
            <description>The following is an example for the resulted image using this commands with the following characteristics:<br /><list type="bullet"><item><description>The source image is a red image.</description></item><item><description>The destination image is a white image.</description></item><item><description>The opacity is set to 255.</description></item><item><description>The right image is the result of applying the method without texture image.</description></item><item><description>The left image is the result of applying the method with texture image. <br /><img src="TextureAlphaBlend.jpg" /></description></item></list></description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub TextureAlphaBlendCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Try
         Dim SrcImage As RasterImage
         Dim MaskImage As RasterImage
         Dim underlayImage As RasterImage
            SrcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "image2.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1)
         'Load the fade mask image.
            MaskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "image3.cmp", 24, CodecsLoadByteOrder.Bgr, 1, 1)
         underlayImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Slave.jpg", 4, CodecsLoadByteOrder.Bgr, 1, 1)
         Dim command As TextureAlphaBlendCommand = New TextureAlphaBlendCommand
         command.DestinationRectangle = New LeadRect(0, 0, leadImage.Width, leadImage.Height)
         command.MaskImage = MaskImage
         command.Opacity = 100
         command.SourceImage = SrcImage
         command.UnderlayImage = underlayImage
         command.SourcePoint = New LeadPoint(0, 0)
         ' Combine ImageSource with the affected image, with MaskImage and a 100 opacity.
         command.Run(leadImage)
         codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      Catch ex As Exception
         MessageBox.Show(ex.Message, "TextureAlphaBlendTest", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      End Try

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void TextureAlphaBlendCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterImage SrcImage;
         RasterImage MaskImage;
         RasterImage underlayImage;

         SrcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);
         //Load the fade mask image.
         MaskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "FadeMask.bmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         underlayImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Slave.jpg", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         TextureAlphaBlendCommand command = new TextureAlphaBlendCommand();
         command.DestinationRectangle = new LeadRect(image.Width / 2 - MaskImage.Width / 2, image.Height / 2  - MaskImage.Height / 2, MaskImage.Width, MaskImage.Height);
         command.MaskImage = MaskImage;
         command.Opacity = 100;
         command.SourceImage = SrcImage;
         command.SourcePoint = new LeadPoint(0, 0);
         command.UnderlayImage = underlayImage;
         // Combine ImageSource with the affected image, with MaskImage and a 100 opacity.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.#ctor(Leadtools.RasterImage,Leadtools.LeadPoint,Leadtools.LeadRect,System.Int32,Leadtools.RasterImage,Leadtools.RasterImage,Leadtools.LeadPoint)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="sourceImage">RasterImage object that references the source image.</param>
      <param name="sourcePoint">LeadPoint structure that contains the origin of the source rectangle.</param>
      <param name="destinationRectangle">LeadRect structure that contains the destination rectangle.</param>
      <param name="opacity">Opacity value used when combining the areas from the result of feathering and destination images. Valid values range from 0 to 255.</param>
      <param name="maskImage">RasterImage object that references the fade mask, if you want to combine the two images just with opacity set this parameter to null.</param>
      <param name="underlayImage">RasterImage that references the image to be used as the underlying image. The command will use this image to underlay the mask image. You could ignore this parameter effect by passing null.</param>
      <param name="underlayOffset">References the underlay image offset with respect to the destination image. The command will use this point to calculate the parts of the underlay image that will be applied to the mask image. Using this point gives the user the ability to provide the feel of continuous texture when applying this command to neighboring parts inside the destination image using the same or different mask. If underlayImage is null also set this parameter to null.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub TextureAlphaBlendConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim srcImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 4, CodecsLoadByteOrder.Bgr, 1, 1)
      'Load the fade mask image.
      Dim maskImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "FadeMask.bmp", 4, CodecsLoadByteOrder.Bgr, 1, 1)
      Dim underlayImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Slave.jpg", 4, CodecsLoadByteOrder.Bgr, 1, 1)

      Dim rect As LeadRect = New LeadRect(leadImage.Width \ 2 - maskImage.Width \ 2, leadImage.Height \ 2 - maskImage.Height \ 2, maskImage.Width, maskImage.Height)

      Dim command As TextureAlphaBlendCommand = New TextureAlphaBlendCommand(srcImage, New LeadPoint(0, 0), rect, 100, maskImage, underlayImage, New LeadPoint(150, 10))
      ' Combine ImageSource with the affected image, with MaskImage and a 100 opacity.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void TextureAlphaBlendConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterImage srcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         //Load the fade mask image.
         RasterImage maskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "FadeMask.bmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         RasterImage underlayImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Slave.jpg", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         LeadRect rect = new LeadRect(image.Width / 2 - maskImage.Width / 2, image.Height / 2  - maskImage.Height / 2, maskImage.Width, maskImage.Height);

         TextureAlphaBlendCommand command = new TextureAlphaBlendCommand(srcImage, new LeadPoint(0, 0), rect, 100, maskImage, underlayImage, new LeadPoint(150, 10));

         // Combine ImageSource with the affected image, with MaskImage and a 100 opacity.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.SourceImage">
      <summary>
            RasterImage object that references the source image.
            </summary>
      <noremarks />
      <value>RasterImage object that references the source image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.MaskImage">
      <summary>
            Gets or sets the RasterImage object that references the fade mask.
            </summary>
      <noremarks />
      <value>RasterImage object that references the fade mask. If you want to combine the two images just with opacity set this property to null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.UnderlayImage">
      <summary>
            Gets or sets an RasterImage object that references the image to be used as the underlying image.
            </summary>
      <noremarks />
      <value>RasterImage object that references the image to be used as the underlying image. The command will use this image to underlay the mask image. You could ignore this property effect by passing null.</value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" /> on an image.</para>
        <code lang="VB">   Public Sub UnderlayImagePropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Try
         Dim srcImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 4, CodecsLoadByteOrder.Bgr, 1, 1)

         'Load the fade mask image.
         Dim maskImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "FadeMask.bmp", 4, CodecsLoadByteOrder.Bgr, 1, 1)

         Dim command As TextureAlphaBlendCommand = New TextureAlphaBlendCommand
         command.DestinationRectangle = New LeadRect(leadImage.Width \ 2 - maskImage.Width \ 2, leadImage.Height \ 2 - maskImage.Height \ 2, maskImage.Width, maskImage.Height)
         command.MaskImage = maskImage
         command.Opacity = 100
         command.SourceImage = srcImage
         command.SourcePoint = New LeadPoint(0, 0)
         command.UnderlayImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Slave.jpg", 4, CodecsLoadByteOrder.Bgr, 1, 1)
         command.UnderlayOffset = New LeadPoint(150, 10)
         ' Combine ImageSource with the affected image, with MaskImage and a 100 opacity.
         command.Run(leadImage)
         codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      Catch ex As Exception
         MessageBox.Show(ex.Message, "TextureAlphaBlendTest", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
      End Try

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void UnderlayImagePropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterImage srcImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image3.cmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         //Load the fade mask image.
         RasterImage maskImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "FadeMask.bmp", 4, CodecsLoadByteOrder.Bgr, 1, 1);

         TextureAlphaBlendCommand command = new TextureAlphaBlendCommand();
         command.DestinationRectangle = new LeadRect(image.Width / 2 - maskImage.Width / 2, image.Height / 2  - maskImage.Height / 2, maskImage.Width, maskImage.Height);
         command.MaskImage = maskImage;
         command.Opacity = 100;
         command.SourceImage = srcImage;
         command.SourcePoint = new LeadPoint(0, 0);
         command.UnderlayImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Slave.jpg", 4, CodecsLoadByteOrder.Bgr, 1, 1);
         command.UnderlayOffset = new LeadPoint(150, 10);
         // Combine ImageSource with the affected image, with MaskImage and a 100 opacity.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.DestinationRectangle">
      <summary>
            Gets or sets a LeadRect structure that contains the destination rectangle.
            </summary>
      <noremarks />
      <value>LeadRect structure that contains the destination rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.SourcePoint">
      <summary>
            LeadPoint structure that contains the origin of the source rectangle.
            </summary>
      <noremarks />
      <value>LeadPoint structure that contains the origin of the source rectangle.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.UnderlayOffset">
      <summary>
            LeadPoint structure that contains the underlay image offset with respect to the destination image.
            </summary>
      <noremarks />
      <value>LeadPoint structure that contains the underlay image offset with respect to the destination image. The command will use this point to calculate the parts of the underlay image that will be applied to the mask image. Using this point will give the user the ability to give the feel of continuous texture when applying this method to neighboring parts inside the destination image using the same or different mask. If the UnderlayImage property is set to null also set this property to null.</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.UnderlayImage" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand.Opacity">
      <summary>
            Gets or set the opacity value used when combining the areas from the result of feathering and destination images.
            </summary>
      <noremarks />
      <value>Opacity value used when combining the areas from the result of feathering and destination images. This value ranges from 0 to 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommandType">
      <summary>
            Flag that indicates the type of edge to generate.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommandType.Smooth">
      <summary>
            Generate softer (smoother) edges.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommandType.Solid">
      <summary>
            Generate rougher edges.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand">
      <summary>
            Performs edge detection on the image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command detects the edges in an image and then replaces the values of edges by new values calculated according to the Type.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub EdgeDetectEffectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EdgeDetectEffectCommand = New EdgeDetectEffectCommand
      command.Level = 50
      command.Threshold = 0
      command.Type = EdgeDetectEffectCommandType.Smooth
      ' Apply find edges effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EdgeDetectEffectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EdgeDetectEffectCommand command = new EdgeDetectEffectCommand();
         command.Level     = 50;
         command.Threshold = 0;
         command.Type     = EdgeDetectEffectCommandType.Smooth;
         // Apply find edges effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EdgeDetectEffectCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EdgeDetectEffectCommand command = new EdgeDetectEffectCommand();
         command.Level = 50;
         command.Threshold = 0;
         command.Type = EdgeDetectEffectCommandType.Smooth;
         // Apply find edges effect on the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EdgeDetectEffectCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EdgeDetectEffectCommand = New EdgeDetectEffectCommand()
         command.Level = 50
         command.Threshold = 0
         command.Type = EdgeDetectEffectCommandType.Smooth
         ' Apply find edges effect on the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand.#ctor(System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="level">Level value used to determine the brightness of the edges. Standard value is 50. Range between 1 and 100. Big values will produce bright edges.</param>
      <param name="threshold">Threshold value used to determine which pixels are going to be filtered. If the difference determined for a pixel is less than this value, the pixel is set to 0. If the difference is greater, the filter will be applied to the pixel. This parameter only accepts positive values.</param>
      <param name="type">Flag that indicates the type of edge to generate.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub EdgeDetectEffectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As EdgeDetectEffectCommand
      command = New EdgeDetectEffectCommand(75, 0, EdgeDetectEffectCommandType.Smooth)
      ' Apply find edges effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void EdgeDetectEffectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         EdgeDetectEffectCommand command = new EdgeDetectEffectCommand(75, 0, EdgeDetectEffectCommandType.Smooth);
         // Apply find edges effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void EdgeDetectEffectConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         EdgeDetectEffectCommand command = new EdgeDetectEffectCommand(75, 0, EdgeDetectEffectCommandType.Smooth);
         // Apply find edges effect on the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub EdgeDetectEffectConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As EdgeDetectEffectCommand = New EdgeDetectEffectCommand(75, 0, EdgeDetectEffectCommandType.Smooth)
         ' Apply find edges effect on the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand.Level">
      <summary>
            Gets or sets the level value used to determine the brightness of the edges.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Level value used to determine the brightness of the edges. Standard value is 50. Range is between 1 and 100. Big values will produce bright edges.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand.Threshold">
      <summary>
            Gets or sets the threshold value used to determine which pixels are going to be filtered.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Threshold value used to determine which pixels are going to be filtered. If the difference determined for a pixel is less than this value, the pixel is set to 0. If the difference is greater, the filter will be applied to the pixel. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand.Type">
      <summary>
            Flag that indicates the type of edge to generate.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Flag that indicates the type of edge to generate.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.UserFilterCommandType">
      <summary>
        <para>Enumeration that indicates the type of operation.</para>
        <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.UserFilterCommandType.Sum">
      <summary>
            Perform sum operation.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.UserFilterCommandType.Maximum">
      <summary>
            Perform maximum operation.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.UserFilterCommandType.Minimum">
      <summary>
            Perform minimum operation. 
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.UserFilterCommand">
      <summary>
            Filters the image based on a user-defined filter / mask. This command is similar to the spatial and binary filter commands. 
            
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>With this command you can create a user-defined filter and apply it to the image.
            The filter has a rectangular form (matrix) where the values are user-defined. 
            It allows the creation of simple customized filters, where each value in matrix is multiplied by the corresponding pixel, 
            and then the specified operation is performed on the results.</description>
          </item>
          <item>
            <description>When the filter is applied to pixels from the edge and you choose the sum operation, the edge rows and columns are duplicated. For example, if the pixel (-1, 5) is needed, the pixel (0, 5) is used instead.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" /> on an image, In this example the high pass.filter will be applied using user defined matrix.</para>
        <code lang="VB">   Public Sub UserFilterCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim i As Integer
      Dim j As Integer
      Dim matrix() As Integer
      ReDim matrix(8)

      Dim command As UserFilterCommand = New UserFilterCommand
      command.CenterPoint = New LeadPoint(1, 1)
      command.Divisor = 1
      command.Offset = 0
      command.Type = UserFilterCommandType.Sum
      command.FilterHeight = 3
      command.FilterWidth = 3
      command.Matrix = matrix

      ' Initialize the array with factor used to apply the high pass filter.
      For i = 0 To 2
         For j = 0 To 2
            If (j = 1 Or i = 1) Then
               If (j = 1 And i = 1) Then
                  command.Matrix(i * 3 + j) = 5
               Else
                  command.Matrix(i * 3 + j) = -1
               End If
            Else
               command.Matrix(i * 3 + j) = 0
            End If
         Next
      Next

      ' Apply the high pass custom filter.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void UserFilterCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int i, j;
         UserFilterCommand command = new UserFilterCommand();
         command.CenterPoint = new LeadPoint(1, 1);
         command.Divisor = 1;
         command.Offset = 0;
         command.Type = UserFilterCommandType.Sum;
         command.FilterHeight = 3;
         command.FilterWidth = 3;
         command.Matrix = new int[9];

         // Initialize the array with factor used to apply the high pass filter.
         for(i = 0; i &lt; 3; i++)
         {
            for(j = 0; j &lt; 3; j++)
            {
               if(j == 1 || i == 1) 
               {
                  if(j == 1 &amp;&amp; i == 1) 
                     command.Matrix[i * 3 + j] = 5; 
                  else 
                     command.Matrix[i * 3 + j] = -1; 
               }
               else
                  command.Matrix[i * 3 + j] = 0; 
            }
         }

         // Apply the high pass custom filter.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void UserFilterCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int i, j;
         UserFilterCommand command = new UserFilterCommand();
         command.CenterPoint = new LeadPoint(1, 1);
         command.Divisor = 1;
         command.Offset = 0;
         command.Type = UserFilterCommandType.Sum;
         command.FilterHeight = 3;
         command.FilterWidth = 3;
         command.Matrix = new int[9];
         // Initialize the array with factor used to apply the high pass filter.
         for (i = 0; i &lt; 3; i++)
         {
            for (j = 0; j &lt; 3; j++)
            {
               if (j == 1 || i == 1)
               {
                  if (j == 1 &amp;&amp; i == 1)
                     command.Matrix[i * 3 + j] = 5;
                  else
                     command.Matrix[i * 3 + j] = -1;
               }
               else
                  command.Matrix[i * 3 + j] = 0;
            }
         }

         // Apply the high pass custom filter.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub UserFilterCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim i, j As Integer
         Dim command As UserFilterCommand = New UserFilterCommand()
         command.CenterPoint = New LeadPoint(1, 1)
         command.Divisor = 1
         command.Offset = 0
         command.Type = UserFilterCommandType.Sum
         command.FilterHeight = 3
         command.FilterWidth = 3
         command.Matrix = New Integer(8){}
         ' Initialize the array with factor used to apply the high pass filter.
         For i = 0 To 2
            For j = 0 To 2
               If j = 1 OrElse i = 1 Then
                  If j = 1 AndAlso i = 1 Then
                     command.Matrix(i * 3 + j) = 5
                  Else
                     command.Matrix(i * 3 + j) = -1
                  End If
               Else
                  command.Matrix(i * 3 + j) = 0
               End If
            Next j
         Next i

         ' Apply the high pass custom filter.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UserFilterCommand.#ctor">
      <summary>
            Initializes a new UserFilterCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UserFilterCommand.#ctor(System.Int32,System.Int32,Leadtools.LeadPoint,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.UserFilterCommandType,System.Int32[])">
      <summary>
            Initializes a new UserFilterCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="filterWidth">Number of columns in the user-defined array (mask). This parameter only accepts positive values.</param>
      <param name="filterHeight">Number of rows in the user-defined array (mask). This parameter only accepts positive values.</param>
      <param name="centerPoint">Any two-dimensional position of the matrix array, to be used as the matrix (mask)center.</param>
      <param name="divisor">Value used to divide the final result of the output.  This must be a non-zero value. 
            If you want to use floating point values for the matrix elements and the divisor, multiply the matrix elements and the divisor with the same value (for example, 10, 100, 1000). This parameter only accepts positive values.</param>
      <param name="offset">Value used to offset the final result of the output.</param>
      <param name="type">Flag that indicates the type of operation.</param>
      <param name="matrix">Array of (filterWidth * filterHeight) integers  containing the user-defined matrix (mask). The elements are stored in row order (first row, second row, etc).</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" /> on an image, In this example the high pass.filter will be applied using user defined matrix.</para>
        <code lang="VB">   Public Sub UserFilterConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim i As Integer
      Dim j As Integer
      Dim matrix() As Integer
      ReDim matrix(8)

      ' Initialize the array with factor used to apply the high pass filter.
      For i = 0 To 2
         For j = 0 To 2
            If (j = 1 Or i = 1) Then
               If (j = 1 And i = 1) Then
                  matrix(i * 3 + j) = 5
               Else
                  matrix(i * 3 + j) = -1
               End If
            Else
               matrix(i * 3 + j) = 0
            End If
         Next
      Next

      Dim command As UserFilterCommand = New UserFilterCommand(3, 3, New LeadPoint(1, 1), 1, 0, UserFilterCommandType.Sum, matrix)
      ' Apply the high pass custom filter.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void UserFilterConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int [] matrix = new int[9];

         // Initialize the array with factor used to apply the high pass filter.
         for(int i = 0; i &lt; 3; i++)
         {
            for(int j = 0; j &lt; 3; j++)
            {
               if(j == 1 || i == 1)
               {
                  if(j == 1 &amp;&amp; i == 1)
                     matrix[i * 3 + j] = 5;
                  else 
                     matrix[i * 3 + j] = -1;
               }
               else
                  matrix[i * 3 + j] = 0;
            }
         }

         UserFilterCommand command = new UserFilterCommand(3, 3, new LeadPoint(1, 1), 1, 0, UserFilterCommandType.Sum, matrix);
         // Apply the high pass custom filter.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void UserFilterConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[] matrix = new int[9];
         // Initialize the array with factor used to apply the high pass filter.
         for (int i = 0; i &lt; 3; i++)
         {
            for (int j = 0; j &lt; 3; j++)
            {
               if (j == 1 || i == 1)
               {
                  if (j == 1 &amp;&amp; i == 1)
                     matrix[i * 3 + j] = 5;
                  else
                     matrix[i * 3 + j] = -1;
               }
               else
                  matrix[i * 3 + j] = 0;
            }
         }

         UserFilterCommand command = new UserFilterCommand(3, 3, new LeadPoint(1, 1), 1, 0, UserFilterCommandType.Sum, matrix);
         // Apply the high pass custom filter.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub UserFilterConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim matrix As Integer() = New Integer(8){}
         ' Initialize the array with factor used to apply the high pass filter.
         For i As Integer = 0 To 2
            For j As Integer = 0 To 2
               If j = 1 OrElse i = 1 Then
                  If j = 1 AndAlso i = 1 Then
                     matrix(i * 3 + j) = 5
                  Else
                     matrix(i * 3 + j) = -1
                  End If
               Else
                  matrix(i * 3 + j) = 0
               End If
            Next j
         Next i

         Dim command As UserFilterCommand = New UserFilterCommand(3, 3, New LeadPoint(1, 1), 1, 0, UserFilterCommandType.Sum, matrix)
         ' Apply the high pass custom filter.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UserFilterCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.UserFilterCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UserFilterCommand.FilterWidth">
      <summary>
            Gets or sets the number of columns in the user-defined array (mask).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Number of columns in the user-defined array (mask). This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UserFilterCommand.FilterHeight">
      <summary>
            Gets or sets the number of rows in the user-defined array (mask).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Number of rows in the user-defined array (mask). This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UserFilterCommand.CenterPoint">
      <summary>
            Gets or sets a point structure that contains a two-dimensional position of the Matrix array, to be used as the matrix (mask)center.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>LeadPoint structure that contains a two-dimensional position of the Matrix array, to be used as the matrix (mask)center.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UserFilterCommand.Divisor">
      <summary>
            Gets or sets a value used to divide the final result of the output.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value used to divide the final result of the output.  This must be a non-zero value. 
            If you want to use floating point values for the matrix elements and the divisor, multiply the matrix elements and the divisor with the same value (for example, 10, 100, 1000). This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UserFilterCommand.Offset">
      <summary>
            Gets or sets a value used to offset the final result of the output.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value used to offset the final result of the output.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UserFilterCommand.Type">
      <summary>
            Gets or sets a flag that indicates the type of operation.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Flag that indicates the type of operation.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.UserFilterCommand.Matrix">
      <summary>
            Gets or sets an array of (FilterWidth * FilterHeight) integers  containing the user-defined matrix (mask). The elements are stored in row order (first row, second row, etc).
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Array of (FilterWidth * FilterHeight) integers  containing the user-defined matrix (mask). The elements are stored in row order (first row, second row, etc).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.MosaicCommand">
      <summary>
            Imposes a mosaic effect on an image by dividing the image into tiles of 
            a specified size and changing the color of all pixels in each tile to the
            average color of pixels within the tile.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand" /> on an image and applies a mosaic effect.</para>
        <code lang="VB">   Public Sub MosiacCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MosaicCommand = New MosaicCommand
      'Apply a mosaic effect with 7x7 tiles.
      command.Dimension = 7

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MosiacCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MosaicCommand command   = new MosaicCommand();
         //Apply a mosaic effect with 7x7 tiles.
         command.Dimension = 7;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MosaicCommand.#ctor">
      <summary>
            Initializes a new MosaicCommand class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MosaicCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new MosaicCommand class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="dimension">Dimensions of the tiles (dimension x 
            dimension), in pixels. Only positive values are accepted.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand" /> on an image and applies a mosaic effect.</para>
        <code lang="VB">   Public Sub MosiacConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MosaicCommand = New MosaicCommand(7)
      'Apply a mosaic effect with 7x7 tiles.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MosiacConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MosaicCommand command = new MosaicCommand(7);
         //Apply a mosaic effect with 7x7 tiles.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MosaicCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.MosaicCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.MosaicCommand.Dimension">
      <summary>
            Gets or sets the dimensions of the tiles (Dimension x Dimension), in pixels.
            </summary>
      <noremarks />
      <value>Dimensions of the tiles (Dimension x Dimension), in pixels. Only positive values are accepted.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags">
      <summary>
            Flags that indicate how the fade mask will be created.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags.None">
      <summary>
            do nothing
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags.FadeOutsideRegion">
      <summary>
            If this flag is set, the fade will be outside the image's region. If this flag is not set, the fade will be inside the image's region.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags.FillWithDumpColor">
      <summary>
            If this flag is set, the dump part of the mask will be filled with the dump color. The DumpColorStart and FadeWhiteToBlack flags determine the dump color. If this flag is not set, the dump part is filled with the Transparent color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags.DumpColorStart">
      <summary>
            If this flag is set, the dump color is the color used at the start of the fade. The start color may be white or black, based on the FadeWhiteToBlack. If this flag is not set, the dump color is the color at the end of the fade. If the FillWithDumpColor flag is not set, this flag is ignored.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags.FadeWhiteToBlack">
      <summary>
            If this flag is set, the fade starts with white and changes toward black. If this flag is not set, the fade changes from black to white.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags.NoTransparencyFill">
      <summary>
            If this flag is set, fill the transparency part with a color other than Transparent. The color is either the same as the dump color, or its opposite, depending on whether the TransparencyAsDump flag is set. If the NoTransparencyFill flag is not set, fill the transparency with Transparent. If the FillWithDumpColor flag is not set, this flag is ignored.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags.TransparencyAsDump">
      <summary>
            If this flag is set, the transparency color is the same as the dump color. If this flag is not set, the transparency color is the opposite of the dump color. This flag is used only if NoTransparencyFill is set.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.FadedMaskCommand">
      <summary>
            Creates a fade mask image in which the color of each pixel is changed with respect to its position in the image. This change depends on the fade rate. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command is concerned with the size and shape of the region, not the image itself. Therefore, any image with a region can be used to create a fade mask image. The fade mask image can be used by the <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> to combine two images with feathering.</description>
          </item>
          <item>
            <description>If the <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags" />.FadeOutsideRegion flag is not set, then the size of the fade mask image is equal to the size of a region and the fade progresses toward the center of the region. If the <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags" />.FadeOutsideRegion flag is set, the size is equal to the size of region plus the Inflate value and the fade starts at the edge of the region and progresses toward the edge of the fade mask image. (The Inflate value is used only with <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags" />.FadeOutsideRegion flag).</description>
          </item>
          <item>
            <description>In order to use the fade mask image in the <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" /> the fade mask image must contain three portions:<br /><list type="bullet"><item><description>A portion in which the output (from the blending method) will be the same as the destination image. This is called the Transparency portion of the mask and it’s filled with black.</description></item><item><description>A portion in which the output is a combination of the destination and source image.</description></item><item><description>A portion in which the output comes from the source image. This is called the Dump portion of the mask and it’s filled with white.</description></item></list></description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command supports 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.UsingTheCreateFadedMaskMethod">Using the FadedMask Method</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.UsingTheCreateFadedMaskMethod">Using the FadedMask Method</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FadedMaskCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FadedMaskCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags,System.Int32,Leadtools.RasterColor)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="length">Value that represents the extent of the fade, in pixels.</param>
      <param name="fadeRate">Value that represents the rate at which the color will fade with each step. Values are between 0 and 255.</param>
      <param name="stepSize">Step size at which the color will change. This value is in pixels.</param>
      <param name="inflate">Value used to expand the resulting image. This parameter is valid only when <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags" />.FadeOutsideRegion flag is set.</param>
      <param name="flags">Flags that indicate how the fade mask will be created.</param>
      <param name="maximumGray">The maximum value of the fade color. Possible values are between 0 and 255.</param>
      <param name="transparent">Contains the transparency color.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FadedMaskCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.FadedMaskCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.Length">
      <summary>
            Gets or sets a value that represents the extent of the fade.
            </summary>
      <noremarks />
      <value>Value that represents the extent of the fade, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.FadeRate">
      <summary>
            Gets or sets a value that represents the rate at which the color will fade with each step.
            </summary>
      <noremarks />
      <value>Value that represents the rate at which the color will fade with each step. Values are between 0 and 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.StepSize">
      <summary>
            Gets or sets a value that represents the step size at which the color will change.
            </summary>
      <noremarks />
      <value>Step size at which the color will change. This value is in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.Inflate">
      <summary>
            Gets or sets a value used to expand the resulting image.
            </summary>
      <noremarks />
      <value>Value used to expand the resulting image. This property is valid only when <see cref="T:Leadtools.ImageProcessing.Effects.FadedMaskCommandFlags" />.FadeOutsideRegion is set in the Flag property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.Flags">
      <summary>
            Gets or sets flags that indicate how the fade mask will be created.
            </summary>
      <noremarks />
      <value>Flags that indicate how the fade mask will be created.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.MaximumGray">
      <summary>
            Gets or sets the maximum value of the fade color.
            </summary>
      <noremarks />
      <value>The maximum value of the fade color. Possible values are between 0 and 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.Transparent">
      <summary>
            Gets or sets the transparency color.
            </summary>
      <noremarks />
      <value>The transparency color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.FadedMaskCommand.MaskImage">
      <summary>
            RasterImage object that references a 24-bit image in which the fade mask will be created.
            </summary>
      <noremarks />
      <value>RasterImage object that references a 24-bit image in which the fade mask will be created.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.FeatherAlphaBlendCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand">
      <summary>
            Removes all the holes in a region. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> Toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command is designed to work on images that have a region. It removes the holes from the image's region. If this command is used with an image that does not have a region, the "Invalid Parameter" error is returned.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command supports 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RegionHolesRemovalCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim rcRect As LeadRect = New LeadRect(leadImage.Width \ 8, leadImage.Height \ 8, leadImage.Width \ 2 + leadImage.Width \ 8, leadImage.Height \ 2 + leadImage.Height \ 8)
      leadImage.AddEllipseToRegion(Nothing, rcRect, RasterRegionCombineMode.SetNot)
      Dim command As RegionHolesRemovalCommand = New RegionHolesRemovalCommand
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RegionHolesRemovalCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadRect rcRect = new LeadRect(image.Width / 8, image.Height / 8, image.Width / 2 + image.Width / 8, image.Height / 2 + image.Height / 8);
         image.AddEllipseToRegion(null, rcRect, RasterRegionCombineMode.SetNot);
         RegionHolesRemovalCommand command = new RegionHolesRemovalCommand();
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Leadtools.Topics.CleaningUp1bitImages.html">Cleaning Up 1-Bit Images</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SmoothCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.BorderRemoveCommand" /><seealso cref="T:Leadtools.ImageProcessing.Core.LineRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.InvertedTextCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.InvertedPageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DotRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HighQualityRotateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.RegionHolesRemovalCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.HighPassCommand">
      <summary>
            Removes low frequency details in an image, resulting in a sharpened image. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command removes low-frequency detail in the image. The method is opposite to that of the Gaussian Blur method</description>
          </item>
          <item>
            <description>To increase the thickness of the edges, increase the value of radius. Usually a low value for radius is better.</description>
          </item>
          <item>
            <description>Unlike the UnsharpMaskCommand, when using this command, the low frequency features are removed from the image.</description>
          </item>
          <item>
            <description>As an example, if you use the following image:<br /><img src="highpassfilterBefore.jpg"><br />
            And you were to call HighPassCommand using the following settings:<br /><table><tr><td><b>Parameter</b></td><td><b>Value</b></td></tr><tr><td>Radius</td><td>6</td></tr><tr><td>Opacity</td><td>100</td></tr></table><br />
            The following figure results:<br /><img src="highpassfilter.jpg" /></img></description>
          </item>
          <item>
            <description>If the image has a region, the command will be applied on the region only.</description>
          </item>
          <item>
            <description>This command supports 12- and 16-bit grayscale and 48- and 64-bit color images. Support for 12- and 16-bit grayscale and 48- and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand" /> on an image and applies the HighPass filter.</para>
        <code lang="VB">   Public Sub HighPassCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As HighPassCommand = New HighPassCommand
      command.Radius = 6
      command.Opacity = 100
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HighPassCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HighPassCommand command = new HighPassCommand () ;
         command.Radius = 6 ;
         command.Opacity = 100 ;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HighPassCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HighPassCommand command = new HighPassCommand();
         command.Radius = 6;
         command.Opacity = 100;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub HighPassCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HighPassCommand = New HighPassCommand()
         command.Radius = 6
         command.Opacity = 100
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.GaussianCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.HighPassCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand" /> example.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.HighPassCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="radius">Value greater than 0 that indicates the radius of the neighborhood on which the filter is applied, in pixels.</param>
      <param name="opacity">Value that represents the intensity of the effect. The valid range is from 0 to 100. At 100, only the object outlines remain.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand" /> on an image and applies the HighPass filter.</para>
        <code lang="VB">   Public Sub HighPassConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As HighPassCommand = New HighPassCommand(6, 100)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HighPassConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HighPassCommand command = new HighPassCommand (6, 100) ;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HighPassConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HighPassCommand command = new HighPassCommand(6, 100);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub HighPassConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HighPassCommand = New HighPassCommand(6, 100)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.HighPassCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.HighPassCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.HighPassCommand.Radius">
      <summary>
            Gets or sets the value that indicates the radius of the neighborhood on which the filter is applied.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the radius of the neighborhood on which the filter is applied. Valid values are greater than 0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand" /> example.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.HighPassCommand.Opacity">
      <summary>
            Gets or sets the value that indicates the intensity of the effect.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Value that indicates the intensity of the effect. The valid range is from 0 to 100. At 100, only the object outlines remain.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand" /> example.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.SkeletonCommand">
      <summary>
            Finds the skeleton of objects or regions in the image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Medical</see> Toolkits.
            </summary>
      <keywords>Binarize</keywords>
      <keywords>Color reduction</keywords>
      <keywords>Down sampling</keywords>
      <keywords>Color resolution</keywords>
      <keywords>Intensity detection</keywords>
      <keywords>Bitonal images</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command finds the skeleton of regions or objects in a binary image. 
            The white color represents the objects and the black color represents the background. If the image is not a 1-bit image, 
            the Threshold will be used to transform the image into a binary image before finding the skeleton.</description>
          </item>
          <item>
            <description>If the image has a region, this command works only on the region.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. 
            Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SkeletonCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SkeletonCommand = New SkeletonCommand
      command.Threshold = 128
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SkeletonCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SkeletonCommand command = new SkeletonCommand();
         command.Threshold = 128;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SkeletonCommand.#ctor">
      <summary>
            Initializes a new SkeletonCommand class object with default parameters.
            </summary>
      <noremarks />
      <keywords>Binarize</keywords>
      <keywords>Color reduction</keywords>
      <keywords>Down sampling</keywords>
      <keywords>Color resolution</keywords>
      <keywords>Intensity detection</keywords>
      <keywords>Bitonal images</keywords>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SkeletonCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new SkeletonCommand class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="threshold">Threshold value used to binarize the image before finding the skeleton; this parameter is ignored if the image is a binary image. This parameter only accepts positive values.</param>
      <keywords>Binarize</keywords>
      <keywords>Color reduction</keywords>
      <keywords>Down sampling</keywords>
      <keywords>Color resolution</keywords>
      <keywords>Intensity detection</keywords>
      <keywords>Bitonal images</keywords>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SkeletonConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SkeletonCommand = New SkeletonCommand(128)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SkeletonConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SkeletonCommand command = new SkeletonCommand(128);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SkeletonCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SkeletonCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SkeletonCommand.Threshold">
      <summary>
            Gets or sets the threshold value used to binarize the image before finding the skeleton.
            </summary>
      <noremarks />
      <value>Threshold value used to binarize the image before finding the skeleton. This property is ignored if the image is a binary image. This property only accepts positive values.</value>
      <keywords>Binarize</keywords>
      <keywords>Color reduction</keywords>
      <keywords>Down sampling</keywords>
      <keywords>Color resolution</keywords>
      <keywords>Intensity detection</keywords>
      <keywords>Bitonal images</keywords>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.SharpenCommand">
      <summary>
            Increases or decreases the sharpness of a specific image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Negative sharpness values decrease the sharpness of the image. 
            Specify -1000 for minimum sharpness. Positive sharpness values increase the 
            sharpness. Specify +1000 for maximum sharpness.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand" /> on an image and increases its sharpness.</para>
        <code lang="VB">   Public Sub SharpenCommandCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SharpenCommand = New SharpenCommand
      'Increase the sharpness by 25 percent  of the possible range.
      command.Sharpness = 250

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SharpenCommandCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SharpenCommand command = new SharpenCommand();
         //Increase the sharpness by 25 percent  of the possible range.
         command.Sharpness      = 950;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SharpenCommandCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SharpenCommand command = new SharpenCommand();
         //Increase the sharpness by 25 percent  of the possible range.
         command.Sharpness = 950;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SharpenCommandCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SharpenCommand = New SharpenCommand()
         'Increase the sharpness by 25 percent  of the possible range.
         command.Sharpness = 950
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SharpenCommand.#ctor">
      <summary>
            Initializes a new SharpenCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SharpenCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new SharpenCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="sharpness">The amount to change the sharpness. Valid 
            values range from -1000 to +1000. Negative sharpness values decrease the sharpness of the image. 
            Specify -1000 for minimum sharpness. Positive sharpness values increase the 
            sharpness. Specify +1000 for maximum sharpness.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand" /> on an image and increases its sharpness.</para>
        <code lang="VB">   Public Sub SharpenCommandConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SharpenCommand = New SharpenCommand(250)
      ' Increase the sharpness by 25 percent  of the possible range.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SharpenCommandConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SharpenCommand command = new SharpenCommand(950);
         // Increase the sharpness by 95 percent of the possible range.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SharpenCommandConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SharpenCommand command = new SharpenCommand(950);
         // Increase the sharpness by 95 percent of the possible range.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SharpenCommandConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SharpenCommand = New SharpenCommand(950)
         ' Increase the sharpness by 95 percent of the possible range.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SharpenCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.SharpenCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.SharpenCommand.Sharpness">
      <summary>
            Gets or sets the amount to change the sharpness.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>The amount to change the sharpness. Valid values range from -1000 to +1000. Negative sharpness values decrease the sharpness of the image. 
            Specify -1000 for minimum sharpness. Positive sharpness values increase the 
            sharpness. Specify +1000 for maximum sharpness.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommandType">
      <summary>
             Enumeration that indicates whether to contract or expand the image region.
             </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.ResizeRegionCommandType.ExpandRegion">
      <summary>
            Expand the region.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.ResizeRegionCommandType.ContractRegion">
      <summary>
            Contract the region.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand">
      <summary>
            Resizes an image region by a specific number of pixels.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command keeps the same image and resizes the image region that it references.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command supports 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ResizeRegionCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ResizeRegionCommand = New ResizeRegionCommand
      Dim rRgnRect As LeadRect = New LeadRect(20, 20, 100, 100)   'Rectangle that defines the region .
      'Create an elliptical region.
      leadImage.AddEllipseToRegion(Nothing, rRgnRect, RasterRegionCombineMode.Set)
      command.AsFrame = False
      'Contract the image region by 20 pixels.
      command.Dimension = 20
      command.Type = ResizeRegionCommandType.ContractRegion
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ResizeRegionCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ResizeRegionCommand command = new ResizeRegionCommand();
         LeadRect rRgnRect = new LeadRect(80, 20, 100, 40);  //Rectangle that defines the region .
         //Create an elliptical region.
         image.AddEllipseToRegion(null, rRgnRect, Leadtools.RasterRegionCombineMode.Set);
         command.AsFrame = false;
         //Contract the image region by 20 pixels.
         command.Dimension = 20;
         command.Type = ResizeRegionCommandType.ContractRegion;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.ResizeCommand">
      </seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ResizeRegionCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ResizeRegionCommand.#ctor(System.Int32,Leadtools.ImageProcessing.Effects.ResizeRegionCommandType,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="dimension">Number of pixels by which to resize the region. This parameter only accepts positive values.</param>
      <param name="type">Value that indicates whether to contract or expand the image region.</param>
      <param name="asFrame">Value that indicates whether to create a frame associated with the resized image region. If this parameter is true, then the command creates a frame of thickness "dimension" for the resized region. If the type parameter is <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommandType" />.ExpandRegion, the frame created will exist outside the boundaries of the resized region. If the type parameter is <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommandType" />.ContractRegion, the frame will be within the boundaries of the resized region. If this parameter is false then the command resizes the region only, and does not create a frame.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ResizeRegionConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim rRgnRect As LeadRect = New LeadRect(80, 20, 100, 40)   'Rectangle that defines the region .
      'Create an elliptical region.
      leadImage.AddEllipseToRegion(Nothing, rRgnRect, RasterRegionCombineMode.Set)
      Dim command As ResizeRegionCommand = New ResizeRegionCommand(20, ResizeRegionCommandType.ContractRegion, True)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ResizeRegionConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //Rectangle that defines the region .
         LeadRect rRgnRect = new LeadRect(80, 20, 100, 40);
         //Create an elliptical region.
         image.AddEllipseToRegion(null, rRgnRect, RasterRegionCombineMode.Set);
         ResizeRegionCommand command = new ResizeRegionCommand(20, ResizeRegionCommandType.ContractRegion, true);
         //Contract the image region by 20 pixels.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ResizeRegionCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.ResizeRegionCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ResizeRegionCommand.Dimension">
      <summary>
            Gets or sets the number of pixels by which to resize the region.
            </summary>
      <noremarks />
      <value>Number of pixels by which to resize the region. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ResizeRegionCommand.AsFrame">
      <summary>
            Gets or sets a value that indicates whether to create a frame associated with the resized image region.
            </summary>
      <noremarks />
      <value>Value that indicates whether to create a frame associated with the resized image region. If this property is true, then the command creates a frame with the thickness set in the Dimension property for the resized region. If the Type property is <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommandType" />.ExpandRegion, the frame created will exist outside the boundaries of the resized region. If the Type property is <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommandType" />.ContractRegion, the frame will be within the boundaries of the resized region. If this property is false then the command resizes the region only, and does not create a frame.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.ResizeRegionCommand.Type">
      <summary>
            Gets or sets a value that indicates whether to contract or expand the image region.
            </summary>
      <noremarks />
      <value>Value that indicates whether to contract or expand the image region.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.ResizeRegionCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.CurvePointsType">
      <summary>
        <para>Enumeration that indicates the method to be used to update the curve array.</para>
        <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CurvePointsType.Curve">
      <summary>
            Fill curve array with the best curve that passes through the user points.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CurvePointsType.Linear">
      <summary>
             Fill curve array with lines that pass through the user points.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">
      <summary>
        <para>Enumeration that indicates the function used to update the lookup table.</para>
        <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags.Exponential">
      <summary>
            Apply the exponential function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags.Logarithm">
      <summary>
            Apply the natural logarithm function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags.Linear">
      <summary>
            Apply the linear function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags.Sigmoid">
      <summary>
            Apply the sigmoid function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags.Signed">
      <summary>
            Signed, the <paramref name="lookupTable" /> parameter of <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetFunctionalLookupTable(System.Int32[],System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags)" /> should contain signed data.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.EffectsUtilities">
      <summary>
            Effect utility class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" /> and <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />examples.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.EffectsUtilities" /> class object with default parameters.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetCurvePoints(System.Int32[],Leadtools.LeadPoint[],Leadtools.ImageProcessing.Effects.CurvePointsType)">
      <summary>
            Updates the curve array based on a curve or lines that pass through the specified points.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="curve">Array of integers to be filled by this method. To get the real value of the array elements, each of the values must be divided by 1000.</param>
      <param name="userPoints">Array of LeadPoint structures that contain the points on the curve used to determine the values of curve array. The minimum x coordinate value is 0.</param>
      <param name="type">Flag that indicates the method to be used to update the curve array.</param>
      <returns>return the number of entries in curve array that were actually updated by this method.</returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will update curve array using either the best curve or lines that pass through the points specified in the 
            userPoints array. The points in the array may be sorted or not. In most cases, this method is used with the 
            <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" />, or <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" /> .</description>
          </item>
          <item>
            <description>To compute the size of the curve array:
            <br>Size = Maximum (userPoint.X) + userPoints.Length;</br><br>This means that the user needs to find the maximum x coordinate value out of <b>userPoint</b> and add the number of Points (userPoints.Length) sent to the method.</br></description>
          </item>
          <item>
            <description>It's recommended to initialize the array <b>curve</b> before sending it to the function.</description>
          </item>
          <item>
            <description>The values stored in curve represent the y coordinates of the calculated curve based on the points in the userPoint array. 
            In the curve array there can be only one y value for each x coordinate.
             Therefore, circles, ellipses, and spirals cannot be represented by curve.</description>
          </item>
          <item>
            <description>The x coordinates for the user points are sorted internally automatically.</description>
          </item>
        </list>
      </remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand" /> and <see cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand" />examples.
            </example>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetFunctionalLookupTable(System.Int32[],System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags)">
      <summary>
            Updates a range of entries in the lookup table, based on the specified mathematical function.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="lookupTable">Lookup table array to be filled by this method. The user must set the first and the last element of the lookup table manually (i.e. lookupTable[0] = firstValue; lookupTable[tableSize - 1] = lastValue;), if you set the first element to last value and the last element to the first value then the lookup table will become inverted.</param>
      <param name="start">Index of the first entry in the lookup table to update. The indices of the table correspond to the intensity values. If this parameter has a negative value the corresponding index to <paramref name="lookupTable" /> is equal to its value + its length. The range of its possible value is between (-<paramref name="lookupTable" /> length/2) and (<paramref name="lookupTable" /> length/2 - 1).</param>
      <param name="end">Index of the last entry in the lookup table to update. The indices of the table correspond to the intensity values. If this parameter has a negative value the corresponding index to <paramref name="lookupTable" /> is equal to its value + its length. The range of its possible value is between (-<paramref name="lookupTable" /> length/2) and (<paramref name="lookupTable" /> length/2 - 1).</param>
      <param name="factor">Value that indicates the factor to be applied in the function operation specified in the <paramref name="flags" /> parameter.
             This parameter is used only if <paramref name="flags" /> is set to <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Exponential</see>, 
             <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Sigmoid</see> or <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Logarithm</see>. 
             If <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Exponential</see> or 
             <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Sigmoid</see> is set, the value of this 
             parameter can be any integer (+/-). If <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Logarithm</see> 
             is set, its value should be &gt;= 0. However, if <paramref name="factor" /> = 0, the lookup table will be filled linearly from start to end, regardless of the value set in <paramref name="flags" />.</param>
      <param name="flags">Flags that indicate the function used to update the lookup table and whether or not the <paramref name="lookupTable" /> should contain signed or unsigned data.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will update the lookup table array using the predefined function specified in the <paramref name="flags" /> parameter. In most cases, this method is used with <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" />.</description>
          </item>
          <item>
            <description>The <paramref name="factor" /> parameter is used for logarithm, exponential and sigmoid functions only. If <paramref name="factor" /> = 0, the method performs a linear interpolation between the two points start and end and stores the results in the lookup table, regardless of the value set in <paramref name="flags" />.</description>
          </item>
          <item>
            <description>If <paramref name="flags" /> parameter is set to <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Exponential</see>, the value of <paramref name="factor" /> modifies the lookup table values (see figure below) according to the following equations:
            <br><table><tr><td>Y</td><td><center>=</center></td><td><center>YStart</center></td><td><center>+</center></td><td><u><center>(YEnd - YStart) * (Exp ((factor/10.0 * (x-start))/(end-start)) - firstValue)</center></u></td></tr><tr><td></td><td></td><td></td><td></td><td><center>(lastValue - firstValue)</center></td></tr></table></br><br>YStart = The <paramref name="lookupTable" /> value at start.</br><br>YEnd = The <paramref name="lookupTable" /> value at end.</br><br>firstValue = Exp(0).</br><br>lastValue  = Exp(factor)</br><br>x = the intensity value of the selected point</br><br><img src="WinLevel2.gif" /></br></description>
          </item>
          <item>
            <description>If the <paramref name="flags" /> parameter is set to  <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Logarithm</see>, the value of <paramref name="factor" /> modifies the lookup table values (see figure below) according to the following equations:
            <br><table><tr><td>Y</td><td><center>=</center></td><td><center>YStart</center></td><td><center>+</center></td><td><u><center>(YEnd - YStart) * (Log (1 + (factor/10.0 * (x-start))/(end- start)) - firstValue)</center></u></td></tr><tr><td></td><td></td><td></td><td></td><td><center>(lastValue - firstValue)</center></td></tr></table></br><br>YStart = The <paramref name="lookupTable" /> value at start.</br><br>YEnd = The <paramref name="lookupTable" /> value at end.</br><br>firstValue = 0.</br><br>lastValue  = Log(1 + nFactor).</br><br>x = the intensity value of the selected point</br><br><img src="WinLevel1.gif" /></br></description>
          </item>
          <item>
            <description>If the <paramref name="flags" /> parameter is set to <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Sigmoid</see>, the value of <paramref name="factor" /> modifies the lookup table values (see figure below) according to the following equations:
            <br><table><tr><td>Y</td><td><center>=</center></td><td><center>YStart</center></td><td><center>+</center></td><td><u><center>(YEnd - YStart) * (1.0/ (1 + Exp(2*factor/10.0 * (x-center))/(end- start)) - firstValue)</center></u></td></tr><tr><td></td><td></td><td></td><td></td><td><center>(lastValue - firstValue)</center></td></tr></table></br><br>YStart = The <paramref name="lookupTable" /> value at start.</br><br>YEnd = The <paramref name="lookupTable" /> value at end.</br><br>firstValue = 1.0/(1 + Exp(2.0 * factor/10.0 *(start - center)/ (end- start))).</br><br>lastValue  = Log(1 + factor).</br><br>x = the intensity value of the selected point</br><br><img src="WinLevel3.gif" /></br></description>
          </item>
          <item>
            <description>If the <paramref name="flags" /> parameter is set to <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Linear</see>, <paramref name="factor" /> is ignored. The method performs a linear interpolation between the two points (start, YStart) and (end, YEnd) and stores the results in the lookup table.
            <para> where:</para><para>YStart = The <paramref name="lookupTable" /> value at start.</para><para>YEnd = The <paramref name="lookupTable" /> value at end.</para></description>
          </item>
          <item>
            <description> If the value of (end  - start) exceed the <paramref name="lookupTable" /> length, the method will throw an exception.
            <item><description>As an example, suppose a user wants to select a point, change the intensity value of that point (x), and then perform two linear interpolations:
            <remarks><list type="bullet"><item><description> from 0 to the intensity value x</description></item><item><description> from intensity value x to the end of the range</description></item></list></remarks></description></item><item><description>To accomplish this, the user would proceed by doing the following:
            <remarks><list type="bullet"><item><description>Select the point and get its intensity value (x).</description></item><item><description>Change the intensity value of the selected point to some new value (newIntensity).</description></item><item><description>Store the new intensity value in the Lookup table by assignment:<br> lookupTable[0] = 0;</br><br> lookupTable[x] = newIntensity;</br></description></item><item><description>Call GetFunctionalLookupTable with start set to 0, end set to x, and <paramref name="flags" /> set to <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Linear</see>.</description></item><item><description>Call GetFunctionalLookupTable with start set to x, end set to 255, and <paramref name="flags" /> set to <see cref="T:Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags">FunctionalLookupTableFlags.Linear</see>. (For the example, assume the image is 8-bits per pixel.)</description></item><item><description>For another example, please refer to the example for <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" />.</description></item></list></remarks></description></item></description>
          </item>
        </list>
      </remarks>
      <example>
        <para>This example will darken loaded image by using lookup table affected by exponential function.</para>
        <code lang="VB">   Public Sub GetFunctionalLookupTableExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim LookupTable() As Integer
      ReDim LookupTable(255)
      LookupTable(0) = 0
      LookupTable(255) = 255
      EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Exponential)

      Dim command As RemapIntensityCommand = New RemapIntensityCommand
      command.Flags = RemapIntensityCommandFlags.Master
      command.LookupTable = LookupTable
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GetFunctionalLookupTableExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int[] LookupTable = new int[256];
         LookupTable[0] = 0;
         LookupTable[255] = 255;
         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Exponential);

         RemapIntensityCommand command = new RemapIntensityCommand();
         command.Flags = RemapIntensityCommandFlags.Master;
         command.LookupTable = LookupTable;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GetFunctionalLookupTableExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[] LookupTable = new int[256];
         LookupTable[0] = 0;
         LookupTable[255] = 255;
         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Exponential);
         RemapIntensityCommand command = new RemapIntensityCommand();
         command.Flags = RemapIntensityCommandFlags.Master;
         command.LookupTable = LookupTable;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetFunctionalLookupTableExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim LookupTable As Integer() = New Integer(255){}
         LookupTable(0) = 0
         LookupTable(255) = 255
         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Exponential)
         Dim command As RemapIntensityCommand = New RemapIntensityCommand()
         command.Flags = RemapIntensityCommandFlags.Master
         command.LookupTable = LookupTable
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ApplyVoiLookupTableCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetUserLookupTable(System.Int32[],Leadtools.LeadPoint[])">
      <summary>
            Updates the lookup table, based on a curve that passes through the specified points.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="lookupTable">Lookup table array to be filled by this method.</param>
      <param name="userPoints">Array of LeadPoint structures that contain the points on the curve used to update the lookup table.</param>
      <returns>return the number of entries in the lookup table array that were actually updated by this method.</returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will update the lookup table array using the best curve that passes through the points 
            specified in the userPoint array. The points in the array do not need to be sorted. 
            In most cases, this method is used with the <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" /> method.</description>
          </item>
          <item>
            <description>The length of the lookup table array depends upon the number of bits being used, as follows: 
            <br><table><tr><td><B>Value</B></td><td><B>Meaning</B></td></tr><tr><td>65536</td><td>16-bit / sample image</td></tr><tr><td>4096	</td><td>12-bit / sample image</td></tr><tr><td>256</td><td>256	8-bit / sample image</td></tr></table></br></description>
          </item>
        </list>
      </remarks>
      <example>
        <para>This example will brighten the loaded bitmap using the lookup table updated by the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetUserLookupTable(System.Int32[],Leadtools.LeadPoint[])" /> method.</para>
        <code lang="VB">   Public Sub GetUserLookupTableExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim LookupTable() As Integer
      ReDim LookupTable(255)
      Dim UserPoint() As LeadPoint
      ReDim UserPoint(2)

      UserPoint(0) = New LeadPoint(0, 0)
      UserPoint(1) = New LeadPoint(128, 150)
      UserPoint(2) = New LeadPoint(255, 255)

      'Get Lookup table where the array effected by user data method.
      EffectsUtilities.GetUserLookupTable(LookupTable, UserPoint)
      Dim command As RemapIntensityCommand = New RemapIntensityCommand
      command.Flags = RemapIntensityCommandFlags.Master
      command.LookupTable = LookupTable
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GetUserLookupTableExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int[] LookupTable = new int[256];
         LeadPoint[] UserPoint = new LeadPoint[3];
         UserPoint[0] = new LeadPoint(0, 0);
         UserPoint[1] = new LeadPoint(128, 150);
         UserPoint[2] = new LeadPoint(255, 255);

         //Get Lookup table where the array effected by user data method.
         EffectsUtilities.GetUserLookupTable(LookupTable, UserPoint);
         RemapIntensityCommand command = new RemapIntensityCommand();
         command.Flags = RemapIntensityCommandFlags.Master;
         command.LookupTable = LookupTable;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GetUserLookupTableExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[] LookupTable = new int[256];
         LeadPoint[] UserPoint = new LeadPoint[3];
         UserPoint[0] = new LeadPoint(0, 0);
         UserPoint[1] = new LeadPoint(128, 150);
         UserPoint[2] = new LeadPoint(255, 255);
         //Get Lookup table where the array effected by user data method.
         EffectsUtilities.GetUserLookupTable(LookupTable, UserPoint);
         RemapIntensityCommand command = new RemapIntensityCommand();
         command.Flags = RemapIntensityCommandFlags.Master;
         command.LookupTable = LookupTable;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetUserLookupTableExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim LookupTable As Integer() = New Integer(255){}
         Dim UserPoint As LeadPoint() = New LeadPoint(2){}
         UserPoint(0) = New LeadPoint(0, 0)
         UserPoint(1) = New LeadPoint(128, 150)
         UserPoint(2) = New LeadPoint(255, 255)
         'Get Lookup table where the array effected by user data method.
         EffectsUtilities.GetUserLookupTable(LookupTable, UserPoint)
         Dim command As RemapIntensityCommand = New RemapIntensityCommand()
         command.Flags = RemapIntensityCommandFlags.Master
         command.LookupTable = LookupTable
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)">
      <summary>
            Updates the curve array based on a curve or lines that pass through the specified points.
            </summary>
      <param name="image">References the image that contains the region.</param>
      <param name="xForm">RasterRegionXForm object that contains information used to translate between display coordinates and image coordinates. If you specify null in this parameter, the scalar fields default to 1, the offsets default to 0, and the view perspective defaults to the image's view perspective.</param>
      <returns>The perimeter length of the region.</returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command works only on images having a region. If an image does not have a region the command returns the error: Not Initialized.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> method on an image.</para>
        <code lang="VB">   Public Sub GetRegionPerimeterLengthExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim rcRect As LeadRect = New LeadRect(leadImage.Width \ 3, leadImage.Height \ 3, leadImage.Width * 2 \ 3, leadImage.Height * 2 \ 3)
      leadImage.AddEllipseToRegion(Nothing, rcRect, RasterRegionCombineMode.Set)
      MessageBox.Show("Length = " + Convert.ToString(EffectsUtilities.GetRegionPerimeterLength(leadImage, Nothing)))

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GetRegionPerimeterLengthExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LeadRect rcRect = new LeadRect(image.Width / 3, image.Height / 3, image.Width * 2 / 3, image.Height * 2 / 3);
         image.AddEllipseToRegion(null,rcRect, RasterRegionCombineMode.Set);
         MessageBox.Show("Length = " + EffectsUtilities.GetRegionPerimeterLength(image, null));

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.StatisticsInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.FeretsDiameterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ObjectInformationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.RegionContourPointsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags">
      <summary>
            Flags that indicate the background color, cube shape and cube orientation.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the background color</td><td>Background, Color</td></tr><tr><td>Flags that indicate the cube's shape</td><td>Square, Rectangle</td></tr><tr><td>Flags that indicate the cube's orientation</td><td>Random, Oriented</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CubismCommandFlags.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CubismCommandFlags.Background">
      <summary>
            Use the image itself as the background.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CubismCommandFlags.Color">
      <summary>
             Use the color in the Color property (or in the fillColor parameter in the Constructor) as the background color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CubismCommandFlags.Square">
      <summary>
            Cubes will have square shape.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CubismCommandFlags.Rectangle">
      <summary>
            Cubes will have rectangular shape.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CubismCommandFlags.Random">
      <summary>
            Cubes will have random orientation.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.CubismCommandFlags.Oriented">
      <summary>
            All cubes will have the orientation specified by the Angle property (or the angle parameter of the Constructor).
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.CubismCommand">
      <summary>
            Remaps the image into a collection of rotated rectangles (cubic faces) so that it appears to have been created in the Cubist art style. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command remaps the image into a collection of rotated rectangles (cubic faces), producing an image in a Cubist style. For an example, see the following figure:<br /><img src="Cubism_before.jpg" /><br />The following figure shows the same image, after the effect has been applied:<br /><img src="Cubism_after.jpg" /><br />To obtain this effect, the following settings were used with the command:<br /><list type="number"><item><description>Space = 5</description></item><item><description>Length = 10</description></item><item><description>Brightness = 0</description></item><item><description>Angle = 0</description></item><item><description>Color = new <see cref="T:Leadtools.RasterColor" />(0, 0, 0)</description></item><item><description>Flags = <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags" />.Background | <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags" />.Random | <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags" />.Rectangle</description></item></list></description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CubismCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As CubismCommand = New CubismCommand
      command.Space = 5
      command.Length = 15
      command.Brightness = 200
      command.Angle = 4500
      command.FillColor = New RasterColor(255, 0, 0)
      command.Flags = CubismCommandFlags.Color Or CubismCommandFlags.Rectangle Or CubismCommandFlags.Random
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CubismCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         CubismCommand command = new CubismCommand();
         command.Space = 5;
         command.Length = 15;
         command.Brightness = 200;
         command.Angle = 4500;
         command.FillColor = new RasterColor(255, 0, 0);
         command.Flags = CubismCommandFlags.Color | CubismCommandFlags.Rectangle | CubismCommandFlags.Random;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CubismCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" /> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CubismCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.ImageProcessing.Effects.CubismCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" /> class object with explicit parameters.
            </summary>
      <noremarks />
      <param name="space">Space between cubes, in pixels. As this value decreases the concentration of cubes increases and vice versa. The valid range is from 1 to the image or region dimension that is minimum, that is the minimum value of the height and width. This parameter only accepts positive values.</param>
      <param name="length">Cube side length, in pixels. This parameter only accepts positive values.</param>
      <param name="brightness">A value that indicates the brightness of the image. This value can be a number between -1000 and 1000. Negative values darken the image and positive values lighten the image.</param>
      <param name="angle">The cube's angle of orientation, in hundredths of a degree (+/-). This value is ignored if the <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags" />.Random flag has been set in the flags parameter. Possible values are from -36000 to 36000.</param>
      <param name="fillColor">Specifies the background color. This value is ignored if the <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags" />.Background flag has been set in the flags parameter.</param>
      <param name="flags">Flags that indicate the background color, cube shape and cube orientation. You can use a bit wise OR (|) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" /> on an image.</para>
        <code lang="VB">   Public Sub CubismConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As CubismCommand
      command = New CubismCommand(200, 15, 200, 4500, New RasterColor(255, 0, 0), CubismCommandFlags.Color Or CubismCommandFlags.Square Or CubismCommandFlags.Random)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void CubismConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         CubismCommand command = new CubismCommand(200, 15, 200, 4500, new RasterColor(255,0,0), CubismCommandFlags.Color | CubismCommandFlags.Square | CubismCommandFlags.Random);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CubismCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
            </summary>
      <noremarks />
      <returns>String that contains the name of this command.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.CubismCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CubismCommand.Space">
      <summary>
            Gets or sets a value that represents the space between cubes.
            </summary>
      <noremarks />
      <value>Value that represents the space between cubes, in pixels. As this value decreases the concentration of cubes increases and vice versa. The valid range is from 1 to the image or region dimension that is minimum, that is the minimum value of the height and width. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CubismCommand.Length">
      <summary>
            Gets or sets a value that represents the cube side length, in pixels.
            </summary>
      <noremarks />
      <value>Cube side length, in pixels. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CubismCommand.Brightness">
      <summary>
            Gets or sets a value that indicates the brightness of the image.
            </summary>
      <noremarks />
      <value>A value that indicates the brightness of the image. This value can be a number between -1000 and 1000. Negative values darken the image and positive values lighten the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CubismCommand.Angle">
      <summary>
            Gets or sets the cube's angle of orientation.
            </summary>
      <noremarks />
      <value>The cube's angle of orientation, in hundredths of a degree (+/-). This value is ignored if the <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags" />.Random flag has been set in the Flags property. Possible values are from -36000 to 36000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CubismCommand.FillColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <noremarks />
      <value>Value that represents the background color. This value is ignored if the <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommandFlags" />.Background flag has been set in the Flags property.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.CubismCommand.Flags">
      <summary>
            Gets or sets flags that indicate the background color, cube shape and cube orientation.
            </summary>
      <noremarks />
      <value>Flags that indicate the background color, cube shape and cube orientation. You can use a bit wise OR (|) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.CubismCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined">
      <summary>
            Enumerated values that represent the predefined binary filter to use.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.ErosionOmniDirectional">
      <summary>
            Shrinks black objects in the image in all directions.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.ErosionHorizontal">
      <summary>
            Shrinks black objects in the image horizontally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.ErosionVertical">
      <summary>
            Shrinks black objects in the image vertically.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.ErosionDiagonal">
      <summary>
            Shrinks black objects in the image diagonally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.DilationOmniDirectional">
      <summary>
            Shrinks black objects in the image in all directions.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.DilationHorizontal">
      <summary>
            Enlarges black objects in the image horizontally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.DilationVertical">
      <summary>
            Enlarges black objects in the image vertically.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined.DilationDiagonal">
      <summary>
            Enlarges black objects in the image diagonally.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand">
      <summary>
            Imposes a binary filter on an image. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> Toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand" /> on an image to dilate black objects.</para>
        <code lang="VB">   Public Sub BinaryFilterCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As BinaryFilterCommand = New BinaryFilterCommand(BinaryFilterCommandPredefined.DilationOmniDirectional)
      ' Dilate black objects 

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BinaryFilterCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         BinaryFilterCommand command = new BinaryFilterCommand(BinaryFilterCommandPredefined.DilationOmniDirectional);
         //Dilate black objects.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void BinaryFilterCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         BinaryFilterCommand command = new BinaryFilterCommand(BinaryFilterCommandPredefined.DilationOmniDirectional);
         //Dilate black objects.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub BinaryFilterCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As BinaryFilterCommand = New BinaryFilterCommand(BinaryFilterCommandPredefined.DilationOmniDirectional)
         'Dilate black objects.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand" /> on an image to dilate black objects.</para>
        <code lang="VB">   Public Sub BinaryFilterConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim nMatrix() As Integer
      ReDim nMatrix(8)
      nMatrix(0) = 0
      nMatrix(1) = 0
      nMatrix(2) = 0
      nMatrix(3) = 0
      nMatrix(4) = 0
      nMatrix(5) = 0
      nMatrix(6) = 0
      nMatrix(7) = 0
      nMatrix(8) = 0

      Dim command As BinaryFilterCommand = New BinaryFilterCommand
      command.Matrix = nMatrix
      command.Maximum = True

      ' Dilate black objects.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      MessageBox.Show("The dimension property has the value = " + command.Dimension.ToString())

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BinaryFilterConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int [] nMatrix = new int[9];
         nMatrix[0] = 0;
         nMatrix[1] = 0;
         nMatrix[2] = 0;
         nMatrix[3] = 0;
         nMatrix[4] = 0;
         nMatrix[5] = 0;
         nMatrix[6] = 0;
         nMatrix[7] = 0;
         nMatrix[8] = 0;

         BinaryFilterCommand command = new BinaryFilterCommand();
         command.Matrix = nMatrix;
         command.Maximum = true;
         // Dilate black objects.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void BinaryFilterConstructorExample_S1(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[] nMatrix = new int[9];
         nMatrix[0] = 0;
         nMatrix[1] = 0;
         nMatrix[2] = 0;
         nMatrix[3] = 0;
         nMatrix[4] = 0;
         nMatrix[5] = 0;
         nMatrix[6] = 0;
         nMatrix[7] = 0;
         nMatrix[8] = 0;
         BinaryFilterCommand command = new BinaryFilterCommand();
         command.Matrix = nMatrix;
         command.Maximum = true;
         // Dilate black objects.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub BinaryFilterConstructorExample_S1(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim nMatrix As Integer() = New Integer(8){}
         nMatrix(0) = 0
         nMatrix(1) = 0
         nMatrix(2) = 0
         nMatrix(3) = 0
         nMatrix(4) = 0
         nMatrix(5) = 0
         nMatrix(6) = 0
         nMatrix(7) = 0
         nMatrix(8) = 0
         Dim command As BinaryFilterCommand = New BinaryFilterCommand()
         command.Matrix = nMatrix
         command.Maximum = True
         ' Dilate black objects.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.#ctor(Leadtools.ImageProcessing.Effects.BinaryFilterCommandPredefined)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="predefined">Value that represents the predefined binary filter to use.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.#ctor(System.Boolean,System.Int32[])">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <param name="maximum">Value that represent the maximum value.</param>
      <param name="matrix">Array of filter coefficients.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand" /> on an image to dilate black objects.</para>
        <code lang="VB">   Public Sub BinaryFilterConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim nMatrix() As Integer
      ReDim nMatrix(8)
      nMatrix(0) = 0
      nMatrix(1) = 0
      nMatrix(2) = 0
      nMatrix(3) = 0
      nMatrix(4) = 0
      nMatrix(5) = 0
      nMatrix(6) = 0
      nMatrix(7) = 0
      nMatrix(8) = 0

      Dim command As BinaryFilterCommand = New BinaryFilterCommand(True, nMatrix)
      ' Dilate black objects.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      MessageBox.Show("The dimension property has the value = " + command.Dimension.ToString())

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BinaryFilterConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int [] nMatrix = new int[9];
         nMatrix[0] = 0;
         nMatrix[1] = 0;
         nMatrix[2] = 0;
         nMatrix[3] = 0;
         nMatrix[4] = 0;
         nMatrix[5] = 0;
         nMatrix[6] = 0;
         nMatrix[7] = 0;
         nMatrix[8] = 0;

         BinaryFilterCommand command = new BinaryFilterCommand(true, nMatrix);
         // Dilate black objects.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         MessageBox.Show("The dimension property has the value = " + command.Dimension.ToString());

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void BinaryFilterConstructorExample_S2(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[] nMatrix = new int[9];
         nMatrix[0] = 0;
         nMatrix[1] = 0;
         nMatrix[2] = 0;
         nMatrix[3] = 0;
         nMatrix[4] = 0;
         nMatrix[5] = 0;
         nMatrix[6] = 0;
         nMatrix[7] = 0;
         nMatrix[8] = 0;
         BinaryFilterCommand command = new BinaryFilterCommand(true, nMatrix);
         // Dilate black objects.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
         Debug.WriteLine("The dimension property has the value = " + command.Dimension.ToString());
      }</code>
        <code lang="SilverlightVB">      Public Sub BinaryFilterConstructorExample_S2(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim nMatrix As Integer() = New Integer(8){}
         nMatrix(0) = 0
         nMatrix(1) = 0
         nMatrix(2) = 0
         nMatrix(3) = 0
         nMatrix(4) = 0
         nMatrix(5) = 0
         nMatrix(6) = 0
         nMatrix(7) = 0
         nMatrix(8) = 0
         Dim command As BinaryFilterCommand = New BinaryFilterCommand(True, nMatrix)
         ' Dilate black objects.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
         Debug.WriteLine("The dimension property has the value = " &amp; command.Dimension.ToString())
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <returns>String that contains the name of this method.</returns>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.Maximum">
      <summary>
            Gets or sets the maximum value.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Maximum value.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.#ctor(System.Boolean,System.Int32[])">BinaryFilterCommand(bool,int[])</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.Dimension">
      <summary>
            Gets the filter dimensions.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Filter dimensions.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.#ctor(System.Boolean,System.Int32[])">BinaryFilterCommand(bool,int[])</see></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.Matrix">
      <summary>
            Gets or sets an array of filter coefficients.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noremarks />
      <value>Array of filter coefficients.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Effects.BinaryFilterCommand.#ctor(System.Boolean,System.Int32[])">BinaryFilterCommand(bool,int[])</see></example>
    </member>
  </members>
</doc>