<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.Wia</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Wia.WiaAcquireFileEventArgs">
      <summary>
        <p>Provides data for the <see cref="E:Leadtools.Wia.WiaSession.AcquireFileEvent" /> event.</p>
      </summary>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireFileEventArgs.FileName">
      <summary>
            Indicates the full filename and path into which the current scanning operation is saving the page(s) that are being acquired.
            </summary>
      <value>The full filename and path into which the current scanning operation is saving the page(s) that are being acquired.</value>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireFileEventArgs.Percent">
      <summary>
            Indicates the percent completion of the acquisition process from the WIA source.
            </summary>
      <value>An integer that represents the percent completion of the acquisition process from the WIA source.</value>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireFileEventArgs.Flags">
      <summary>
            Indicates the start and the end of each acquired page.
            </summary>
      <value>Flags that indicate the start and the end of each acquired page.</value>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireFileEventArgs.Cancel">
      <summary>
            Aborts the acquire operation.
            </summary>
      <value>true to abort, false to continue normally.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /></example>
    </member>
    <member name="T:Leadtools.Wia.WiaImageResolutionProperties">
      <summary>
        <p>Provides image resolution information for the currently selected data source.</p>
      </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
      <seealso cref="T:Leadtools.Wia.WiaDataTransferProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaImageEffectsProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaProperties">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.Empty">
      <summary>
            Returns a WiaImageResolutionProperties structure with default values.
            </summary>
      <value>
            A WiaImageResolutionProperties structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.BitsPerPixel">
      <summary>
            Gets or sets the bits per pixel the acquired images will have.
            </summary>
      <value>The bits per pixel the acquired images will have.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.XPos">
      <summary>
            Gets or sets the X coordinate of the upper-left corner of the scanning area.
            </summary>
      <value>The X coordinate of the upper-left corner of the scanning area.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.YPos">
      <summary>
            Gets or sets the Y coordinate of the upper-left corner of the scanning area.
            </summary>
      <value>The Y coordinate of the upper-left corner of the scanning area.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.Width">
      <summary>
            Gets or sets the width of the scanning area.
            </summary>
      <value>The width of the scanning area.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.Height">
      <summary>
            Gets or sets the height of the scanning area.
            </summary>
      <value>The height of the scanning area.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.HorizontalResolution">
      <summary>
            Gets or sets the horizontal resolution of the WIA source while acquiring the image.
            </summary>
      <value>The horizontal resolution of the WIA source while acquiring the image.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.VerticalResolution">
      <summary>
            Gets or sets the vertical resolution of the WIA source while acquiring the image.
            </summary>
      <value>The vertical resolution of the WIA source while acquiring the image.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.XScaling">
      <summary>
            Gets or sets the acquired image X-direction scaling value before transferring.
            </summary>
      <value>An integer that represents the acquired image X-direction scaling value before transferring.</value>
      <remarks>
        <p>
            The horizontal scaling percentage to be applied to the scanned page 
            within the scanner device. This value can be from 1 to maximum of 65535. 
            For example, 100 means no scaling, 50 means scaling down to 50<![CDATA[&#37;]]> of the original size, 
            and 200 means scaling up to 200<![CDATA[&#37;]]> of the original size.
            </p>
        <p>
             Note: This member is only available on VISTA (WIA 2.0 version).
            </p>
      </remarks>
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.YScaling">
      <summary>
            Gets or sets the acquired image Y-direction scaling value before transferring.
            </summary>
      <value>The acquired image Y-direction scaling value before transferring.</value>
      <remarks>
        <p>
            The vertical scaling percentage to be applied to the scanned page within the scanner device. 
            This value can be from 1 to maximum of 65535. For example, 100 means no scaling, 50 means 
            scaling down to 50<![CDATA[&#37;]]> of the original size, and 200 means scaling up to 200<![CDATA[&#37;]]> of the original size.
            </p>
        <p>
            Note: This member is only available on VISTA (WIA 2.0 version).
            </p>
      </remarks>
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageResolutionProperties.RotationAngle">
      <summary>
            Gets or sets the acquired image rotation angle value before transfer.
            </summary>
      <value>The acquired image rotation angle value before transfer.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaDataTransferProperties">
      <summary>
            Provides data transfer information for the current selected data source.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
      <seealso cref="T:Leadtools.Wia.WiaImageResolutionProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaImageEffectsProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaProperties">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaDataTransferProperties.Empty">
      <summary>
            Returns a WiaDataTransferProperties structure with default values.
            </summary>
      <value>
            A WiaDataTransferProperties structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaDataTransferProperties.Compression">
      <summary>
            Gets or sets the compression to be used while performing data transfer from WIA source.
            </summary>
      <value>
            The compression to be used while performing data transfer from WIA source. Possible values are (according to Microsoft SDK documentation):
            <list type="table"><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.None</see></strong></para></term><description>
                    No compression is to be used.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Rle4</see></strong></para></term><description>
                    RLE4 compression.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Rle8</see></strong></para></term><description>
                    RLE8 compression.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Group3</see></strong></para></term><description>
                    Group 3 compression.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Group4</see></strong></para></term><description>
                    Group 4 compression.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Jpeg</see></strong></para></term><description>
                    JPEG compression.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Jbig</see></strong></para></term><description>
                    JBIG compression (only supported in Windows Vista or later).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Jpeg2000</see></strong></para></term><description>
                    JPEG 2000 compression (only supported in Windows Vista or later).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaCompressionMode">WiaCompressionMode.Png</see></strong></para></term><description>
                    PNG compression (only supported in Windows Vista or later).
                 </description></item></list><para>For more information about these compression types, please refer to WIA_IPA_COMPRESSION property ID in Microsoft Windows SDK Documentation.</para></value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaDataTransferProperties.Format">
      <summary>
            Gets or sets the preferred image format to use when performing data transfer from WIA source.
            </summary>
      <value>
            The preferred image format to use when performing data transfer from WIA source. Possible values are (according to Microsoft SDK documentation):
            <list type="table"><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.None</see></strong></para></term><description>
                    Use this value only to determine whether the <b>WiaDataTransferProperties</b> structure is filled with a valid format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.MemoryBmp</see></strong></para></term><description>
                    Windows bitmap without a header file (use this format when doing memory transfer).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Bmp</see></strong></para></term><description>
                    Windows bitmap with a header file.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Ciff</see></strong></para></term><description>
                    Camera Image File format (not supported in Windows Vista).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Emf</see></strong></para></term><description>
                    Extended Windows metafile.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Exif</see></strong></para></term><description>
                    Exchangeable File Format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Fpx</see></strong></para></term><description>
                    FlashPix format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Gif</see></strong></para></term><description>
                    GIF image format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Ico</see></strong></para></term><description>
                    Windows icon file format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Jbig</see></strong></para></term><description>
                    The Joint Bi-level Image Experts Group (JBIG) format (supported only in Windows Vista and later).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Jpeg</see></strong></para></term><description>
                    JPEG compressed format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.J2k</see></strong></para></term><description>
                    JPEG 2000 compressed format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.J2kx</see></strong></para></term><description>
                    JPEG 2000 compressed format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Pcd</see></strong></para></term><description>
                    Eastman Kodak file format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Pct</see></strong></para></term><description>
                    Apple file format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Png</see></strong></para></term><description>
                    W3C PNG format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Raw</see></strong></para></term><description>
                    Raw format for data transfers only.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.RawRgb</see></strong></para></term><description>
                    Raw RGB format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Tiff</see></strong></para></term><description>
                    Tag Image File Format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Wmf</see></strong></para></term><description>
                    Windows metafile.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Rtf</see></strong></para></term><description>
                    Rich Text File format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Xml</see></strong></para></term><description>
                    XML file.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Html</see></strong></para></term><description>
                    HTML format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Txt</see></strong></para></term><description>
                    Text file.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Pdfa</see></strong></para></term><description>
                    The PDF/A (ISO/CD 19005-1) format (supported only in Windows Vista and later).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Xps</see></strong></para></term><description>
                    XML Paper Specification (XPS) Package format (supported only in Windows Vista and later).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Mpg</see></strong></para></term><description>
                    MPEG video format (not supported in either Windows Server 2003 or Windows Vista).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Avi</see></strong></para></term><description>
                    AVI video format (not supported in either Windows Server 2003 or Windows Vista).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Wav</see></strong></para></term><description>
                    WAV audio format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Mp3</see></strong></para></term><description>
                    MP3 audio format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Aiff</see></strong></para></term><description>
                    AIFF audio format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Wma</see></strong></para></term><description>
                    WMA audio format.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Asf</see></strong></para></term><description>
                    WMV video format (not supported in either Windows Server 2003 or Windows Vista).
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Script</see></strong></para></term><description>
                    Script file.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Exec</see></strong></para></term><description>
                    Executable file.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Unicode16</see></strong></para></term><description>
                    UNICODE 16-bit encoding.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaFileFormats">WiaFileFormats.Dpof</see></strong></para></term><description>
                    DPOF printing format.
                 </description></item></list><para>For more information about these compression types, please refer to WIA_IPA_FORMAT property ID in Microsoft Windows SDK Documentation.</para></value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaDataTransferProperties.ImageDataType">
      <summary>
            Gets or sets the preferred data type to be used for the image when performing data transfer from a WIA source.
            </summary>
      <value>
            The preferred data type to be used for the image when performing data transfer from a WIA source. Possible values are (according to Microsoft SDK documentation):
            <list type="table"><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.Threshold</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.Dither</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.Grayscale</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.Color</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.ColorThreshold</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.ColorDither</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.RawBgr</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.RawCmy</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.RawCmyk</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.RawRgb</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.RawYuv</see></strong></para></term></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageDataType">WiaImageDataType.RawYuvk</see></strong></para></term></item></list><para>For more information about these image data types, please refer to WIA_IPA_DATATYPE property ID in Microsoft Windows SDK Documentation.</para></value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaDataTransferProperties.TransferMode">
      <summary>
            Gets or sets the transfer mode to be used by the WIA source.
            </summary>
      <value>
            Transfer mode to be used by the WIA source. Possible values are:
            <list type="bullet"><item><description><see cref="T:Leadtools.Wia.WiaTransferMode">WiaTransferMode.None</see> 
            Use this value only to determine whether the 
            <b>WiaDataTransferProperties</b> structure is filled with a valid transfer mode.</description></item><item><description><see cref="T:Leadtools.Wia.WiaTransferMode">WiaTransferMode.Memory</see> 
            Memory buffered transfer mode. The source will be transferring 
            strips of data to the application according to the buffer size 
            supplied by the <see cref="T:Leadtools.Wia.WiaAcquireOptions" />.</description></item><item><description><see cref="T:Leadtools.Wia.WiaTransferMode">WiaTransferMode.File</see> 
            File transfer mode. This will use the file path specified through 
            the <see cref="T:Leadtools.Wia.WiaAcquireOptions" />. And it will also use the format 
            specified by the <see cref="T:Leadtools.Wia.WiaDataTransferProperties" /> structure.</description></item></list></value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaImageEffectsProperties">
      <summary>
            Provides image effects properties for the currently selected data source.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
      <seealso cref="T:Leadtools.Wia.WiaImageResolutionProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaDataTransferProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaProperties">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaImageEffectsProperties.Empty">
      <summary>
            Returns a WiaImageEffectsProperties structure with default values.
            </summary>
      <value>
            A WiaImageEffectsProperties structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaImageEffectsProperties.Brightness">
      <summary>
            Gets or sets the brightness value to use when transferring images from the current WIA source.
            </summary>
      <value>
            The brightness value to use when transferring images from the current WIA source.
            <para>Possible values range from -1000 through 1000, where 1000 corresponds to the maximum 
            brightness, 0 corresponds to normal brightness, and -1000 corresponds to the minimum brightness.</para></value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" />.</example>
    </member>
    <member name="P:Leadtools.Wia.WiaImageEffectsProperties.Contrast">
      <summary>
            Gets or sets the contrast value to use when transferring images from the current WIA source.
            </summary>
      <value>
            The contrast value to use when transferring images from the current WIA source.
            <para>Possible values range from -1000 through 1000, where 1000 corresponds to the 
            maximum contrast, 0 corresponds to normal contrast, and -1000 corresponds to the minimum contrast.</para></value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" />.</example>
    </member>
    <member name="T:Leadtools.Wia.WiaProperties">
      <summary>
            Provides WIA properties for the current selected data source.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
      <seealso cref="T:Leadtools.Wia.WiaImageResolutionProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaDataTransferProperties">
      </seealso>
      <seealso cref="T:Leadtools.Wia.WiaImageEffectsProperties">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.Empty">
      <summary>
            Returns a WiaProperties structure with default values.
            </summary>
      <value>
            A WiaProperties structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.ScanningMode">
      <summary>
            Gets or sets the scanner acquisition source and mode.
            </summary>
      <value>
            The scanner acquisition source and mode. Possible values are (according to Microsoft SDK documentation):
            <list type="table"><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.None</see></strong></para></term><description>
                    Use this value only to determine whether the <b>WiaProperties</b> structure is filled with 
            a valid scanning mode.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.Feeder</see></strong></para></term><description>
                    Scan using the document feeder.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.Flatbed</see></strong></para></term><description>
                    Scan using the flatbed.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.Duplex</see></strong></para></term><description>
                    Scan using duplexer operations.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.AutoAdvance</see></strong></para></term><description>
                    Enables automatic feeding of the next document after a scan.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.FrontFirst</see></strong></para></term><description>
                    Scan the front of the document first. This value is valid when Duplex is set.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.BackFirst</see></strong></para></term><description>
                    Scan the back of the document first. This value is valid when Duplex is set.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.FrontOnly</see></strong></para></term><description>
                    Scan the front only. This value is valid when Duplex is set.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.BackOnly</see></strong></para></term><description>
                    Scan the back only. This value is valid when Duplex is set.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.NextPage</see></strong></para></term><description>
                    Scan the next page of the document.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.Prefeed</see></strong></para></term><description>
                    Enable pre-feed mode. Pre-position next document while scanning.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaScanningModeFlags">WiaScanningModeFlags.AdvancedDuplex</see></strong></para></term><description>
                    Scan using individual settings configured for each child feeder item. Duplex and AdvancedDuplex cannot both be set.
                 </description></item></list><para>For more information about these scanning modes, please refer to Microsoft Windows SDK Documentation for the WIA_DPS_DOCUMENT_HANDLING_SELECT property ID (if you are using WIA 1.0) or WIA_IPS_DOCUMENT_HANDLING_SELECT property ID (if you are using WIA 2.0).</para></value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.ImageType">
      <summary>
            Gets or sets the application’s intended use of the image.
            </summary>
      <value>
            The application’s intended use of the image. The device uses this value
            to change its settings. The settings change depending upon how the image will be used. 
            Possible values are (according to Microsoft SDK documentation):
            <list type="table"><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.None</see></strong></para></term><description>
                    Default value. No intent is specified.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Color</see></strong></para></term><description>
                    The application intends to prepare the device for a color scan.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Grayscale</see></strong></para></term><description>
                    The application intends to prepare the device for a grayscale scan.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Text</see></strong></para></term><description>
                    The application intends to prepare the device for scanning text.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Mask</see></strong></para></term><description>
                    Mask for all of the image-type flags.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.MinimizeSize</see></strong></para></term><description>
                    The application intends to prepare the device for scanning an image that result's in a small scan.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.MaximizeQuality</see></strong></para></term><description>
                    The application intends to prepare the device for scanning a high-quality image.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.SizeMask</see></strong></para></term><description>
                    This flag is a mask for all of the size/quality flags.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.BestPreview</see></strong></para></term><description>
                    The application intends to prepare the device for scanning a preview.
                 </description></item></list><para>For more information about these image types, please refer to the WIA_IPS_CUR_INTENT property ID in Microsoft Windows SDK Documentation.</para></value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.MaximumNumberOfPages">
      <summary>
            Gets or sets the maximum number of pages to get from the WIA source.
            </summary>
      <value>The maximum number of pages to get from the WIA 
            source. (Use 0 to scan all pages in the document feeder.)</value>
      <para>For more information about this property, please refer to Microsoft Windows SDK Documentation for the WIA_DPS_PAGES property ID (if you are using WIA 1.0) or WIA_IPS_PAGES property ID (if you are using WIA 2.0).</para>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.Orientation">
      <summary>
            Gets or sets the original orientation of a page or image to be acquired.
            </summary>
      <value>
            The original orientation of a page or image to be acquired. Possible values are (according to Microsoft SDK documentation):
            <list type="table"><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Portrait</see></strong></para></term><description>
                    0 degrees.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Landscape</see></strong></para></term><description>
                    90-degree counter-clockwise rotation, relative to the Portrait orientation.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Rotate180</see></strong></para></term><description>
                    180-degree counter-clockwise rotation, relative to the Portrait orientation.
                 </description></item><item><term><para><strong><see cref="T:Leadtools.Wia.WiaImageType">WiaImageType.Rotate270</see></strong></para></term><description>
                    270-degree counter-clockwise rotation, relative to the Portrait orientation.
                 </description></item></list><para>For more information about the orientation modes, please refer to the WIA_IPS_ORIENTATION property ID in Microsoft Windows SDK Documentation.</para></value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.DataTransfer">
      <summary>
            Gets or sets data transfer properties for the current data source.
            </summary>
      <value>WiaDataTransferProperties structure contains the data transfer properties.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.ImageEffects">
      <summary>
            Gets or sets image effects properties for the current data source.
            </summary>
      <value>WiaImageEffectsProperties structure contains the image effects properties.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaProperties.ImageResolution">
      <summary>
            Gets or sets image resolution properties for the current data source.
            </summary>
      <value>WiaImageResolutionProperties structure contains the image resolution properties.</value>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> example.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaSetPropertiesEventArgs">
      <summary>
        <p>Provides data for each WIA property set by calling the
            <see cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)" /> method.</p>
      </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaSetPropertiesEventArgs.PropertyId">
      <summary>
            Gets the property ID for the property being set.
            </summary>
      <value>The property ID for the property being set.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaSetPropertiesEventArgs.Value">
      <summary>
            Gets the property value for the property being set.
            </summary>
      <value>The property value for the property being set.</value>
      <remarks>You need to cast this value according to the variable type received through the <see cref="P:Leadtools.Wia.WiaSetPropertiesEventArgs.ValueType" /> property.</remarks>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaSetPropertiesEventArgs.ValueType">
      <summary>
            Gets the type of the property being set.
            </summary>
      <value>The type of the property being set.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaSetPropertiesEventArgs.Error">
      <summary>
            Gets the returned error code for each property being set.
            </summary>
      <value>The returned error code for each property being set.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaSetPropertiesEventArgs.Stop">
      <summary>
            Enables or disables firing the <see cref="E:Leadtools.Wia.WiaSession.SetPropertiesEvent" /> event.
            </summary>
      <value>true: continue firing <b>SetPropertiesEvent</b> event, false: stop firing <b>SetPropertiesEvent</b> event.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" />.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaSession">
      <summary>
        <p>The <b>WiaSession</b> provides support for WIA scanning functionality.</p>
      </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see></example>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.Dispose(System.Boolean)">
      <summary>
            This member supports the Leadtools infrastructure and is not intended to be used directly from your code.
            </summary>
      <param name="disposing">true if this method was called as a result of calling Dispose; false if this method was called as a result of object finalization.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaSession.#ctor">
      <summary>
        <p>Constructs a new WiaSession object with default values.</p>
      </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see></example>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.Dispose">
      <summary>
            Releases all resources used by this object.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaSession.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      <summary>
            Determines which version of the WIA source is installed.
            </summary>
      <param name="version">The WIA version to be used. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaVersion">WiaVersion.Version1</see></term><description>
                    Use WIA version 1.0.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaVersion">WiaVersion.Version2</see></term><description>
                    Use WIA version 2.0.
                 </description></item></list></param>
      <returns>true if at least one WIA source of the specified version is installed, false if no WIA source 
            is installed that supports the specified WIA version.</returns>
      <remarks>
            Use this method to enable or disable WIA menu items.
            </remarks>
      <example>
        <para />
        <code lang="VB">      &lt;Test&gt; _
      Public Sub IsAvailableExample(ByVal parent As IWin32Window)
         If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If
         Dim session As WiaSession = New WiaSession()
         session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            session.Shutdown()
            Return
         End If

         ' Initialize and fill the required fields from the WiaAcquireOptions structure
         Dim wiaAcquireOptions As WiaAcquireOptions = wiaAcquireOptions.Empty
         wiaAcquireOptions.MemoryBufferSize = 32 * 1024
         wiaAcquireOptions.DoubleBuffer = True
         session.AcquireOptions = wiaAcquireOptions

         AddHandler session.AcquireEvent, AddressOf session_AcquireEvent

         session.Acquire(parent, Nothing, WiaAcquireFlags.ShowUserInterface Or WiaAcquireFlags.UseCommonUI)

         RemoveHandler session.AcquireEvent, AddressOf session_AcquireEvent
         session.Shutdown()
      End Sub

      Public Sub session_AcquireEvent(ByVal sender As Object, ByVal e As WiaAcquireEventArgs)
         Application.DoEvents()

         If (e.Flags And WiaAcquiredPageFlags.StartOfPage) = WiaAcquiredPageFlags.StartOfPage Then
            Console.WriteLine("Beginning of data transfer.")
         ElseIf (e.Flags And WiaAcquiredPageFlags.EndOfPage) = WiaAcquiredPageFlags.EndOfPage Then
            Console.WriteLine("End of data transfer.")
         End If

         If Not e.Image Is Nothing Then
            ' You can load the image here.
         End If

         e.Cancel = False
      End Sub
</code>
        <code lang="CS">      public void IsAvailableExample(IWin32Window parent)
      {
         if ( !WiaSession.IsAvailable(WiaVersion.Version1) )
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         WiaSession wiaSession = new WiaSession();
         wiaSession.Startup(WiaVersion.Version1);

         DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if(res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wiaSession.Shutdown();
            return;
         }

         // Initialize and fill the required fields from the WiaAcquireOptions structure
         WiaAcquireOptions wiaAcquireOptions = WiaAcquireOptions.Empty;
         wiaAcquireOptions.MemoryBufferSize = 32 * 1024;
         wiaAcquireOptions.DoubleBuffer = true;
         wiaSession.AcquireOptions = wiaAcquireOptions;

         wiaSession.AcquireEvent += new EventHandler&lt;WiaAcquireEventArgs&gt;(wiaSession_AcquireEvent);

         wiaSession.Acquire(parent, null, WiaAcquireFlags.ShowUserInterface | WiaAcquireFlags.UseCommonUI);

         wiaSession.AcquireEvent -= new EventHandler&lt;WiaAcquireEventArgs&gt;(wiaSession_AcquireEvent);
         wiaSession.Shutdown();
      }

      public void wiaSession_AcquireEvent(object sender, WiaAcquireEventArgs e)
      {
         Application.DoEvents();

         if ((e.Flags &amp; WiaAcquiredPageFlags.StartOfPage) == WiaAcquiredPageFlags.StartOfPage)
            Console.WriteLine("Beginning of data transfer.");
         else if ((e.Flags &amp; WiaAcquiredPageFlags.EndOfPage) == WiaAcquiredPageFlags.EndOfPage)
            Console.WriteLine("End of data transfer.");

         if (e.Image != null)
         {
            // You can load the image here.
         }

         e.Cancel = false;
      }
</code>
        <!--Leadtools.Wia.WiaSession.IsAvailable-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      <summary>
            Initializes the WIA session.
            </summary>
      <param name="version">The WIA version to be used. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaVersion">WiaVersion.Version1</see></term><description>
                    Use WIA version 1.0.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaVersion">WiaVersion.Version2</see></term><description>
                    Use WIA version 2.0.
                 </description></item></list></param>
      <remarks>
        <para>This method should be called before calling any other method in LEADTOOLS WIA toolkit. Likewise, when 
            the handle to the WIA session is no longer needed, it should be ended by calling <see cref="M:Leadtools.Wia.WiaSession.Shutdown" /> method.
            For every call to <b>Startup</b> there must be a call to <see cref="M:Leadtools.Wia.WiaSession.Shutdown" />.</para>
        <para>Call the <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /> method to determine whether a WIA source with the specified 
            version is installed.</para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Note:</strong>
              </para>
            </term>
            <description>
                    You do not need to call <b>Startup</b> if you are using the high-level <see cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)" /> method,
                    since it handles session initialization, session end, and device selection automatically.
                 </description>
          </item>
        </list>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.InitializingAWiaSession.html">Initializing a WIA Session</a>.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.FreeingTheWiaSession.html">Freeing the WIA Session</a>.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.Shutdown">
      <summary>
            Ends a WIA session.
            </summary>
      <remarks>
            A WIA session is begun by calling the <see cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)" /> method. For each call to the 
            <see cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)" /> method there must be a call to the <b>Shutdown</b> method.<br />
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.FreeingTheWiaSession.html">Freeing the WIA Session</a>.
            </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise__acquireEvent(System.Object,Leadtools.Wia.WiaAcquireEventArgs)">
      <summary>
            Occurs while acquiring from the WIA source.
            </summary>
      <param name="value0">The source of the sender</param>
      <param name="value1">A <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise_AcquireEvent(System.Object,Leadtools.Wia.WiaAcquireEventArgs)">
      <summary>
            Occurs while acquiring from the WIA source.
            </summary>
      <param name="sender">The source of the sender</param>
      <param name="e">A <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise__acquireFileEvent(System.Object,Leadtools.Wia.WiaAcquireFileEventArgs)">
      <summary>
            Occurs while acquiring to file from the WIA source.
            </summary>
      <param name="value0">The source of the sender</param>
      <param name="value1">A <see cref="T:Leadtools.Wia.WiaAcquireFileEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaAcquireFileEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise_AcquireFileEvent(System.Object,Leadtools.Wia.WiaAcquireFileEventArgs)">
      <summary>
            Occurs while acquiring to file from the WIA source.
            </summary>
      <param name="sender">The source of the sender</param>
      <param name="e">A <see cref="T:Leadtools.Wia.WiaAcquireFileEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaAcquireFileEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise__enumCapabilitiesEvent(System.Object,Leadtools.Wia.WiaEnumCapabilitiesEventArgs)">
      <summary>
            Occurs while enumerating the WIA capabilities of the selected WIA source.
            </summary>
      <param name="value0">The source of the sender</param>
      <param name="value1">A <see cref="T:Leadtools.Wia.WiaEnumCapabilitiesEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumCapabilitiesEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise_EnumCapabilitiesEvent(System.Object,Leadtools.Wia.WiaEnumCapabilitiesEventArgs)">
      <summary>
            Occurs while enumerating the WIA capabilities of the selected WIA source.
            </summary>
      <param name="sender">The source of the sender</param>
      <param name="e">A <see cref="T:Leadtools.Wia.WiaEnumCapabilitiesEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumCapabilitiesEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise__enumDevicesEvent(System.Object,Leadtools.Wia.WiaEnumDevicesEventArgs)">
      <summary>
            Occurs while enumerating the WIA devices.
            </summary>
      <param name="value0">The source of the sender</param>
      <param name="value1">A <see cref="T:Leadtools.Wia.WiaEnumDevicesEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumDevicesEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumDevices">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise_EnumDevicesEvent(System.Object,Leadtools.Wia.WiaEnumDevicesEventArgs)">
      <summary>
            Occurs while enumerating the WIA devices.
            </summary>
      <param name="sender">The source of the sender</param>
      <param name="e">A <see cref="T:Leadtools.Wia.WiaEnumDevicesEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumDevicesEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumDevices">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise__enumFormatsEvent(System.Object,Leadtools.Wia.WiaEnumFormatsEventArgs)">
      <summary>
            Occurs while enumerating the supported WIA transfer formats of the selected WIA source.
            </summary>
      <param name="value0">The source of the sender</param>
      <param name="value1">A <see cref="T:Leadtools.Wia.WiaEnumFormatsEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumFormatsEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise_EnumFormatsEvent(System.Object,Leadtools.Wia.WiaEnumFormatsEventArgs)">
      <summary>
            Occurs while enumerating the supported WIA transfer formats of the selected WIA source.
            </summary>
      <param name="sender">The source of the sender</param>
      <param name="e">A <see cref="T:Leadtools.Wia.WiaEnumFormatsEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumFormatsEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise__enumItemsEvent(System.Object,Leadtools.Wia.WiaEnumItemsEventArgs)">
      <summary>
            Occurs while enumerating the WIA child items.
            </summary>
      <param name="value0">The source of the sender</param>
      <param name="value1">A <see cref="T:Leadtools.Wia.WiaEnumItemsEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumItemsEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.FreeItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise_EnumItemsEvent(System.Object,Leadtools.Wia.WiaEnumItemsEventArgs)">
      <summary>
            Occurs while enumerating the WIA child items.
            </summary>
      <param name="sender">The source of the sender</param>
      <param name="e">A <see cref="T:Leadtools.Wia.WiaEnumItemsEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumItemsEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.FreeItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise__setPropertiesEvent(System.Object,Leadtools.Wia.WiaSetPropertiesEventArgs)">
      <summary>
            Occurs while setting the WIA properties.
            </summary>
      <param name="value0">The source of the sender</param>
      <param name="value1">A <see cref="T:Leadtools.Wia.WiaSetPropertiesEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaSetPropertiesEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.raise_SetPropertiesEvent(System.Object,Leadtools.Wia.WiaSetPropertiesEventArgs)">
      <summary>
            Occurs while setting the WIA properties.
            </summary>
      <param name="sender">The source of the sender</param>
      <param name="e">A <see cref="T:Leadtools.Wia.WiaSetPropertiesEventArgs" /> object that contains the event data.</param>
      <value>
            The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaSetPropertiesEventArgs" /> containing data related to this event.
            </value>
      <noremarks />
      <noexample />
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      <summary>
            Acquires one or more images from a WIA source.
            </summary>
      <keywords>Scan</keywords>
      <param name="owner">Window handle of your application window.</param>
      <param name="item">
        <para>This parameter is only used when acquiring from scanner device and the <b>ShowUserInterface</b> 
            flag is NOT set. Use this parameter to specify the scanner’s paper source (Feeder or Flatbed).</para>
        <para>This flag is optional. If you are using WIA 1.0 you can change the paper source by changing the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ScannerDeviceDocumentHandlingSelect</see>
            property value for the root item or 
            by enumerating the available scanner items and passing the item to be used for scanning.</para>
        <para>If you are using WIA 2.0 either enumerate the available scanner items and pass the item 
            to be used for scanning, or pass null (Nothing in Visual Basic), in which case the enumeration will 
            be performed internally and the first enumerated item will be used as the source item.</para>
      </param>
      <param name="flags">Flag that determines certain actions of the WIA image acquisition selection dialog box. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.None</see></term><description>
                    Default behavior for the device image acquisition dialog box.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.SingleImage</see></term><description>
                    Restrict image selection to a single image in the device image acquisition dialog box. This flag is not available if you are using WIA version 2.0.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.ShowUserInterface</see></term><description>
                    Show the manufacturer’s image acquisition dialog box.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.UseCommonUI</see></term><description>
                    Use the system user interface (UI), if available, rather than the vendor-supplied UI. If the system UI is not available, the vendor UI is used.
                 </description></item></list></param>
      <returns>One of the DialogResult values. If an error occurs, an exception is thrown.</returns>
      <remarks>
        <para>This function will acquire single or multiple images from the selected WIA device.</para>
        <para>Make sure to call <see cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)"> WiaSession.Startup</see> and then call 
            any of the <see cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)"> WiaSession.SelectDeviceDlg</see> or <see cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)"> WiaSession.SelectDevice</see> 
            functions before calling this function.</para>
        <para>You can change the <see cref="P:Leadtools.Wia.WiaSession.AcquireOptions" /> property members before calling this 
            method to control some options while acquiring from the WIA source.</para>
        <para>Set this method for memory transfer or file transfer by performing one of the following:</para>
        <para>
          <list>
            <item>
              <description>Set the transfer mode you wish to use through the <see cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">WiaSession.SetProperties</see> method.
                 </description>
            </item>
            <item>
              <description>Set the transfer mode by setting the <i>value</i> parameter
                 to any of the transfer modes available through the <see cref="T:Leadtools.Wia.WiaTransferMode" /> and then call the 
                 <see cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">WiaSession.SetPropertyLong</see> method passing 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemTymed</see>
                 for the <i>propertyId</i> parameter of this method.
                 </description>
            </item>
          </list>
        </para>
        <para>When performing memory transfer you need to add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event 
            to receive the acquired page(s). The event will also provide you with the percent completion of the page transfer progress.</para>
        <para>When performing file transfer it is optional to add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event since the event will 
            only provide you with the saved file path and the percent completion of the file saving process.</para>
        <para>When performing file transfer two properties within the WiaSession class will become available:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> - contains the count of the saved files.</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> - a collection that contains the saved file paths and filenames.</description>
            </item>
          </list>
        </para>
        <para>To cancel the acquire operation you need to add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event and set
            the <b>Cancel</b> member of the <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> to true.</para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Note:</strong>
              </para>
            </term>
            <description>
                    If the <b>ShowUserInterface</b> flag is set for any of the acquire methods, then 
                    be aware that some of the previously set/changed user properties (using any of the SetPropertyXxx 
                    or SetProperties methods) will be overwritten by the Microsoft's image acquisition dialog box. 
            Microsoft's image acquisition dialog box sets its own initialization properties like the current intent (image type), selected 
                    area (left, top, width and height), paper source and duplex mode, ...etc.
                    <para>In order to 
                    suppress the manufacturer’s image acquisition dialog and acquire directly from the specified source item
                    through the <i>item</i> parameter using the values set through the SetPropertyXxx and SetProperties methods, do not set the <b>ShowUserInterface</b> flag.</para></description>
          </item>
          <item>
            <term>
              <strong>Note:</strong>
            </term>
            <description>
                    While running a Win32 version application that calls this function on Windows VISTA 64-Bit we have noticed 
                    that the <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> and <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> properties will not be 
                    updated with the required information. This is a known limitation of Microsoft’s WIA toolkit.
                 </description>
          </item>
          <item>
            <term>
              <strong>Note:</strong>
            </term>
            <description>
                    If you are using WIA 2.0 and the <b>ShowUserInterface</b> flag is set it is not necessary to add the 
                    <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event. Microsoft’s WIA 2.0 acquire dialog does not 
                    provide an event but performs all the processing and returns with a count of the number of files saved and their 
                    paths through the <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> and <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> properties.
                 </description>
          </item>
        </list>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.AcquireOptions">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.FilesCount">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.FilesPaths">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      <summary>
            Acquires one or more images from a WIA source directly to file(s).
            </summary>
      <param name="owner">Window handle of your application window.</param>
      <param name="item">
        <para>This parameter is only used if you are acquiring from a scanner device and the <b>ShowUserInterface</b> 
            flag is NOT set. Use this parameter to specify the scanner’s paper source (Feeder or Flatbed).</para>
        <para>This flag is optional if you are using WIA 1.0 since you can change the paper source by changing the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ScannerDeviceDocumentHandlingSelect</see> property value for the root item or 
            by enumerating the available scanner items and passing the desired scanner item.</para>
        <para>If you are using WIA 2.0, either enumerate the available scanner items and pass the desired scanner item; 
            or pass null (Nothing in Visual Basic), in which case the enumeration will 
            be performed internally and the first enumerated item will be used as the source item.</para>
      </param>
      <param name="flags">Flag that determines certain actions of the WIA image acquisition selection dialog box. 
            Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.None</see></term><description>
                    Default behavior for the device image acquisition dialog box.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.SingleImage</see></term><description>
                    Restrict image selection to a single image in the device image acquisition dialog box. This flag is not available if you are using WIA version 2.0.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.ShowUserInterface</see></term><description>
                    Show the manufacturer’s image acquisition dialog box.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.UseCommonUI</see></term><description>
                    Use the system user interface (UI), if available, rather than the vendor-supplied UI. If the system UI is not available, the vendor UI is used.
                 </description></item></list></param>
      <returns>One of the DialogResult values. If an error occurs, an exception is thrown.</returns>
      <remarks>
        <para>This function will acquire single or multiple images from the selected WIA device and save them 
            directly to file(s).</para>
        <para>Make sure to call <see cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)"> WiaSession.Startup</see> and then call 
            any of the <see cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)"> WiaSession.SelectDeviceDlg</see> or <see cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)"> WiaSession.SelectDevice</see> 
            functions before calling this function.</para>
        <para>Change the <see cref="P:Leadtools.Wia.WiaSession.AcquireOptions" /> property members before calling this 
            method to control the saved filenames and paths, along with other options while acquiring from the WIA source.</para>
        <para>When performing file transfer it is optional to add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event, 
            since the event will 
            only provide you with the saved file path and name and the percent completion of the file saving process.</para>
        <para>Two properties within the WiaSession class will become available when using this function:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> - contains the number of files being saved.</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> - a collection that contains the saved file paths and filenames.</description>
            </item>
          </list>
        </para>
        <para>To cancel the acquire operation, add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event and set
            the <b>Cancel</b> member of the <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> to true.</para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Note:</strong>
              </para>
            </term>
            <description>
                    If the <b>ShowUserInterface</b> flag is set for any of the acquire methods, then 
                    be aware that some of the previously set/changed user properties (using any of the SetPropertyXxx 
                    or SetProperties methods) will be overwritten by the Microsoft's image acquisition dialog box. 
            Microsoft's image acquisition dialog box sets its own initialization properties like the current intent (image type), selected 
                    area (left, top, width and height), paper source and duplex mode, ...etc.
                    <para>To 
                    suppress the manufacturer’s image acquisition dialog and acquire directly from the specified source item
                    through the <i>item</i> parameter using the values set through the SetPropertyXxx and SetProperties methods, do not set the <b>ShowUserInterface</b> flag.</para></description>
          </item>
          <item>
            <term>
              <strong>Note:</strong>
            </term>
            <description>
                    While running a Win32 version application that calls this function on Windows VISTA 64-Bit we have noticed 
                    that the <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> and <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> properties will not be 
                    updated with the required information. This is a known limitation of Microsoft’s WIA toolkit.
                 </description>
          </item>
          <item>
            <term>
              <strong>Note:</strong>
            </term>
            <description>
                    If you are using WIA 2.0 while the <b>ShowUserInterface</b> flag is set then it is not necessary to add the 
                    <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event. Microsoft’s WIA 2.0 Acquire dialog does not 
                    provide an event but performs all of the processing and returns with the number of files that were saved along with their 
                    paths through the <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> and <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> properties.
                 </description>
          </item>
        </list>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AcquireToFileExample(ByVal parent As IWin32Window)
         If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         Dim session As WiaSession = New WiaSession()
         session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            session.Shutdown()
            Return
         End If

         ' Initialize and fill the required fields from the WiaAcquireOptions structure
         Dim wiaAcquireOptions As WiaAcquireOptions = wiaAcquireOptions.Empty
            wiaAcquireOptions.FileName = LeadtoolsExamples.Common.ImagesPath.Path + "WiaTest.bmp"
         wiaAcquireOptions.OverwriteExisting = True
         wiaAcquireOptions.Append = False
         wiaAcquireOptions.SaveToOneFile = False
         session.AcquireOptions = wiaAcquireOptions

         AddHandler session.AcquireFileEvent, AddressOf session_AcquireFileEvent

         session.AcquireToFile(parent, Nothing, WiaAcquireFlags.ShowUserInterface Or WiaAcquireFlags.UseCommonUI)

         ' Display listing of all paths and filenames for the saved files(s).
         If session.FilesCount &gt; 0 Then
            Dim strMsg As String = "Acquired page(s) were saved to:" &amp; Constants.vbLf + Constants.vbLf
            Dim i As Integer = 0
            Do While i &lt; session.FilesCount
               Dim strTemp As String = String.Format("{0}" &amp; Constants.vbLf, session.FilesPaths(i))
               strMsg &amp;= strTemp
               i += 1
            Loop
            MessageBox.Show(strMsg)
         End If

         RemoveHandler session.AcquireFileEvent, AddressOf session_AcquireFileEvent
         session.Shutdown()
      End Sub

      Public Sub session_AcquireFileEvent(ByVal sender As Object, ByVal e As WiaAcquireFileEventArgs)
         Console.WriteLine(e.Percent)
      End Sub
</code>
        <code lang="CS">      public void AcquireToFileExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         WiaSession wiaSession = new WiaSession();
         wiaSession.Startup(WiaVersion.Version1);

         DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wiaSession.Shutdown();
            return;
         }

         // Initialize and fill the required fields from the WiaAcquireOptions structure
         WiaAcquireOptions wiaAcquireOptions = WiaAcquireOptions.Empty;
         wiaAcquireOptions.FileName = LeadtoolsExamples.Common.ImagesPath.Path + "WiaTest.bmp";
         wiaAcquireOptions.OverwriteExisting = true;
         wiaAcquireOptions.Append = false;
         wiaAcquireOptions.SaveToOneFile = false;
         wiaSession.AcquireOptions = wiaAcquireOptions;

         wiaSession.AcquireFileEvent += new EventHandler&lt;WiaAcquireFileEventArgs&gt;(wiaSession_AcquireFileEvent);

         wiaSession.AcquireToFile(parent, null, WiaAcquireFlags.ShowUserInterface | WiaAcquireFlags.UseCommonUI);

         // Display a listing of all paths and filenames for the saved files(s).
         if(wiaSession.FilesCount &gt; 0)
         {
            string strMsg = "Acquired page(s) were saved to:\n\n";
            for (int i = 0; i &lt; wiaSession.FilesCount; i++)
            {
               string strTemp = string.Format("{0}\n", wiaSession.FilesPaths[i]);
               strMsg += strTemp;
            }
            MessageBox.Show(strMsg);
         }

         wiaSession.AcquireFileEvent -= new EventHandler&lt;WiaAcquireFileEventArgs&gt;(wiaSession_AcquireFileEvent);
         wiaSession.Shutdown();
      }

      public void wiaSession_AcquireFileEvent(object sender, WiaAcquireFileEventArgs e)
      {
         Console.WriteLine(e.Percent);
      }
</code>
        <!--Leadtools.Wia.WiaSession.AcquireToFile-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.AcquireOptions">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.FilesCount">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.FilesPaths">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      <summary>
            Acquires one or more images from a WIA source.
            </summary>
      <param name="version">The WIA version to be used. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaVersion">WiaVersion.Version1</see></term><description>
                    Use WIA version 1.0.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaVersion">WiaVersion.Version2</see></term><description>
                    Use WIA version 2.0.
                 </description></item></list></param>
      <param name="owner">Window handle of your application window.</param>
      <param name="item">
        <para>This parameter is only used when acquiring from a scanner device while the <b>ShowUserInterface</b> 
            flag is NOT set. Use this parameter to specify the scanner’s paper source (Feeder or Flatbed).</para>
        <para>This flag is optional. If you are using WIA 1.0 you can change the paper source by changing the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ScannerDeviceDocumentHandlingSelect</see> property value for the root item or 
            by enumerating the available scanner items and passing the desired scanner item.</para>
        <para>If you are using WIA 2.0, either enumerate the available scanner items and pass the desired scanner item; 
            or pass null (Nothing in Visual Basic), in which case the enumeration will 
            be performed internally and the first enumerated item will be used as the source item.</para>
      </param>
      <param name="deviceType">Specifies which type of WIA device to use. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.Default</see></term><description>
                    Generic WIA device. During device enumerations, this constant is used to enumerate all WIA devices. 
            This is the default value.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.Scanner</see></term><description>
                    The device is a scanner.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.DigitalCamera</see></term><description>
                    The device is a camera. Note that this type of device is not supported by Windows Vista and later.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.StreamingVideo</see></term><description>
                    The device contains streaming video. Note that this type of device is not supported by Windows Server 2003, Windows Vista, or later.
                 </description></item></list></param>
      <param name="flags">Flag that determines certain actions of the WIA image acquisition selection dialog box. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.None</see></term><description>
                    Default behavior for the device image acquisition dialog box.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.NoDefault</see></term><description>
                    Force displaying the Select Device dialog box even if there is only one device available.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.SingleImage</see></term><description>
                    Restrict image selection to a single image in the device image acquisition dialog box. This flag is not available if you are using WIA version 2.0.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.ShowUserInterface</see></term><description>
                    Show the manufacturer’s image acquisition dialog box.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaAcquireFlags">WiaAcquireFlags.UseCommonUI</see></term><description>
                    Use the system user interface (UI), if available, rather than the vendor-supplied UI. If the system UI is not available, the vendor UI is used.
                 </description></item></list></param>
      <returns>One of the DialogResult values. If an error occurs, an exception is thrown.</returns>
      <remarks>
        <para>This is a high level acquire function that you can call directly. When using this function, 
            the following functions are called internally:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Wia.WiaSession.Shutdown" />
              </description>
            </item>
          </list>
        </para>
        <para>You can change the <see cref="P:Leadtools.Wia.WiaSession.AcquireOptions" /> property members before calling this 
            method to control some options while acquiring from the WIA source.</para>
        <para>Set this method to perform memory transfer or file transfer by performing one of the following:</para>
        <para>
          <list>
            <item>
              <description>Set the transfer mode through the <see cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">WiaSession.SetProperties</see> method.
                 </description>
            </item>
            <item>
              <description>Set the transfer mode by setting the <i>value</i> parameter
                 to any of the transfer modes available through the <see cref="T:Leadtools.Wia.WiaTransferMode" /> and then call the 
                 <see cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">WiaSession.SetPropertyLong</see> method, passing 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemTymed</see>
                 for the <i>propertyId</i> parameter of this method.
                 </description>
            </item>
          </list>
        </para>
        <para>When performing memory transfer you need to add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event 
            to receive the acquired page(s). The event will also provide you with the percent completion of the page transfer progress.</para>
        <para>When performing file transfer it is optional to add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event since the event will 
            only provide you with the saved file path and the percent completion of the file saving process.</para>
        <para>When performing file transfer two properties within the WiaSession class become available:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> - contains the number of files being saved.</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> - a collection that contains the saved file paths and filenames.</description>
            </item>
          </list>
        </para>
        <para>To cancel the acquire operation, add the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event and set
            the <b>Cancel</b> member of the <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> to true.</para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Note:</strong>
              </para>
            </term>
            <description>
                    Be aware that when the <b>ShowUserInterface</b> flag is set for any of the acquire methods, the values of any
            properties set by using the SetPropertyXxx 
                    or SetProperties methods will be overwritten by the Microsoft's image acquisition dialog box. 
            Microsoft's image acquisition dialog box sets its own initialization properties like the current intent (image type), selected 
                    area (left, top, width and height), paper source and duplex mode, ...etc.
                    <para>Therefore, do not set the <b>ShowUserInterface</b> flag if you wish to 
                    suppress the manufacturer’s image acquisition dialog and acquire directly from the specified source item
                    through the <i>item</i> parameter using the values set through the SetPropertyXxx and SetProperties methods.</para></description>
          </item>
          <item>
            <term>
              <strong>Note:</strong>
            </term>
            <description>
                    While running a Win32 version application that calls this function on Windows VISTA 64-Bit we have noticed 
                    that the <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> and <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> properties will not be 
                    updated with the required information.  This is a known limitation of Microsoft’s WIA toolkit.
                 </description>
          </item>
          <item>
            <term>
              <strong>Note:</strong>
            </term>
            <description>
                    If you are using WIA 2.0 while the <b>ShowUserInterface</b> flag is set then it is not necessary to add the 
                    <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event.  Microsoft’s WIA 2.0 Acquire dialog does not 
                    provide an event but performs all the processing and returns with the number of files that were saved along with their 
                    paths through the <see cref="P:Leadtools.Wia.WiaSession.FilesCount" /> and <see cref="P:Leadtools.Wia.WiaSession.FilesPaths" /> properties.
                 </description>
          </item>
        </list>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AcquireSimpleExample(ByVal parent As IWin32Window)
         Dim session As WiaSession = New WiaSession()

         ' Initialize and fill the required fields from the WiaAcquireOptions structure
         Dim wiaAcquireOptions As WiaAcquireOptions = wiaAcquireOptions.Empty
         wiaAcquireOptions.MemoryBufferSize = 32 * 1024
         wiaAcquireOptions.DoubleBuffer = True
         session.AcquireOptions = wiaAcquireOptions

         AddHandler session.AcquireEvent, AddressOf session_AcquireSimpleEvent

         session.Acquire(parent, Nothing, WiaAcquireFlags.ShowUserInterface Or WiaAcquireFlags.UseCommonUI)

         RemoveHandler session.AcquireEvent, AddressOf session_AcquireSimpleEvent
         session.Shutdown()
      End Sub

      Public Sub session_AcquireSimpleEvent(ByVal sender As Object, ByVal e As WiaAcquireEventArgs)
         Application.DoEvents()

         If (e.Flags And WiaAcquiredPageFlags.StartOfPage) = WiaAcquiredPageFlags.StartOfPage Then
            Console.WriteLine("Beginning of data transfer.")
         ElseIf (e.Flags And WiaAcquiredPageFlags.EndOfPage) = WiaAcquiredPageFlags.EndOfPage Then
            Console.WriteLine("End of data transfer.")
         End If

         If Not e.Image Is Nothing Then
            ' You can load the image here.
         End If
      End Sub
</code>
        <code lang="CS">      public void AcquireSimpleExample(IWin32Window parent)
      {
         WiaSession wiaSession = new WiaSession();

         // Initialize and fill the required fields from the WiaAcquireOptions structure
         WiaAcquireOptions wiaAcquireOptions = WiaAcquireOptions.Empty;
         wiaAcquireOptions.MemoryBufferSize = 32 * 1024;
         wiaAcquireOptions.DoubleBuffer = true;
         wiaSession.AcquireOptions = wiaAcquireOptions;

         wiaSession.AcquireEvent += new EventHandler&lt;WiaAcquireEventArgs&gt;(wiaSession_AcquireSimpleEvent);

         wiaSession.Acquire(parent, null, WiaAcquireFlags.ShowUserInterface | WiaAcquireFlags.UseCommonUI);

         wiaSession.AcquireEvent -= new EventHandler&lt;WiaAcquireEventArgs&gt;(wiaSession_AcquireSimpleEvent);
         wiaSession.Shutdown();
      }

      public void wiaSession_AcquireSimpleEvent(object sender, WiaAcquireEventArgs e)
      {
         Application.DoEvents();

         if ((e.Flags &amp; WiaAcquiredPageFlags.StartOfPage) == WiaAcquiredPageFlags.StartOfPage)
            Console.WriteLine("Beginning of data transfer.");
         else if ((e.Flags &amp; WiaAcquiredPageFlags.EndOfPage) == WiaAcquiredPageFlags.EndOfPage)
            Console.WriteLine("End of data transfer.");

         if (e.Image != null)
         {
            // You can load the image here.
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.AcquireSimple-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.AcquireOptions">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.FilesCount">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.FilesPaths">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">
      <summary>
            Determines whether there is an available video preview.
            </summary>
      <returns>true if the video preview is started; otherwise, false.</returns>
      <remarks>
            This function is used to determine whether the video preview has started. Start the video 
            preview by calling the <see cref="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">WiaSession.StartVideoPreview</see> method.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub IsVideoPreviewAvailableExample(ByVal parent As IWin32Window)
         If (Not wiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         Dim session As WiaSession = New WiaSession()
         session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = session.SelectDeviceDlg(parent, WiaDeviceType.StreamingVideo, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            session.Shutdown()
            Return
         End If

         ' start the video preview
         wiaSession.StartVideoPreview(parent, false)

         ' determine whether a video preview is available
         Dim available As Boolean = wiaSession.IsVideoPreviewAvailable()
         If (Not available) Then
            MessageBox.Show("No streaming video available.")
            wiaSession.EndVideoPreview()
            wiaSession.Shutdown()
            Return
         End If

         'Resize the video preview area to fit the parent window.
         'I am calling this resize function here only for demonstration purposes, but you
         'should call it in your window resize event.
         wiaSession.ResizeVideoPreview(True)

         ' acquire an image from the video source.
         Dim takenPictureFileName As String = wiaSession.AcquireImageFromVideo()

         Dim strMsg As String = String.Format("Acquired image was saved to the following path:\n{0}", takenPictureFileName)
         MessageBox.Show(strMsg)

         wiaSession.EndVideoPreview()
         session.Shutdown()
      End Sub</code>
        <code lang="CS">      public void IsVideoPreviewAvailableExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         WiaSession wiaSession = new WiaSession();
         wiaSession.Startup(WiaVersion.Version1);

         DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.StreamingVideo, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wiaSession.Shutdown();
            return;
         }

         // start the video preview
         wiaSession.StartVideoPreview(parent, false);

         // determine whether a video preview is available
         bool available = wiaSession.IsVideoPreviewAvailable();
         if(!available)
         {
            MessageBox.Show("No streaming video available.");
            wiaSession.EndVideoPreview();
            wiaSession.Shutdown();
            return;
         }

         // Resize the video preview area to fit the parent window.
         // I am calling this resize function here only for demonstration purposes, but you
         // should call it in your window resize event.
         wiaSession.ResizeVideoPreview(true);

         // acquire an image from the video source.
         string takenPictureFileName = wiaSession.AcquireImageFromVideo();

         string strMsg = String.Format("Acquired image was saved to the following path:\n{0}", takenPictureFileName);
         MessageBox.Show(strMsg);

         wiaSession.EndVideoPreview();
         wiaSession.Shutdown();
      }</code>
        <!--Leadtools.Wia.WiaSession.IsVideoPreviewAvailable-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.ResizeVideoPreview(System.Boolean)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireImageFromVideo">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EndVideoPreview">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">
      <summary>
            Starts the video preview inside the window handle specified through the <i>owner</i> parameter.
            </summary>
      <param name="owner">Window handle where to display the streaming video preview.</param>
      <param name="stretchToFitParent">
        <para>Specifies whether the video display is stretched to fit the parent window. Possible values are:</para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Value</strong>
              </para>
            </term>
            <description>
              <para>
                <strong>Meaning</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>true</b>
            </term>
            <description>
                    Stretch the video preview to fit the parent window.
                 </description>
          </item>
          <item>
            <term>
              <b>false</b>
            </term>
            <description>
                    Video is displayed in a supported resolution smaller than the parent window.
                 </description>
          </item>
        </list>
      </param>
      <remarks>
        <para>This function will start the video stream preview in the window or the control specified through the 
            <i>owner</i> parameter.</para>
        <para>This function will internally set the image directory of the captured still images to the device’s
            default path unless you changed the destination images directory property yourself as mentioned in the 
            <see cref="M:Leadtools.Wia.WiaSession.AcquireImageFromVideo">WiaSession.AcquireImageFromVideo</see> documentation.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">WiaSession.IsVideoPreviewAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.ResizeVideoPreview(System.Boolean)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireImageFromVideo">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EndVideoPreview">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.ResizeVideoPreview(System.Boolean)">
      <summary>
            Resizes the video playback to the largest supported resolution that fits inside the parent window.
            </summary>
      <param name="stretchToFitParent">
        <para>Specifies whether the video display is stretched to fit the parent window. Possible values are:</para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Value</strong>
              </para>
            </term>
            <description>
              <para>
                <strong>Meaning</strong>
              </para>
            </description>
          </item>
          <item>
            <term>
              <b>true</b>
            </term>
            <description>
                    Stretch the video preview to fit the parent window.
                 </description>
          </item>
          <item>
            <term>
              <b>false</b>
            </term>
            <description>
                    Video is displayed in a supported resolution smaller than the parent window.
                 </description>
          </item>
        </list>
      </param>
      <remarks>
        <para>This function will start the video stream preview in the window or the control specified through the 
            <i>owner</i> parameter.</para>
        <para>This function will internally set the image directory of the captured still images to the device’s
            default path unless you changed the destination images directory property yourself as mentioned in the 
            <see cref="M:Leadtools.Wia.WiaSession.AcquireImageFromVideo">WiaSession.AcquireImageFromVideo</see> documentation.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">WiaSession.IsVideoPreviewAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireImageFromVideo">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EndVideoPreview">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.AcquireImageFromVideo">
      <summary>
            Extracts a still image from the video stream, and saves the image as a JPEG file.
            </summary>
      <returns>A <see cref="T:System.String" /> containing the full path and filename of the captured JPEG file from the camera device.</returns>
      <remarks>
        <para>This method will capture a still image from the video stream and save it as a JPEG file.</para>
        <para>To change the directory where the captured image is saved, set the new folder path in the <i>value</i> parameter
            and then call the <see cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">WiaSession.SetPropertyString</see> method, passing 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.VideoDeviceImagesDirectory</see>
            for the <i>propertyId</i> parameter of this method.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">WiaSession.IsVideoPreviewAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.ResizeVideoPreview(System.Boolean)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EndVideoPreview">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.EndVideoPreview">
      <summary>
            Shuts down the streaming video.
            </summary>
      <remarks>
        <para>This method shuts down the streaming video. To start video preview again, 
            call the <see cref="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">WiaSession.StartVideoPreview</see> method again.</para>
        <para>Call this function only after a successful call to <see cref="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">WiaSession.StartVideoPreview</see> method.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">WiaSession.IsVideoPreviewAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsVideoPreviewAvailable">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.StartVideoPreview(System.Windows.Forms.IWin32Window,System.Boolean)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireImageFromVideo">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.ResizeVideoPreview(System.Boolean)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      <summary>
            Enumerates all of the available WIA driver capabilities and properties and determines the available values for each one.
            </summary>
      <param name="item">
        <para>Handle to the item to get its capabilities. Retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</para>
      </param>
      <param name="flags">Reserved for future use, pass <see cref="T:Leadtools.Wia.WiaEnumCapabilitiesFlags">WiaEnumCapabilitiesFlags.None</see>.</param>
      <remarks>
        <para>This function will enumerate all of the available WIA driver capabilities and properties (and determine the available values for each one) 
            for the specified acquisition source.</para>
        <para>Each enumerated capability will be sent to the user through the <see cref="E:Leadtools.Wia.WiaSession.EnumCapabilitiesEvent" /> 
            event. Add this event when enumerating the device's capabilities. To cancel the enumeration proces, add the <see cref="E:Leadtools.Wia.WiaSession.EnumCapabilitiesEvent" /> 
            event and then set the <b>Cancel</b> member of the 
            <see cref="T:Leadtools.Wia.WiaEnumCapabilitiesEventArgs" /> to true.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Dim session As WiaSession
      Public Sub EnumCapabilitiesExample(ByVal parent As IWin32Window)
         If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         session = New WiaSession()
         session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            session.Shutdown()
            Return
         End If

         AddHandler session.EnumCapabilitiesEvent, AddressOf session_EnumCapabilitiesEvent

         Dim rootItem As Object = session.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            session.EnumCapabilities(rootItem, WiaEnumCapabilitiesFlags.None)
         End If

         RemoveHandler session.EnumCapabilitiesEvent, AddressOf session_EnumCapabilitiesEvent

         session.Shutdown()
      End Sub

      Private Sub session_EnumCapabilitiesEvent(ByVal sender As Object, ByVal e As WiaEnumCapabilitiesEventArgs)
         Dim strMsg As String = String.Empty
         Dim strPropAccess As String = String.Empty
         Dim strPropValue As String = String.Empty

         strMsg = String.Format("WIA Capabilities count = {0}" &amp; Constants.vbLf, e.CapabilitiesCount)
         Console.WriteLine(strMsg)

         ' print out the received capability information into the console window.
         If e.CapabilitiesCount &gt; 0 Then
            Console.WriteLine("Capability information:" &amp; Constants.vbLf)

            ' print out received capability property ID.
            strMsg = String.Format("Property ID:" &amp; Constants.vbTab &amp; "{0}" &amp; Constants.vbLf, e.Capability.PropertyId.ToString())
            Console.WriteLine(strMsg)

            ' print out received capability property Name.
            strMsg = String.Format("Property Name:" &amp; Constants.vbTab &amp; "{0}" &amp; Constants.vbLf, e.Capability.PropertyName)
            Console.WriteLine(strMsg)

            ' print out received capability property access.
            If (e.Capability.PropertyAttributes And WiaPropertyAttributesFlags.ReadWrite) = WiaPropertyAttributesFlags.ReadWrite Then
               strPropAccess &amp;= "ReadWrite"
            Else
               If (e.Capability.PropertyAttributes And WiaPropertyAttributesFlags.Read) = WiaPropertyAttributesFlags.Read Then
                  strPropAccess &amp;= "Read"
               End If

               If (e.Capability.PropertyAttributes And WiaPropertyAttributesFlags.Write) = WiaPropertyAttributesFlags.Write Then
                  If (Not String.IsNullOrEmpty(strPropAccess)) Then
                     strPropAccess &amp;= " | Write"
                  Else
                     strPropAccess &amp;= "Write"
                  End If
               End If
            End If

            If (e.Capability.PropertyAttributes And WiaPropertyAttributesFlags.Cashable) = WiaPropertyAttributesFlags.Cashable Then
               If (Not String.IsNullOrEmpty(strPropAccess)) Then
                  strPropAccess &amp;= " | Cashable"
               Else
                  strPropAccess &amp;= "Cashable"
               End If
            End If

            strMsg = String.Format("Property Access:" &amp; Constants.vbTab &amp; "{0}" &amp; Constants.vbLf, strPropAccess)
            Console.WriteLine(strMsg)

            ' print out the capability property value(s) that were received.
            If (e.Capability.PropertyAttributes And WiaPropertyAttributesFlags.List) = WiaPropertyAttributesFlags.List Then
               strPropValue = "Property List Values:" &amp; Constants.vbLf
               Dim i As Integer = 0
               Do While i &lt; e.Capability.Values.ListValues.ValuesCount
                  If (e.Capability.VariableType And WiaVariableTypes.Bstr) = WiaVariableTypes.Bstr Then
                     strPropValue = strPropValue &amp; Constants.vbTab + Convert.ToString(e.Capability.Values.ListValues.Values(i)) + Constants.vbLf
                  ElseIf (e.Capability.VariableType And WiaVariableTypes.Clsid) = WiaVariableTypes.Clsid Then
                     Dim guidValue As System.Guid = CType(e.Capability.Values.ListValues.Values(i), System.Guid)
                     strPropValue = strPropValue &amp; Constants.vbTab + guidValue.ToString() + Constants.vbLf
                  Else
                     strPropValue = strPropValue &amp; Constants.vbTab + (Convert.ToInt32(e.Capability.Values.ListValues.Values(i))).ToString() &amp; Constants.vbLf
                  End If
                  i += 1
               Loop
            ElseIf (e.Capability.PropertyAttributes And WiaPropertyAttributesFlags.Range) = WiaPropertyAttributesFlags.Range Then
               strPropValue = String.Format("Property Range Values:" &amp; Constants.vbLf + Constants.vbTab &amp; "Minimum Value: {0}" &amp; Constants.vbLf + Constants.vbTab &amp; "Maximum Value: {1}" &amp; Constants.vbLf, e.Capability.Values.RangeValues.MinimumValue, e.Capability.Values.RangeValues.MaximumValue)
            ElseIf (e.Capability.PropertyAttributes And WiaPropertyAttributesFlags.Flag) = WiaPropertyAttributesFlags.Flag Then
               strPropValue = e.Capability.Values.FlagsValues.FlagValues.ToString()
            Else ' The property value is of type "None", and in this case you can retrieve the value by calling the appropriate GetPropertyXXX method according to the received variable type.
               strPropValue = "Property Value: "

               Dim rootItem As Object = session.GetRootItem(Nothing)

               If (e.Capability.VariableType And WiaVariableTypes.Bstr) = WiaVariableTypes.Bstr Then
                  Dim stringValue As String = session.GetPropertyString(rootItem, Nothing, e.Capability.PropertyId)
                  strPropValue &amp;= stringValue
               ElseIf (e.Capability.VariableType And WiaVariableTypes.Clsid) = WiaVariableTypes.Clsid Then
                  Dim guidValue As Guid = session.GetPropertyGuid(rootItem, Nothing, e.Capability.PropertyId)
                  strPropValue &amp;= guidValue.ToString()
               Else
                  Dim longValue As Integer = session.GetPropertyLong(rootItem, Nothing, e.Capability.PropertyId)
                  strPropValue &amp;= longValue.ToString()
               End If
            End If

            Console.WriteLine(strPropValue)
         End If
      End Sub
</code>
        <code lang="CS">      WiaSession session;
      public void EnumCapabilitiesExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         session = new WiaSession();
         session.Startup(WiaVersion.Version1);

         DialogResult res = session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            session.Shutdown();
            return;
         }

         session.EnumCapabilitiesEvent += new EventHandler&lt;WiaEnumCapabilitiesEventArgs&gt;(wiaSession_EnumCapabilitiesEvent);

         object rootItem = session.GetRootItem(null);
         if (rootItem != null)
         {
            session.EnumCapabilities(rootItem, WiaEnumCapabilitiesFlags.None);
         }

         session.EnumCapabilitiesEvent -= new EventHandler&lt;WiaEnumCapabilitiesEventArgs&gt;(wiaSession_EnumCapabilitiesEvent);

         session.Shutdown();
      }

      void wiaSession_EnumCapabilitiesEvent(object sender, WiaEnumCapabilitiesEventArgs e)
      {
         string strMsg = string.Empty;
         string strPropAccess = string.Empty;
         string strPropValue = string.Empty;

         strMsg = string.Format("WIA Capabilities count = {0}\n", e.CapabilitiesCount);
         Console.WriteLine(strMsg);

         // print out the received capability information into the console window.
         if(e.CapabilitiesCount &gt; 0)
         {
            Console.WriteLine("Capability information:\n");

            // print out received capability property ID.
            strMsg = string.Format("Property ID:\t{0}\n", e.Capability.PropertyId.ToString());
            Console.WriteLine(strMsg);

            // print out received capability property Name.
            strMsg = string.Format("Property Name:\t{0}\n", e.Capability.PropertyName);
            Console.WriteLine(strMsg);

            // print out received capability property access.
            if ( (e.Capability.PropertyAttributes &amp; WiaPropertyAttributesFlags.ReadWrite) == WiaPropertyAttributesFlags.ReadWrite )
            {
               strPropAccess += "ReadWrite";
            }
            else
            {
               if ((e.Capability.PropertyAttributes &amp; WiaPropertyAttributesFlags.Read) == WiaPropertyAttributesFlags.Read )
                  strPropAccess += "Read";

               if ((e.Capability.PropertyAttributes &amp; WiaPropertyAttributesFlags.Write) == WiaPropertyAttributesFlags.Write)
               {
                  if(!string.IsNullOrEmpty(strPropAccess))
                  {
                     strPropAccess += " | Write";
                  }
                  else
                  {
                     strPropAccess += "Write";
                  }
               }
            }

            if ((e.Capability.PropertyAttributes &amp; WiaPropertyAttributesFlags.Cashable) == WiaPropertyAttributesFlags.Cashable)
            {
               if(!string.IsNullOrEmpty(strPropAccess))
               {
                  strPropAccess += " | Cashable";
               }
               else
               {
                  strPropAccess += "Cashable";
               }
            }

            strMsg = string.Format("Property Access:\t{0}\n", strPropAccess);
            Console.WriteLine(strMsg);

            // print out received capability property value(s).
            if ((e.Capability.PropertyAttributes &amp; WiaPropertyAttributesFlags.List) == WiaPropertyAttributesFlags.List)
            {
               strPropValue = "Property List Values:\n";
               for(int i = 0; i &lt; e.Capability.Values.ListValues.ValuesCount; i++)
               {
                  if ((e.Capability.VariableType &amp; WiaVariableTypes.Bstr) == WiaVariableTypes.Bstr)
                  {
                     strPropValue = strPropValue + "\t" + Convert.ToString(e.Capability.Values.ListValues.Values[i]) + "\n";
                  }
                  else if ((e.Capability.VariableType &amp; WiaVariableTypes.Clsid) == WiaVariableTypes.Clsid)
                  {
                     System.Guid guidValue = (System.Guid)e.Capability.Values.ListValues.Values[i];
                     strPropValue = strPropValue + "\t" + guidValue.ToString()+ "\n";
                  }
                  else
                  {
                     strPropValue = strPropValue + "\t" + (Convert.ToInt32(e.Capability.Values.ListValues.Values[i])).ToString() + "\n";
                  }
               }
            }
            else if ((e.Capability.PropertyAttributes &amp; WiaPropertyAttributesFlags.Range) == WiaPropertyAttributesFlags.Range)
            {
               strPropValue = string.Format("Property Range Values:\n\tMinimum Value: {0}\n\tMaximum Value: {1}\n", e.Capability.Values.RangeValues.MinimumValue, e.Capability.Values.RangeValues.MaximumValue);
            }
            else if ((e.Capability.PropertyAttributes &amp; WiaPropertyAttributesFlags.Flag) == WiaPropertyAttributesFlags.Flag)
            {
               strPropValue = e.Capability.Values.FlagsValues.FlagValues.ToString();
            }
            else  // The property value is of type "None", and in this case you can retrieve the value by calling the GetPropertyXXX method appropriate for the received variable type.
            {
               strPropValue = "Property Value: ";

               object rootItem = session.GetRootItem(null);

               if ((e.Capability.VariableType &amp; WiaVariableTypes.Bstr) == WiaVariableTypes.Bstr)
               {
                  string stringValue = session.GetPropertyString(rootItem, null, e.Capability.PropertyId);
                  strPropValue += stringValue;
               }
               else if ((e.Capability.VariableType &amp; WiaVariableTypes.Clsid) == WiaVariableTypes.Clsid)
               {
                  Guid guidValue = session.GetPropertyGuid(rootItem, null, e.Capability.PropertyId);
                  strPropValue += guidValue.ToString();
               }
               else
               {
                  int longValue = session.GetPropertyLong(rootItem, null, e.Capability.PropertyId);
                  strPropValue += longValue.ToString();
               }
            }

            Console.WriteLine(strPropValue);
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.EnumCapabilities-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      <summary>
            Enumerates all of the available WIA driver transfer formats.
            </summary>
      <param name="item">
        <para>Handle to the item having its supported transfer formats enumerated. Retrieve this 
            parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself, or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</para>
      </param>
      <param name="flags">Reserved for future use, pass <see cref="T:Leadtools.Wia.WiaEnumFormatsFlags">WiaEnumFormatsFlags.None</see>.</param>
      <remarks>
        <para>This function will enumerate all of the available WIA driver transfer formats for the specified item.</para>
        <para>Each enumerated transfer format will be sent to the user through the <see cref="E:Leadtools.Wia.WiaSession.EnumFormatsEvent" /> 
            event. Add this event when enumerating the device's transfer formats. To cancel the enumeration proces, add the <see cref="E:Leadtools.Wia.WiaSession.EnumFormatsEvent" /> 
            event and then set the <b>Cancel</b> member of the 
            <see cref="T:Leadtools.Wia.WiaEnumFormatsEventArgs" /> to true.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub EnumFormatsExample(ByVal parent As IWin32Window)
         If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         Dim session As WiaSession = New WiaSession()
         session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            session.Shutdown()
            Return
         End If

         AddHandler session.EnumFormatsEvent, AddressOf session_EnumFormatsEvent

         Dim rootItem As Object = session.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            session.EnumFormats(rootItem, WiaEnumFormatsFlags.None)
         End If

         RemoveHandler session.EnumFormatsEvent, AddressOf session_EnumFormatsEvent

         session.Shutdown()
      End Sub

      Private Sub session_EnumFormatsEvent(ByVal sender As Object, ByVal e As WiaEnumFormatsEventArgs)
         Dim strMsg As String = String.Empty

         strMsg = String.Format("WIA Formats count = {0}" &amp; Constants.vbLf, e.FormatsCount)
         Console.WriteLine(strMsg)

         ' print out which formats were received into the console window.
         If e.FormatsCount &gt; 0 Then
            Dim formatGuid As Guid = wiaSession.GetFormatGuid(e.Format)
            strMsg = String.Format("WIA Format: {0}" &amp; Constants.vbLf &amp; "WIA Format Transfer Mode: {1}" &amp; Constants.vbLf &amp; "WIA Format Guid: " &amp; Constants.vbLf + Constants.vbLf, e.Format.ToString(), e.TransferMode.ToString(), formatGuid)
            Console.WriteLine(strMsg)
         End If
      End Sub
</code>
        <code lang="CS">      public void EnumFormatsExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         WiaSession wiaSession = new WiaSession();
         wiaSession.Startup(WiaVersion.Version1);

         DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wiaSession.Shutdown();
            return;
         }

         wiaSession.EnumFormatsEvent += new EventHandler&lt;WiaEnumFormatsEventArgs&gt;(wiaSession_EnumFormatsEvent);

         object rootItem = wiaSession.GetRootItem(null);
         if (rootItem != null)
         {
            wiaSession.EnumFormats(rootItem, WiaEnumFormatsFlags.None);
         }

         wiaSession.EnumFormatsEvent -= new EventHandler&lt;WiaEnumFormatsEventArgs&gt;(wiaSession_EnumFormatsEvent);

         wiaSession.Shutdown();
      }

      void wiaSession_EnumFormatsEvent(object sender, WiaEnumFormatsEventArgs e)
      {
         string strMsg = string.Empty;

         strMsg = string.Format("WIA Formats count = {0}\n", e.FormatsCount);
         Console.WriteLine(strMsg);

         // print out the received formats into the console window.
         if (e.FormatsCount &gt; 0)
         {
            Guid formatGuid = WiaSession.GetFormatGuid(e.Format);
            strMsg = string.Format("WIA Format: {0}\nWIA Format Transfer Mode: {1}\nWIA Format Guid: \n\n", e.Format.ToString(), e.TransferMode.ToString(), formatGuid);
            Console.WriteLine(strMsg);
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.EnumFormats-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      <summary>
            Enumerates all available child items for the root item specified in the <i>parentItem</i> parameter.
            </summary>
      <param name="parentItem">Handle to the item which represents the root item having its child items enumerated.</param>
      <remarks>
        <para>The WIA run-time system represents each WIA hardware device in a hierarchical tree of items. 
            This function enables applications to enumerate the child items for the specified root item.</para>
        <para>Pass a valid <i>parentItem</i> parameter. To do so, retrieve a pointer to the 
            device’s root Item itself by calling the <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method and then pass the 
            retrieved item to the <b>EnumChildItems</b> method as the parent item for 
            the child items.</para>
        <para>Each enumerated item will be sent to the user through the <see cref="E:Leadtools.Wia.WiaSession.EnumItemsEvent" /> 
            event. Add this event when enumerating the device's child items. To cancel the enumeration proces, add the <see cref="E:Leadtools.Wia.WiaSession.EnumItemsEvent" /> 
            event and then set the <b>Cancel</b> member of the 
            <see cref="T:Leadtools.Wia.WiaEnumItemsEventArgs" /> to true.</para>
        <para>For each received item through the <see cref="E:Leadtools.Wia.WiaSession.EnumItemsEvent" /> event call 
            <see cref="M:Leadtools.Wia.WiaSession.FreeItem(System.Object)" /> method. Save the received items in a list or array and when 
            the list is not needed anymore, loop through the list items and call the <see cref="M:Leadtools.Wia.WiaSession.FreeItem(System.Object)" /> 
            method for each of them.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.FreeItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.EnumDevices">
      <summary>
            Enumerates all available system WIA devices connected to the user's machine.
            </summary>
      <remarks>
        <para>This function will enumerate all available system WIA devices connected to the user's machine.</para>
        <para>Information about each device found, like the device ID, device name 
            and device description, can be retrieved by using the <see cref="E:Leadtools.Wia.WiaSession.EnumDevicesEvent" /> event. To do so, add 
            this event when enumerating the available WIA devices. To cancel the 
            enumeration process add this event and set the <b>Cancel</b> member of the 
            <see cref="T:Leadtools.Wia.WiaEnumDevicesEventArgs" /> to true.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub EnumDevicesExample(ByVal parent As IWin32Window)
         If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         Dim session As WiaSession = New WiaSession()
         session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            session.Shutdown()
            Return
         End If

         AddHandler session.EnumDevicesEvent, AddressOf session_EnumDevicesEvent

         Console.WriteLine("Available WIA Devices:" &amp; Constants.vbLf)
         session.EnumDevices()

         RemoveHandler session.EnumDevicesEvent, AddressOf session_EnumDevicesEvent

         session.Shutdown()
      End Sub

      Private Sub session_EnumDevicesEvent(ByVal sender As Object, ByVal e As WiaEnumDevicesEventArgs)
         Dim strMsg As String = String.Empty

         ' print out some information about each device found into the console window.
         strMsg = String.Format(Constants.vbTab &amp; "Device Name: {0}" &amp; Constants.vbLf + Constants.vbTab &amp; "Device Id: {1}" &amp; Constants.vbLf + Constants.vbTab &amp; "Device Description: {2}" &amp; Constants.vbLf + Constants.vbLf, e.DeviceName, e.DeviceID, e.DeviceDesc)
         Console.WriteLine(strMsg)
      End Sub
</code>
        <code lang="CS">      public void EnumDevicesExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         WiaSession wiaSession = new WiaSession();
         wiaSession.Startup(WiaVersion.Version1);

         DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wiaSession.Shutdown();
            return;
         }

         wiaSession.EnumDevicesEvent += new EventHandler&lt;WiaEnumDevicesEventArgs&gt;(wiaSession_EnumDevicesEvent);

         Console.WriteLine("Available WIA Devices:\n");
         wiaSession.EnumDevices();

         wiaSession.EnumDevicesEvent -= new EventHandler&lt;WiaEnumDevicesEventArgs&gt;(wiaSession_EnumDevicesEvent);

         wiaSession.Shutdown();
      }

      void wiaSession_EnumDevicesEvent(object sender, WiaEnumDevicesEventArgs e)
      {
         string strMsg = string.Empty;

         // print out some information about each device found into the console window.
         strMsg = string.Format("\tDevice Name: {0}\n\tDevice Id: {1}\n\tDevice Description: {2}\n\n", e.DeviceName, e.DeviceID, e.DeviceDesc);
         Console.WriteLine(strMsg);
      }
</code>
        <!--Leadtools.Wia.WiaSession.EnumDevices-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.FreeItem(System.Object)">
      <summary>
            Frees the items enumerated by the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.
            </summary>
      <param name="item">The item that was retrieved through the <see cref="E:Leadtools.Wia.WiaSession.EnumItemsEvent" /> 
            that gets fired after a call to the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method to 
            enumerate the device's child items.</param>
      <remarks>
        <para>Call this method for each item received through the <see cref="E:Leadtools.Wia.WiaSession.EnumDevicesEvent" /> event
            after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetCategoryGuid(Leadtools.Wia.WiaCategories)">
      <summary>
            Retrieves the relevant <see cref="T:System.Guid" /> structure for the WIA 2.0 item's category.
            </summary>
      <param name="category">The WIA 2.0 item category ID. For a list of available categories refer to 
            <see cref="T:Leadtools.Wia.WiaCategories" />.</param>
      <returns>The relevant <see cref="T:System.Guid" /> value for the category Id passed as parameter for the <see cref="M:Leadtools.Wia.WiaSession.GetCategoryGuid(Leadtools.Wia.WiaCategories)" /> method.</returns>
      <remarks>
        <para>This method is only used when using WIA version 2.0. Each WIA 2.0 item has 
            a category represented as <see cref="T:System.Guid" /> structure that can be retrieved by calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)" /> method, and passing 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemCategory</see>
            
            for the <i>propertyId</i> parameter of this method. To determine the relevant category for returned <see cref="T:System.Guid" />,
            call the <see cref="M:Leadtools.Wia.WiaSession.GetCategoryGuid(Leadtools.Wia.WiaCategories)" /> method for each available category in the 
            <see cref="T:Leadtools.Wia.WiaCategories" /> enumeration and then compare the returned <see cref="T:System.Guid" /> value with this one.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">WiaSession.GetPropertyGuid</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetFormatGuid(Leadtools.Wia.WiaFileFormats)">
      <summary>
            Retrieves the relevant <see cref="T:System.Guid" /> structure for the passed file format ID.
            </summary>
      <param name="fileFormat">The WIA item transfer format ID. For a list of available transfer formats, refer to 
            <see cref="T:Leadtools.Wia.WiaFileFormats" />.</param>
      <returns>The relevant <see cref="T:System.Guid" /> value for the file format Id.</returns>
      <remarks>
        <para>Each WIA item's transfer format listed in the <see cref="T:Leadtools.Wia.WiaFileFormats" /> enumeration 
            has a corresponding <see cref="T:System.Guid" /> value. To get that value, call the 
            <b>GetFormatGuid</b> method, passing the format Id for the corresponding Guid value.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">WiaSession.EnumFormats</see>.
            </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      <summary>
            Gets the properties for the specified item.
            </summary>
      <param name="item">Handle to the item having its properties obtained. Retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item or by enumerating the 
            child items of the device through a call to the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <returns>Common WIA source properties.</returns>
      <remarks>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      <summary>
            Sets the values of the properties to the values specified in the <see cref="T:Leadtools.Wia.WiaProperties" /> structure into the 
            WIA device’s item passed through the <i>item</i> parameter.
            </summary>
      <param name="item">Handle to the item having its properties set. Retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item or by enumerating the 
            child items of the device through a call to the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="properties">The properties to set.</param>
      <remarks>
        <para>Add the <see cref="E:Leadtools.Wia.WiaSession.SetPropertiesEvent" /> event to be informed of any error codes 
            returned from setting each property available in the <see cref="T:Leadtools.Wia.WiaProperties" /> structure, and 
            to have the ability to cancel the process.</para>
        <para>
          <list type="table">
            <item>
              <term>
                <para>
                  <strong>Note:</strong>
                </para>
              </term>
              <description>
                    If the <b>ShowUserInterface</b> flag is set for any of the acquire methods, then 
                    be aware that some of the previously set/changed user properties (using any of the SetPropertyXxx 
                    or SetProperties methods) will be overwritten by the Microsoft's image acquisition dialog box. 
            Microsoft's image acquisition dialog box sets its own initialization properties like the current intent (image type), selected 
                    area (left, top, width and height), paper source and duplex mode, ...etc.
                    <para>To 
                    suppress the manufacturer’s image acquisition dialog and acquire directly from the specified source item
                    through the <i>item</i> parameter using the values set through the SetPropertyXxx and SetProperties methods, do not set the <b>ShowUserInterface</b> flag.</para></description>
            </item>
          </list>
        </para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      <summary>
            Retrieves the buffer of type <see cref="T:System.IO.Stream">Stream</see> for any WIA property of type 
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI1</see>
            or  
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>
            .
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <returns>The WIA property buffer value.</returns>
      <remarks>
        <para>Any WIA property of type 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI1</see> or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see> 
            (for example, 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.CameraItemThumbnail</see>,
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ScannerDevicePadColor</see>
            , ...etc)
            returns a <see cref="T:System.IO.Stream">Stream</see>. In order to retrieve this type of buffer you need to call the function <b>GetPropertyBuffer</b>.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Dim myWiaSession As WiaSession
      Public Sub GetPropertyBufferExample(ByVal parent As IWin32Window)
         If (Not wiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         myWiaSession = New WiaSession()
         myWiaSession.Startup(WiaVersion.Version1)

         Dim res As DialogResult = myWiaSession.SelectDeviceDlg(parent, WiaDeviceType.StreamingVideo, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            myWiaSession.Shutdown()
            Return
         End If

         Dim rootItem As Object = myWiaSession.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            AddHandler myWiaSession.EnumItemsEvent, AddressOf session_EnumItemsEvent2

            myWiaSession.EnumChildItems(rootItem)

            RemoveHandler myWiaSession.EnumItemsEvent, AddressOf session_EnumItemsEvent2
         End If

         myWiaSession.Shutdown()
      End Sub

      Private Sub session_EnumItemsEvent2(ByVal sender As Object, ByVal e As WiaEnumItemsEventArgs)
         If Not IsNothing(e.Item) Then
            ' Read the camera item thumbnail property.
            Dim stream As Stream = myWiaSession.GetPropertyBuffer(e.Item, Nothing, WiaPropertyId.CameraItemThumbnail)

            ' Read the camera thumbnail width property.
            Dim nWidth As Integer = myWiaSession.GetPropertyLong(e.Item, Nothing, WiaPropertyId.CameraItemThumbWidth)

            ' Read the camera thumbnail height property.
            Dim nHeight As Integer = myWiaSession.GetPropertyLong(e.Item, Nothing, WiaPropertyId.CameraItemThumbHeight)

            Dim userDataLen As Integer = CType(stream.Length, Integer)
            Dim userData(userDataLen - 1) As Byte
            stream.Read(userData, 0, userDataLen)

            Using thumbImage As New RasterImage( _
               RasterMemoryFlags.User, _
               nWidth, _
               nHeight, _
               24, _
               RasterByteOrder.Bgr, _
               RasterViewPerspective.LeftTop, _
               Nothing, _
               userData, _
               userDataLen)
               Using codecs As New RasterCodecs()
                  codecs.Save(thumbImage, LeadtoolsExamples.Common.ImagesPath.Path + "WiaThumb.jpg", RasterImageFormat.Jpeg, 24)
               End Using
            End Using

            myWiaSession.FreeItem(e.Item)
         End If
      End Sub
</code>
        <code lang="CS">      WiaSession myWiaSession;
      public void GetPropertyBufferExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         myWiaSession = new WiaSession();
         myWiaSession.Startup(WiaVersion.Version1);

         DialogResult res = myWiaSession.SelectDeviceDlg(parent, WiaDeviceType.StreamingVideo, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            myWiaSession.Shutdown();
            return;
         }

         object rootItem = myWiaSession.GetRootItem(null);
         if (rootItem != null)
         {
            myWiaSession.EnumItemsEvent += new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent2);

            myWiaSession.EnumChildItems(rootItem);

            myWiaSession.EnumItemsEvent -= new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent2);
         }

         myWiaSession.Shutdown();
      }

      void wiaSession_EnumItemsEvent2(object sender, WiaEnumItemsEventArgs e)
      {
         if(e.Item != null)
         {
            // Read the camera item thumbnail property.
            Stream stream = myWiaSession.GetPropertyBuffer(e.Item, null, WiaPropertyId.CameraItemThumbnail);

            // Read the camera thumbnail width property.
            int nWidth = myWiaSession.GetPropertyLong(e.Item, null, WiaPropertyId.CameraItemThumbWidth);

            // Read the camera thumbnail height property.
            int nHeight = myWiaSession.GetPropertyLong(e.Item, null, WiaPropertyId.CameraItemThumbHeight);

            int userDataLen = (int)stream.Length;
            byte[] userData = new byte[userDataLen];
            stream.Read(userData, 0, userDataLen);

            using(RasterImage thumbImage = new RasterImage(
               RasterMemoryFlags.User,
               nWidth,
               nHeight,
               24,
               RasterByteOrder.Bgr,
               RasterViewPerspective.LeftTop,
               null,
               userData,
               userDataLen))
            {
               using(RasterCodecs codecs = new RasterCodecs())
               {
                  codecs.Save(thumbImage, LeadtoolsExamples.Common.ImagesPath.Path + "WiaThumb.jpg", RasterImageFormat.Jpeg, 24);
               }
            }

            myWiaSession.FreeItem(e.Item);
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.GetPropertyBuffer-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      <summary>
            Fill the <see cref="T:System.IO.Stream">Stream</see> buffer for any WIA property of type 
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI1</see>
            or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>
            .
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <param name="value">
        <para>The WIA buffer value to set.</para>
      </param>
      <remarks>
        <para>Any WIA property of type 
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI1</see>
            or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>
            that is not Read only can be set by calling this method.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para>Since there is no Read/Write buffer property of type
            
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI1</see>
            or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>
            until now, then we can't provide a sample for the SetPropertyBuffer method.</para>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      <summary>
            Retrieves the <see cref="T:System.Guid">Guid</see> structure 
            for any WIA property of type 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Clsid</see>
            .
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <returns>The WIA GUID value.</returns>
      <remarks>
        <para>Any WIA property of type <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Clsid</see> (for example, 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemFormat</see>
            )
            returns a <see cref="T:System.Guid">Guid</see> structure. In order to retrieve this type of properties you need to call the function <b>GetPropertyGuid</b>.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Dim mySession As WiaSession
      Public Sub GetPropertyGuidExample(ByVal parent As IWin32Window)
         If (Not wiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         mySession = New WiaSession()
         mySession.Startup(WiaVersion.Version1)

         Dim res As DialogResult = mySession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            mySession.Shutdown()
            Return
         End If

         Dim rootItem As Object = mySession.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            AddHandler mySession.EnumItemsEvent, AddressOf session_EnumItemsEvent3

            mySession.EnumChildItems(rootItem)

            RemoveHandler mySession.EnumItemsEvent, AddressOf session_EnumItemsEvent3
         End If

         mySession.Shutdown()
      End Sub

      Private Sub session_EnumItemsEvent3(ByVal sender As Object, ByVal e As WiaEnumItemsEventArgs)
         Dim found As Boolean = False

         If Not e.Item Is Nothing Then
            ' Read the item category property (this property is only available for WIA 2.0).
            Dim sessionCategoryGuid As Guid = mySession.GetPropertyGuid(e.Item, Nothing, WiaPropertyId.ItemCategory)

            ' Find the related item category for the received GUID.
            Dim categoryGuid As Guid = wiaSession.GetCategoryGuid(WiaCategories.Feeder)
            If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
               Console.WriteLine("Item category: Feeder")
               found = True
            End If

            If found = False Then
               categoryGuid = wiaSession.GetCategoryGuid(WiaCategories.FeederBack)
               If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
                  Console.WriteLine("Item category: FeederBack")
                  found = True
               End If
            End If

            If found = False Then
               categoryGuid = wiaSession.GetCategoryGuid(WiaCategories.FeederFront)
               If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
                  Console.WriteLine("Item category: FeederFront")
                  found = True
               End If
            End If

            If found = False Then
               categoryGuid = wiaSession.GetCategoryGuid(WiaCategories.Film)
               If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
                  Console.WriteLine("Item category: Film")
                  found = True
               End If
            End If

            If found = False Then
               categoryGuid = wiaSession.GetCategoryGuid(WiaCategories.FinishedFile)
               If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
                  Console.WriteLine("Item category: FinishedFile")
                  found = True
               End If
            End If

            If found = False Then
               categoryGuid = wiaSession.GetCategoryGuid(WiaCategories.Flatbed)
               If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
                  Console.WriteLine("Item category: Flatbed")
                  found = True
               End If
            End If

            If found = False Then
               categoryGuid = wiaSession.GetCategoryGuid(WiaCategories.Folder)
               If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
                  Console.WriteLine("Item category: Folder")
                  found = True
               End If
            End If

            If found = False Then
               categoryGuid = wiaSession.GetCategoryGuid(WiaCategories.Root)
               If categoryGuid = sessionCategoryGuid Then ' the item is a Feeder.
                  Console.WriteLine("Item category: Root")
                  found = True
               End If
            End If

            session.FreeItem(e.Item)
         End If
      End Sub
</code>
        <code lang="CS">      WiaSession mySession;
      public void GetPropertyGuidExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         mySession = new WiaSession();
         mySession.Startup(WiaVersion.Version1);

         DialogResult res = mySession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            mySession.Shutdown();
            return;
         }

         object rootItem = mySession.GetRootItem(null);
         if (rootItem != null)
         {
            mySession.EnumItemsEvent += new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent3);

            mySession.EnumChildItems(rootItem);

            mySession.EnumItemsEvent -= new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent3);
         }

         mySession.Shutdown();
      }

      void wiaSession_EnumItemsEvent3(object sender, WiaEnumItemsEventArgs e)
      {
         bool found = false;

         if (e.Item != null)
         {
            // Read the item category property (this property is only available for WIA 2.0).
            Guid sessionCategoryGuid = mySession.GetPropertyGuid(e.Item, null, WiaPropertyId.ItemCategory);

            // Find the related item category for the received Guid.
            Guid categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.Feeder);
            if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
            {
               Console.WriteLine("Item category: Feeder");
               found = true;
            }

            if (found == false)
            {
               categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.FeederBack);
               if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
               {
                  Console.WriteLine("Item category: FeederBack");
                  found = true;
               }
            }

            if (found == false)
            {
               categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.FeederFront);
               if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
               {
                  Console.WriteLine("Item category: FeederFront");
                  found = true;
               }
            }

            if (found == false)
            {
               categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.Film);
               if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
               {
                  Console.WriteLine("Item category: Film");
                  found = true;
               }
            }

            if (found == false)
            {
               categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.FinishedFile);
               if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
               {
                  Console.WriteLine("Item category: FinishedFile");
                  found = true;
               }
            }

            if (found == false)
            {
               categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.Flatbed);
               if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
               {
                  Console.WriteLine("Item category: Flatbed");
                  found = true;
               }
            }

            if (found == false)
            {
               categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.Folder);
               if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
               {
                  Console.WriteLine("Item category: Folder");
                  found = true;
               }
            }

            if (found == false)
            {
               categoryGuid = WiaSession.GetCategoryGuid(WiaCategories.Root);
               if(categoryGuid == sessionCategoryGuid)   // the item is a Feeder.
               {
                  Console.WriteLine("Item category: Root");
                  found = true;
               }
            }

            mySession.FreeItem(e.Item);
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.GetPropertyGuid-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      <summary>
            Sets properties values of type <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Clsid</see>.
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <param name="value">
        <para>The GUID value to set.</para>
      </param>
      <remarks>
        <para>Call this function to set the <see cref="T:System.Guid">Guid</see> value for any property of type 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Clsid</see>
            like 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemFormat</see></para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">WiaSession.GetPropertyGuid</see></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      <summary>
            Retrieves the Long value for a WIA property of any of the following types: 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.I1</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI1</see>,  
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.I2</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI2</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.I4</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI4</see>,
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Int</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UInt</see>,
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.R4</see>, or
            
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.R8</see>.
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed a valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought. For a list of available property IDs, refer to 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <returns>The WIA long value.</returns>
      <remarks>
        <para>Call this function to retrieve the Long value for any WIA property of the types mentioned (for instance, 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ScannerDeviceDocumentHandlingSelect</see>
            
            , 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.DeviceInfoDevType</see><see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemBufferSize</see>
            , ...etc).</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Dim myWia_Session As WiaSession
      Public Sub GetPropertyLongExample(ByVal parent As IWin32Window)
         If (Not wiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         myWia_Session = New WiaSession()
         myWia_Session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = myWia_Session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            myWia_Session.Shutdown()
            Return
         End If

         Dim rootItem As Object = myWia_Session.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            AddHandler myWia_Session.EnumItemsEvent, AddressOf session_EnumItemsEvent4

            myWia_Session.EnumChildItems(rootItem)

            RemoveHandler myWia_Session.EnumItemsEvent, AddressOf session_EnumItemsEvent4
         End If

         myWia_Session.Shutdown()
      End Sub

      Private Sub session_EnumItemsEvent4(ByVal sender As Object, ByVal e As WiaEnumItemsEventArgs)
         If Not e.Item Is Nothing Then
            ' Read the document handling select property.
            Dim longValue As Integer = myWia_Session.GetPropertyLong(e.Item, Nothing, WiaPropertyId.ScannerDeviceDocumentHandlingSelect)

            ' If Feeder is not selected then select the Feeder.
            If (longValue And CInt(WiaScanningModeFlags.Feeder)) &lt;&gt; CInt(WiaScanningModeFlags.Feeder) Then
               longValue = CInt(WiaScanningModeFlags.Feeder)
               myWia_Session.SetPropertyLong(e.Item, Nothing, WiaPropertyId.ScannerDeviceDocumentHandlingSelect, longValue)
            End If

            myWia_Session.FreeItem(e.Item)
         End If
      End Sub
</code>
        <code lang="CS">      WiaSession myWia_Session;
      public void GetPropertyLongExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         myWia_Session = new WiaSession();
         myWia_Session.Startup(WiaVersion.Version1);

         DialogResult res = myWia_Session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            myWia_Session.Shutdown();
            return;
         }

         object rootItem = myWia_Session.GetRootItem(null);
         if (rootItem != null)
         {
            myWia_Session.EnumItemsEvent += new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent4);

            myWia_Session.EnumChildItems(rootItem);

            myWia_Session.EnumItemsEvent -= new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent4);
         }

         myWia_Session.Shutdown();
      }

      void wiaSession_EnumItemsEvent4(object sender, WiaEnumItemsEventArgs e)
      {
         if (e.Item != null)
         {
            // Read the document handling select property.
            int longValue = myWia_Session.GetPropertyLong(e.Item, null, WiaPropertyId.ScannerDeviceDocumentHandlingSelect);

            // If the Feeder is not selected then select the Feeder.
            if((longValue &amp; (int)WiaScanningModeFlags.Feeder) != (int)WiaScanningModeFlags.Feeder)
            {
               longValue = (int)WiaScanningModeFlags.Feeder;
               myWia_Session.SetPropertyLong(e.Item, null, WiaPropertyId.ScannerDeviceDocumentHandlingSelect, longValue);
            }

            myWia_Session.FreeItem(e.Item);
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.GetPropertyLong-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      <summary>
            Sets the Long value for any WIA property of type: 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.I1</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI1</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.I2</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI2</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.I4</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI4</see>,
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Int</see>, 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UInt</see>,
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.R4</see>
            and
            
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.R8</see>.
            
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <param name="value">The WIA long value to set.</param>
      <remarks>
        <para>Call this function to set the Long value for any WIA property of the types mentioned (for instance, 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ScannerDeviceDocumentHandlingSelect</see>
            
            , 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.DeviceInfoDevType</see><see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemBufferSize</see>
            , ...etc).</para>
        <para>
          <list type="table">
            <item>
              <term>
                <para>
                  <strong>Note:</strong>
                </para>
              </term>
              <description>
                    Through our testing we have found 
                    that on some drivers while using WIA 2.0, if you want to change the Image Data Type property
                    (
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemDatatype</see>
            ) to your custom setting you have to 
                    set the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ScannerItemCurIntent</see>
            property value to <b>None</b>.
                 </description>
            </item>
          </list>
        </para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">WiaSession.GetPropertyGuid</see></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      <summary>
            Retrieves a string buffer for any WIA property of type 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Bstr</see>.
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through 
            the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the 
            <b>propertyId</b> parameter.</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter 
            <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <returns>The WIA string value.</returns>
      <remarks>
        <para>Call this function to retrieve the string buffer value for any WIA property of type 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Bstr</see>
            (for instance, 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.DeviceInfoDevName</see>
            , 
            
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemFullItemName</see>
            , ...etc).</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub GetPropertyStringExample(ByVal parent As IWin32Window)
         If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         Dim session As WiaSession = New WiaSession()
         session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = session.SelectDeviceDlg(parent, WiaDeviceType.DigitalCamera, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            session.Shutdown()
            Return
         End If

         Dim rootItem As Object = session.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            ' if you have a digital camera device that supports the EXIF format, you 
            ' can populate the artist field in every EXIF image that it captures.
            Dim stringValue As String = session.GetPropertyString(rootItem, Nothing, WiaPropertyId.CameraDeviceArtist)
            Console.WriteLine("Old Device Artist: {0}", stringValue)

            ' You can also change the artist field if you want.
            stringValue = "I am the new artist."
            session.SetPropertyString(rootItem, Nothing, WiaPropertyId.CameraDeviceArtist, stringValue)
            stringValue = wiaSession.GetPropertyString(rootItem, Nothing, WiaPropertyId.CameraDeviceArtist)
            Console.WriteLine("New Device Artist: {0}", stringValue)
         End If

         session.Shutdown()
      End Sub
</code>
        <code lang="CS">      public void GetPropertyStringExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         WiaSession wiaSession = new WiaSession();
         wiaSession.Startup(WiaVersion.Version1);

         DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.DigitalCamera, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wiaSession.Shutdown();
            return;
         }

         object rootItem = wiaSession.GetRootItem(null);
         if (rootItem != null)
         {
            // If you have a digital camera device that supports the EXIF format, you 
            // can populate the artist field in every EXIF image that it captures.
            string stringValue = wiaSession.GetPropertyString(rootItem, null, WiaPropertyId.CameraDeviceArtist);
            Console.WriteLine("Old Device Artist: {0}", stringValue);

            // You can also change the artist if you want.
            stringValue = "I am the new artist.";
            wiaSession.SetPropertyString(rootItem, null, WiaPropertyId.CameraDeviceArtist, stringValue);
            stringValue = wiaSession.GetPropertyString(rootItem, null, WiaPropertyId.CameraDeviceArtist);
            Console.WriteLine("New Device Artist: {0}", stringValue);
         }

         wiaSession.Shutdown();
      }
</code>
        <!--Leadtools.Wia.WiaSession.GetPropertyString-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      <summary>
            Sets a string value for any WIA property of type <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Bstr</see> that is not Read only.
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <param name="value">The WIA string value to set.</param>
      <remarks>
        <para>Sets a string value for any WIA property of type <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Bstr</see> that is not Read only.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">WiaSession.GetPropertyString</see></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      <summary>
            Retrieves a <see cref="T:System.DateTime" /> structure for any WIA property of type 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI2</see>
            or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>.
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <returns>The WIA system date.</returns>
      <remarks>
        <para>Call this function to retrieve a <see cref="T:System.DateTime" /> structure for any WIA property of type 
                  /// 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI2</see>
            or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>
            
            
            
            (for instance, 
            and 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.DeviceTime</see><see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemTime</see>) to return the date and time of the item.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Dim wia_Session As WiaSession
      Public Sub GetPropertySystemTimeExample(ByVal parent As IWin32Window)
         If (Not wiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         wia_Session = New WiaSession()
         wia_Session.Startup(WiaVersion.Version1)

         Dim res As DialogResult = wia_Session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            wia_Session.Shutdown()
            Return
         End If

         Dim rootItem As Object = wia_Session.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            AddHandler wia_Session.EnumItemsEvent, AddressOf session_EnumItemsEvent5

            wia_Session.EnumChildItems(rootItem)

            RemoveHandler wia_Session.EnumItemsEvent, AddressOf session_EnumItemsEvent5
         End If

         wia_Session.Shutdown()
      End Sub

      Private Sub session_EnumItemsEvent5(ByVal sender As Object, ByVal e As WiaEnumItemsEventArgs)
         If Not e.Item Is Nothing Then
            ' Get the item's system time.
            Dim dateTimeValue As DateTime = wia_Session.GetPropertySystemTime(e.Item, Nothing, WiaPropertyId.ItemTime)

            ' You can change the item's system time to your machine system time.
            dateTimeValue = System.DateTime.Now
            wia_Session.SetPropertySystemTime(e.Item, Nothing, WiaPropertyId.ItemTime, dateTimeValue)

            wia_Session.FreeItem(e.Item)
         End If
      End Sub
</code>
        <code lang="CS">      WiaSession wia_Session;
      public void GetPropertySystemTimeExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         wia_Session = new WiaSession();
         wia_Session.Startup(WiaVersion.Version1);

         DialogResult res = wia_Session.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wia_Session.Shutdown();
            return;
         }

         object rootItem = wia_Session.GetRootItem(null);
         if (rootItem != null)
         {
            wia_Session.EnumItemsEvent += new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent5);

            wia_Session.EnumChildItems(rootItem);

            wia_Session.EnumItemsEvent -= new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent5);
         }

         wia_Session.Shutdown();
      }

      void wiaSession_EnumItemsEvent5(object sender, WiaEnumItemsEventArgs e)
      {
         if (e.Item != null)
         {
            // Get the item's system time.
            DateTime dateTimeValue = wia_Session.GetPropertySystemTime(e.Item, null, WiaPropertyId.ItemTime);

            // You can change the item's system time to your machine system time.
            dateTimeValue = System.DateTime.Now;
            wia_Session.SetPropertySystemTime(e.Item, null, WiaPropertyId.ItemTime, dateTimeValue);

            wia_Session.FreeItem(e.Item);
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.GetPropertySystemTime-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      <summary>
            Sets the date and time of the specified item as a form of <see cref="T:System.DateTime" /> structure for WIA property type 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI2</see> or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>.
            
            </summary>
      <param name="item">Handle to the item which represents the item having the property. You can retrieve this parameter by either calling the 
            <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> method to get the device’s root item itself or by enumerating the 
            child items of the device through a call to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <param name="propertyIdName">
        <para>This string should contain the equivalent property Id string for the WIA property ID. Use the 
            see <see cref="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)" /> method to get this string for the property ID.</para>
        <para>If you passed null for this parameter then the WIA toolkit will use the property ID passed through the third parameter <b>propertyId</b>;
            otherwise this parameters will be used whether or not you passed valid property ID through the <b>propertyId</b> parameter</para>
      </param>
      <param name="propertyId">
        <para>The property ID for the value being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
        <para>This parameter is required only if the second parameter <b>"propertyIdName"</b>is null; otherwise you can pass 0 for this parameter.</para>
      </param>
      <param name="value">
        <para>The WIA date value to set.</para>
      </param>
      <remarks>
        <para>Call this function to set the passed items date and time through the <see cref="T:System.DateTime" /> structure for any WIA property of type 
                  /// <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.UI2</see>
            or 
            <see cref="T:Leadtools.Wia.WiaVariableTypes">WiaVariableTypes.Vector</see>
            
            
            (for instance, 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.DeviceTime</see><see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemTime</see>
            ).</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">WiaSession.GetPropertySystemTime</see></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetPropertyIdString(Leadtools.Wia.WiaPropertyId)">
      <summary>
            Gets the equivalent string for the passed property ID.
            </summary>
      <param name="propertyId">
        <para>The property ID for property ID string being sought, for list of available property IDs see 
            <see cref="T:Leadtools.Wia.WiaPropertyId" />.</para>
      </param>
      <remarks>
        <para>Call this function get the equivalent string for the passed property ID thourgh the <b>propertyId</b> parameter.</para>
        <para>Use this function to get the property string to pass for any of the GetPropertyXXX or SetPropertyXXX methods.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">WiaSession.GetPropertyLong</see></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      <summary>
            Gets the equivalent string for the passed property ID.
            </summary>
      <param name="item">Handle to the item which represents the item for which you wish to retrieve 
            its root item. You can retrieve this parameter by either calling the <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /> 
            method to get the device’s root item itself or by enumerating the child items of the device through a call 
            to <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.</param>
      <returns>The WIA root item handle.</returns>
      <remarks>
        <para>Gets the root item for the item passed through the <b>item</b> parameter. If <b>item</b> parameters is null
            then the retrieved item will be the devices root item (which represents the device itself). This is the first function 
            you need to call to get a handle to the devices root item. Then pass that handle to the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> 
            method to enumerate all of the devices child items. Then call this function again for any child item of the enumerated items to 
            retrieve its root item if needed.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Dim wiaSession As WiaSession
      Public Sub GetRootItemExample(ByVal parent As IWin32Window)
         If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
            MessageBox.Show("WIA version 1.0 not installed.")
            Return
         End If

         wiaSession = New WiaSession()
         wiaSession.Startup(WiaVersion.Version1)

         Dim res As DialogResult = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
         If res &lt;&gt; DialogResult.OK Then
            MessageBox.Show("Error selecting WIA device.")
            wiaSession.Shutdown()
            Return
         End If

         Dim rootItem As Object = wiaSession.GetRootItem(Nothing)
         If Not rootItem Is Nothing Then
            AddHandler wiaSession.EnumItemsEvent, AddressOf session_EnumItemsEvent

            wiaSession.EnumChildItems(rootItem)

            RemoveHandler wiaSession.EnumItemsEvent, AddressOf session_EnumItemsEvent
         End If

         wiaSession.Shutdown()
      End Sub

      Private Sub session_EnumItemsEvent(ByVal sender As Object, ByVal e As WiaEnumItemsEventArgs)
         If Not e.Item Is Nothing Then
            Dim dataTransfer As WiaDataTransferProperties = WiaDataTransferProperties.Empty
            Dim imageEffects As WiaImageEffectsProperties = WiaImageEffectsProperties.Empty

            Dim properties As WiaProperties = wiaSession.GetProperties(e.Item)

            properties.MaximumNumberOfPages = 0 ' scan all pages in feeder
            dataTransfer.ImageDataType = WiaImageDataType.Grayscale
            imageEffects.Brightness = 250

            properties.DataTransfer = dataTransfer
            properties.ImageEffects = imageEffects

            AddHandler wiaSession.SetPropertiesEvent, AddressOf session_SetPropertiesEvent

            wiaSession.SetProperties(e.Item, properties)

            RemoveHandler wiaSession.SetPropertiesEvent, AddressOf session_SetPropertiesEvent

            wiaSession.FreeItem(e.Item)
         End If
      End Sub

      Private Sub session_SetPropertiesEvent(ByVal sender As Object, ByVal e As WiaSetPropertiesEventArgs)
         If e.Error &lt;= 0 Then
            Console.WriteLine("Failed to set the below property:" &amp; Constants.vbLf + Constants.vbTab &amp; "Property Id: {0}" &amp; Constants.vbLf + Constants.vbTab &amp; "Property Value: {1}" &amp; Constants.vbLf + Constants.vbTab &amp; "Error: {2}" &amp; Constants.vbLf + Constants.vbLf, e.PropertyId.ToString(), Convert.ToInt32(e.Value).ToString(), e.Error.ToString())
         End If
      End Sub
</code>
        <code lang="CS">      WiaSession wiaSession;
      public void GetRootItemExample(IWin32Window parent)
      {
         if (!WiaSession.IsAvailable(WiaVersion.Version1))
         {
            MessageBox.Show("WIA version 1.0 not installed.");
            return;
         }

         wiaSession = new WiaSession();
         wiaSession.Startup(WiaVersion.Version1);

         DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
         if (res != DialogResult.OK)
         {
            MessageBox.Show("Error selecting WIA device.");
            wiaSession.Shutdown();
            return;
         }

         object rootItem = wiaSession.GetRootItem(null);
         if (rootItem != null)
         {
            wiaSession.EnumItemsEvent += new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent);

            wiaSession.EnumChildItems(rootItem);

            wiaSession.EnumItemsEvent -= new EventHandler&lt;WiaEnumItemsEventArgs&gt;(wiaSession_EnumItemsEvent);
         }

         wiaSession.Shutdown();
      }

      void wiaSession_EnumItemsEvent(object sender, WiaEnumItemsEventArgs e)
      {
         if(e.Item != null)
         {
            WiaDataTransferProperties dataTransfer = WiaDataTransferProperties.Empty;
            WiaImageEffectsProperties imageEffects = WiaImageEffectsProperties.Empty;

            WiaProperties properties = wiaSession.GetProperties(e.Item);

            properties.MaximumNumberOfPages = 0;   // scan all pages in feeder
            dataTransfer.ImageDataType = WiaImageDataType.Grayscale;
            imageEffects.Brightness = 250;

            properties.DataTransfer = dataTransfer;
            properties.ImageEffects = imageEffects;

            wiaSession.SetPropertiesEvent += new EventHandler&lt;WiaSetPropertiesEventArgs&gt;(wiaSession_SetPropertiesEvent);

            wiaSession.SetProperties(e.Item, properties);

            wiaSession.SetPropertiesEvent -= new EventHandler&lt;WiaSetPropertiesEventArgs&gt;(wiaSession_SetPropertiesEvent);

            wiaSession.FreeItem(e.Item);
         }
      }

      void wiaSession_SetPropertiesEvent(object sender, WiaSetPropertiesEventArgs e)
      {
         if(e.Error &lt;= 0)
         {
            Console.WriteLine("Failed to set the below property:\n\tProperty Id: {0}\n\tProperty Value: {1}\n\tError: {2}\n\n", e.PropertyId.ToString(), Convert.ToInt32(e.Value).ToString(), e.Error.ToString());
         }
      }
</code>
        <!--Leadtools.Wia.WiaSession.GetRootItem-->
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyLong(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Int32)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyBuffer(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.IO.Stream)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyString(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertyGuid(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.Guid)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetPropertySystemTime(System.Object,System.String,Leadtools.Wia.WiaPropertyId,System.DateTime)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      <summary>
            Selects the WIA device represented by the passed device ID.
            </summary>
      <param name="deviceId">String that contains the device ID. 
            You can obtain this string by enumerating the available WIA devices on your machine.</param>
      <remarks>
        <para>Use this function when working with multiple WIA devices installed on a machine in order to select 
            the WIA device without displaying the Select Device dialog. To do this, enumerate the WIA devices by 
            calling the <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" /> method. Then use it to keep a list of all received 
            device IDs. Then call <b>SelectDevice</b> method using the device ID for the device to be selected.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices">WiaSession.EnumDevices</see></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumDevices">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetSelectedDevice">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.SelectedDeviceType">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      <summary>
            Displays a dialog box that enables the user to select a WIA hardware device for image acquisition.
            </summary>
      <param name="owner">Window handle of your application window.</param>
      <param name="deviceType">Specifies which type of WIA device to use. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.Default</see></term><description>
                    Generic WIA device. During device enumerations, this constant is used to enumerate all WIA devices. This is the default value.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.Scanner</see></term><description>
                    The device is a scanner.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.DigitalCamera</see></term><description>
                    The device is a camera. Note that this type of device is not supported by Windows Vista and later.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaDeviceType">WiaDeviceType.StreamingVideo</see></term><description>
                    The device contains streaming video. Note that this type of device is not supported by Windows Server 2003, Windows Vista, or later.
                 </description></item></list></param>
      <param name="flags">Flag that determines certain actions of the WIA image acquisition selection dialog box. Possible values are:
            <list type="table"><item><term><para><strong>Value</strong></para></term><description><para><strong>Meaning</strong></para></description></item><item><term><see cref="T:Leadtools.Wia.WiaSelectSourceFlags">WiaSelectSourceFlags.None</see></term><description>
                    Default behavior for the device image acquisition dialog box.
                 </description></item><item><term><see cref="T:Leadtools.Wia.WiaSelectSourceFlags">WiaSelectSourceFlags.NoDefault</see></term><description>
                    Display the dialog box even if there is only one matching device.
                 </description></item></list></param>
      <returns>One of the DialogResult values. If an error occurs, an exception is thrown.</returns>
      <remarks>
        <para>This function creates and displays the Select Device dialog box so the user can select a 
            WIA device for image acquisition.</para>
        <para>Particular types of devices may be displayed to the user by specifying the device types 
            through the <b>deviceType</b> parameter.</para>
        <para>If only one device meets the specification, the <b>SelectDeviceDlg</b> does not display the 
            Select Device dialog box. Override this behavior and force the <b>SelectDeviceDlg</b> to display the
            Select Device dialog box by passing <b>NoDefault</b> as the value for the <b>flags</b> parameter.</para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Note:</strong>
              </para>
            </term>
            <description>
                    WIA 2.0 does not support cameras or streaming video.
                 </description>
          </item>
        </list>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Note:</strong>
              </para>
            </term>
            <description>
                    You do not need to call this method if you are using the high-level <see cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)" /> method,
                    since it handles session initialization, session end, and device selection automatically.
                 </description>
          </item>
        </list>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.ManagingWIASources.html">Managing WIA Sources</a>.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetSelectedDevice">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.SelectedDeviceType">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="M:Leadtools.Wia.WiaSession.GetSelectedDevice">
      <summary>
            Gets a string that contains the ID for currently selected device.
            </summary>
      <returns>String that contains the ID for currently selected device. If an error occurs, an exception is thrown.</returns>
      <remarks>
        <para>Call this function to get a string that represents the ID for the currently selected device.</para>
        <para>WIA does not have a default device selection. In order for this function to succeed be sure to 
            call either <see cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)" /> or <see cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)" /> before calling this method. </para>
        <list type="table">
          <item>
            <term>
              <para>
                <strong>Note:</strong>
              </para>
            </term>
            <description>
                    If you are using the <see cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)" /> method to automatically acquire from your device then 
                    it is not necessary to call either of the two mentioned functions above before calling the <b>GetSelectedDevice</b> 
                    since <see cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)" /> method internally calls the <see cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)" /> 
                    method and this will assure you have a device currently selected.
                 </description>
          </item>
        </list>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices">WiaSession.EnumDevices</see></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumDevices">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="P:Leadtools.Wia.WiaSession.SelectedDeviceType">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaSession.AcquireOptions">
      <summary>
            Gets or sets some memory and file transfer options that affect the acquisition process from the current WIA source.
            </summary>
      <value>
            Memory and file transfer options that affect the acquisition process from the current WIA source.
            </value>
      <remarks>
        <para>
            Use the WiaAcquireOptions property to get or set options related to the memory and file transfer 
            modes like transfer buffer size, enabling/disabling the double buffering feature (for memory mode), destination 
            filename, etc.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">WiaSession.AcquireToFile</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaSession.FilesCount">
      <summary>
            Gets the number of files saved when acquiring using File mode.
            </summary>
      <value>
            The number of files saved when acquiring using File mode.
            </value>
      <remarks>
            Gets the number of the files saved when calling any of the acquire functions while performing a file transfer.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">WiaSession.AcquireToFile</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaSession.FilesPaths">
      <summary>
            Gets a <see cref="T:System.String">String</see> collection that contains the saved file path(s) when performing a file transfer.
            </summary>
      <value>
            (Read only) A <see cref="T:System.String">String</see> collection that contains the saved file path(s) when performing a file transfer.
            </value>
      <remarks>
            Gets a <see cref="T:System.String">String</see> collection that contains the saved file path(s) when performing a file transfer.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">WiaSession.AcquireToFile</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaSession.SelectedDeviceType">
      <summary>
            Gets the currently selected WIA device type.
            </summary>
      <value>
            (Read only) The currently selected WIA device type (Scanner, digital camera or streaming video).
            </value>
      <remarks>
        <para>
            Gets the currently selected WIA device type. Use this property to determine the type of the device 
            selected using any of the <see cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">WiaSession.SelectDeviceDlg</see> 
            or <see cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">WiaSession.SelectDevice</see> methods at runtime.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices">WiaSession.EnumDevices</see>.</example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumDevices">
      </seealso>
    </member>
    <member name="E:Leadtools.Wia.WiaSession.AcquireEvent">
      <summary>
            Occurs for each page acquired from the currently selected WIA source using the <see cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /> 
            or <see cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)" /> methods and it will also get called for each end of page to provide the 
            user with the <see cref="T:Leadtools.Wia.WiaAcquiredPageFlags"> EndOfPage</see> flag through the Flags member of the 
            <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" /> event argument to indicate the end of each page transfer.
            </summary>
      <value>The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaAcquireEventArgs" />.</value>
      <remarks>
        <para>If the user acquired several pages at the same time, a separate event occurs for each page.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.</para>
      </remarks>
      <example>
        <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see>.</example>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="E:Leadtools.Wia.WiaSession.AcquireFileEvent">
      <summary>
            Occurs for each page acquired from the currently selected WIA source using the <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /> 
            method and it will also get called for each end of page to provide the user with the <see cref="T:Leadtools.Wia.WiaAcquiredPageFlags"> EndOfPage</see> 
            flag through the Flags member of the <see cref="T:Leadtools.Wia.WiaAcquireFileEventArgs" /> event argument to indicate the end of each page transfer.
            </summary>
      <value>The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaAcquireFileEventArgs" />.</value>
      <remarks>
        <para>If the user acquired several pages at the same time, a separate event occurs for each page.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.</para>
      </remarks>
      <example>
        <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">WiaSession.AcquireToFile</see>.</example>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="E:Leadtools.Wia.WiaSession.EnumCapabilitiesEvent">
      <summary>
            Occurs for each found capability of the currently selected WIA source after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /> method.
            </summary>
      <value>The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumCapabilitiesEventArgs" />.</value>
      <remarks>
            This event will be called while enumerating the selected WIA source capabilities after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /> method
            to provide the user with information about each found capability and the found capabilities count and also gives the ability to abort the enumeration process.
            </remarks>
      <example>
        <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">WiaSession.EnumCapabilities</see>.</example>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="E:Leadtools.Wia.WiaSession.EnumDevicesEvent">
      <summary>
            Occurs for each found WIA device after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" /> method.
            </summary>
      <value>The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumDevicesEventArgs" />.</value>
      <remarks>
            This event will be called while enumerating the available WIA devices after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" /> method
            to provide the user with information about each found device and also gives the ability to abort the enumeration process.
            </remarks>
      <example>
        <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices">WiaSession.EnumDevices</see>.</example>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumDevices">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDevice(System.String)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)">
      </seealso>
    </member>
    <member name="E:Leadtools.Wia.WiaSession.EnumFormatsEvent">
      <summary>
            Occurs for each found supported transfer format of the currently selected WIA source after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)" /> method.
            </summary>
      <value>The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumFormatsEventArgs" />.</value>
      <remarks>
            This event will be called while enumerating the selected WIA source supported transfer formats after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)" /> method
            to provide the user with information about each found transfer format and also gives the ability to abort the enumeration process.
            </remarks>
      <example>
        <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">WiaSession.EnumFormats</see>.</example>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
    </member>
    <member name="E:Leadtools.Wia.WiaSession.EnumItemsEvent">
      <summary>
            Occurs for each found WIA child item after calling the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method.
            </summary>
      <value>The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaEnumItemsEventArgs" />.</value>
      <remarks>
            This event will be called while enumerating the WIA child items for the parent item passed through the call to the <see cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)" /> method
            to provide the user with a handle for each found child item and also gives the ability to abort the enumeration process.
            </remarks>
      <example>
        <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see>.</example>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.FreeItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
    </member>
    <member name="E:Leadtools.Wia.WiaSession.SetPropertiesEvent">
      <summary>
            Occurs while setting each property inside the WiaProperties structure after calling the <see cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)" /> method.
            </summary>
      <value>The event handler receives an argument of type <see cref="T:Leadtools.Wia.WiaSetPropertiesEventArgs" />.</value>
      <remarks>
            This event will be called while setting each property inside the WiaProperties structure after calling the <see cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)" /> method
            to provide the user with information about the return error, the property Id, the property value and property variable type and also gives the ability 
            to abort the properties setting process.
            </remarks>
      <example>
        <example>Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see>.</example>
      </example>
      <seealso cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Shutdown">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.GetProperties(System.Object)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.SetProperties(System.Object,Leadtools.Wia.WiaProperties)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
    </member>
    <member name="T:Leadtools.Wia.WiaException">
      <summary>
            The exception that is thrown when a WIA error occurs.
            </summary>
      <remarks>
        <p>The <b>WiaException</b> class defines a <see cref="P:Leadtools.Wia.WiaException.Code" /> property that you can examine to determine what caused the error.</p>
        <p>Default messages are implemented for each <see cref="P:Leadtools.Wia.WiaException.Code" />. You can, however, modify any message by using the <see cref="M:Leadtools.Wia.WiaException.GetCodeMessage(Leadtools.Wia.WiaExceptionCode)" />
            and <see cref="M:Leadtools.Wia.WiaException.SetCodeMessage(Leadtools.Wia.WiaExceptionCode,System.String)" /> methods.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      &lt;Test&gt; _
      Public Sub WiaExceptionExample(ByVal parent As IWin32Window)
         Dim wiaSession As WiaSession = Nothing
         Try
            If (Not WiaSession.IsAvailable(WiaVersion.Version1)) Then
               MessageBox.Show("WIA version 1.0 not installed.")
               Return
            End If

            ' initialize a new WIA wiaSession
            wiaSession = New WiaSession()
            wiaSession.Startup(WiaVersion.Version1)

            Dim res As DialogResult = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault)
            If res &lt;&gt; DialogResult.OK Then
               MessageBox.Show("Error selecting WIA device.")
               wiaSession.Shutdown()
               Return
            End If

            ' acquire a page, if paper jam, allow the user to retry
            Dim done As Boolean = False
            Do While Not done
               Try
                  AddHandler wiaSession.AcquireEvent, AddressOf wiaSession_AcquireEvent2

                  res = wiaSession.Acquire(parent, Nothing, WiaAcquireFlags.ShowUserInterface Or WiaAcquireFlags.UseCommonUI)
                  MessageBox.Show("Success")
                  done = True

                  RemoveHandler wiaSession.AcquireEvent, AddressOf wiaSession_AcquireEvent2
               Catch ex As WiaException
                  If ex.Code = WiaExceptionCode.PaperJam Then
                     If MessageBox.Show("Paper jam.  Fix and retry?", "WIA", MessageBoxButtons.YesNo) = DialogResult.No Then
                        done = True
                     End If
                  Else
                     ' other error, propagate
                     Throw ex
                  End If
               End Try
            Loop
         Catch ex As WiaException
            MessageBox.Show(String.Format("WIA error:{0}Code: {1}{0}Message: {2}", Environment.NewLine, ex.Code, ex.Message))
         Catch ex As Exception
            MessageBox.Show(String.Format("Other error: Message:{0}", ex.Message))
         Finally
            If Not wiaSession Is Nothing Then
               wiaSession.Shutdown()
            End If
         End Try
      End Sub

      Private Sub wiaSession_AcquireEvent2(ByVal sender As Object, ByVal e As WiaAcquireEventArgs)
         Application.DoEvents()

         If Not e.Image Is Nothing Then
            e.Image.Dispose()
         End If

         e.Cancel = False
      End Sub
</code>
        <code lang="CS">      public void WiaExceptionExample(IWin32Window parent)
      {
         WiaSession wiaSession = null;

         try
         {
            if (!WiaSession.IsAvailable(WiaVersion.Version1))
            {
               MessageBox.Show("WIA version 1.0 not installed.");
               return;
            }

            // initialize a new WIA wiaSession
            wiaSession = new WiaSession();
            wiaSession.Startup(WiaVersion.Version1);

            DialogResult res = wiaSession.SelectDeviceDlg(parent, WiaDeviceType.Default, WiaSelectSourceFlags.NoDefault);
            if (res != DialogResult.OK)
            {
               MessageBox.Show("Error selecting WIA device.");
               wiaSession.Shutdown();
               return;
            }

            // acquire a page, if paper jam, allow the user to retry
            bool done = false;
            while(!done)
            {
               try
               {
                  wiaSession.AcquireEvent += new EventHandler&lt;WiaAcquireEventArgs&gt;(wiaSession_AcquireEvent2);

                  res = wiaSession.Acquire(parent, null, WiaAcquireFlags.ShowUserInterface | WiaAcquireFlags.UseCommonUI);
                  MessageBox.Show("Success");
                  done = true;

                  wiaSession.AcquireEvent -= new EventHandler&lt;WiaAcquireEventArgs&gt;(wiaSession_AcquireEvent2);
               }
               catch(WiaException ex)
               {
                  if(ex.Code == WiaExceptionCode.PaperJam)
                  {
                     if(MessageBox.Show("Paper jam.  Fix and retry?", "WIA", MessageBoxButtons.YesNo) == DialogResult.No)
                        done = true;
                  }
                  else
                  {
                     // other error, propagate
                     throw ex;
                  }
               }
            }
         }
         catch(WiaException ex)
         {
            MessageBox.Show(string.Format("WIA error:{0}Code: {1}{0}Message: {2}", Environment.NewLine, ex.Code, ex.Message));
         }
         catch(Exception ex)
         {
            MessageBox.Show(string.Format("Other error: Message:{0}", ex.Message));
         }
         finally
         {
            if(wiaSession != null)
               wiaSession.Shutdown();
         }
      }

      void wiaSession_AcquireEvent2(object sender, WiaAcquireEventArgs e)
      {
         Application.DoEvents();

         if (e.Image != null)
            e.Image.Dispose();

         e.Cancel = false;
      }
</code>
        <!--Leadtools.Wia.WiaException-->
      </example>
    </member>
    <member name="M:Leadtools.Wia.WiaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Wia.WiaException" /> class with its <see cref="P:Leadtools.Wia.WiaException.Message" /> string set to an empty string (""), 
            its
            <see cref="P:Leadtools.Wia.WiaException.Code" /> set to <see cref="T:Leadtools.Wia.WiaExceptionCode">WiaExceptionCode.NotInitialized</see>, and its inner exception  
            set to a null reference
            (Nothing in Visual Basic).
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Wia.WiaException" /></example>
    </member>
    <member name="M:Leadtools.Wia.WiaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Wia.WiaException" /> class with 
            its <see cref="P:Leadtools.Wia.WiaException.Message" /> string set to <i>message</i>, its
            <see cref="P:Leadtools.Wia.WiaException.Code" /> set to 
            <see cref="T:Leadtools.Wia.WiaExceptionCode">WiaExceptionCode.NotInitialized</see> 
            and its inner exception set to a null reference
            (Nothing in Visual Basic).
            </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. 
            The content of the message is intended to be understood by humans.
            The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</param>
      <remarks>
            The constructor initializes the <see cref="P:Leadtools.Wia.WiaException.Message" /> property of 
            the new instance using <i>message</i>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Wia.WiaException" /> class 
            with a specified error message, its <see cref="P:Leadtools.Wia.WiaException.Code" /> set to 
            <see cref="T:Leadtools.Wia.WiaExceptionCode">WiaExceptionCode.NotInitialized</see> 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason 
            for the exception.</param>
      <param name="inner">The exception that is the cause of the 
            current exception. If the innerException parameter is not a null reference
            (Nothing in Visual Basic), the current exception is raised in a 
            catch block that handles the inner exception.</param>
      <remarks>
            An exception that is thrown as a direct result of a previous exception 
            should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException" /> property. The 
            InnerException property returns the same value that is 
            passed into the constructor,
            or a null reference (Nothing in Visual Basic) if 
            the InnerException property does not supply the inner exception value to the
            constructor.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaException.#ctor(System.String,Leadtools.Wia.WiaExceptionCode)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Wia.WiaException" /> class 
            with its <see cref="P:Leadtools.Wia.WiaException.Message" /> string set to <i>message</i>, its
            <see cref="P:Leadtools.Wia.WiaException.Code" /> set to <i>code</i> and its inner exception set 
            to a null reference (Nothing in Visual Basic).
            </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. 
            The content of the message is intended to be understood by humans.
            The caller of this constructor is required to ensure that this string 
            has been localized for the current system culture.</param>
      <param name="code">An <see cref="T:Leadtools.Wia.WiaExceptionCode" /> value that specifies 
            what caused this exception.</param>
      <remarks>
            The constructor initializes the <see cref="P:Leadtools.Wia.WiaException.Message" /> property of 
            the new instance using <i>message</i> and the <see cref="P:Leadtools.Wia.WiaException.Code" />
            property of the new instance using <i>code</i>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Wia.WiaException" /> class 
            with the specified serialization and context information.
            </summary>
      <param name="info">The data for serializing or deserializing the object.</param>
      <param name="context">The source and destination for the object.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaException.#ctor(Leadtools.Wia.WiaExceptionCode)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Wia.WiaException" /> class 
            with its <see cref="P:Leadtools.Wia.WiaException.Message" /> string set to the default message
            that corresponds to <i>code</i> and its inner exception set to a 
            null reference (Nothing in Visual Basic).
            </summary>
      <param name="code">An <see cref="T:Leadtools.Wia.WiaExceptionCode" /> that specifies 
            what caused this exception.</param>
      <remarks>
            The <see cref="T:Leadtools.Wia.WiaException" /> class contains an internal list of messages that correspond to each <see cref="T:Leadtools.Wia.WiaExceptionCode" />
            value.  This constructor initializes the <see cref="P:Leadtools.Wia.WiaException.Message" /> property of the new instance with the corresponding string for <i>code</i>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Wia.WiaException.GetCodeMessage(Leadtools.Wia.WiaExceptionCode)">
      <summary>
            Gets the error string that corresponds to a specific <see cref="T:Leadtools.Wia.WiaExceptionCode" />.
            </summary>
      <param name="code">A <see cref="T:Leadtools.Wia.WiaExceptionCode" /> value for which the corresponding 
            error string is being sought.</param>
      <returns>A <see cref="T:System.String" /> that contains the current message for <i>code</i>.</returns>
      <remarks>
            By default, <see cref="T:Leadtools.Wia.WiaException" /> has a string message for 
            each <see cref="T:Leadtools.Wia.WiaExceptionCode" />.  You can get this message by
            calling this method.  Moreover, you can change any string message 
            for any <see cref="T:Leadtools.Wia.WiaExceptionCode" /> by using the
            <see cref="M:Leadtools.Wia.WiaException.SetCodeMessage(Leadtools.Wia.WiaExceptionCode,System.String)" /> method.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaException.SetCodeMessage(Leadtools.Wia.WiaExceptionCode,System.String)" />.
            </example>
    </member>
    <member name="M:Leadtools.Wia.WiaException.SetCodeMessage(Leadtools.Wia.WiaExceptionCode,System.String)">
      <summary>
            Sets the error string that corresponds to a specific <see cref="T:Leadtools.Wia.WiaExceptionCode" />.
            </summary>
      <param name="code">A <see cref="T:Leadtools.Wia.WiaExceptionCode" /> value for which
            the error string is being set.</param>
      <param name="message">A <see cref="T:System.String" /> that contains the new 
            message for <i>code</i>.</param>
      <remarks>
            By default, <see cref="T:Leadtools.Wia.WiaException" /> has a string message for 
            each <see cref="T:Leadtools.Wia.WiaExceptionCode" />.  You can get this message by
            using the <see cref="M:Leadtools.Wia.WiaException.GetCodeMessage(Leadtools.Wia.WiaExceptionCode)" /> method.  
            Also, you can change any string message for any 
            <see cref="T:Leadtools.Wia.WiaExceptionCode" /> by
            using the <b>SetCodeMessage</b> method.
            </remarks>
      <example>
        <para />
        <code lang="VB">      &lt;Test&gt; _
      Public Sub SetCodeMessageExample()
         ' Get the initial FileFormat message
         Dim code As WiaExceptionCode = WiaExceptionCode.PaperEmpty
         Dim message As String = WiaException.GetCodeMessage(code)
         MessageBox.Show(String.Format("Code: {0}, message: {1}", code, message))
         ' make sure that this message is used now
         Try
            Throw New WiaException(code)
         Catch ex As Exception
            MessageBox.Show(ex.Message)
         End Try

         ' change this message to a custom one
         WiaException.SetCodeMessage(code, "My new message")

         ' make sure that this new message is used now
         Try
            Throw New WiaException(code)
         Catch ex As Exception
            MessageBox.Show(ex.Message)
         End Try
      End Sub
</code>
        <code lang="CS">      public void SetCodeMessageExample()
      {
         // Get the initial FileFormat message
         WiaExceptionCode code = WiaExceptionCode.PaperEmpty;
         string message = WiaException.GetCodeMessage(code);
         MessageBox.Show(string.Format("Code: {0}, message: {1}", code, message));

         // make sure that this message is used now
         try
         {
            throw new WiaException(code);
         }
         catch(Exception ex)
         {
            MessageBox.Show(ex.Message);
         }

         // change this message to a custom one
         WiaException.SetCodeMessage(code, "My new message");

         // make sure that this new message is used now
         try
         {
            throw new WiaException(code);
         }
         catch(Exception ex)
         {
            MessageBox.Show(ex.Message);
         }
      }
</code>
        <!--Leadtools.Wia.WiaException.SetCodeMessage-->
      </example>
    </member>
    <member name="M:Leadtools.Wia.WiaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified SerializationInfo with the data needed to 
            serialize this object.
            </summary>
      <param name="info">The SerializationInfo to populate with data.</param>
      <param name="context">The contextual information about the source or 
            destination of the serialization</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaException.Code">
      <summary>
            Gets or sets the code that caused this exception.
            </summary>
      <value>An <see cref="T:Leadtools.Wia.WiaExceptionCode" /> value that 
            specifies what caused this exception.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Wia.WiaException" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>The error message that explains the reason for the 
            exception, or an empty string("").</value>
      <remarks>
        <p>Overrides <see cref="P:System.Exception.Message" />.</p>
        <p>If this <see cref="T:Leadtools.Wia.WiaException" /> instance was initialized 
            with a specific <see cref="P:Leadtools.Wia.WiaException.Code" /> but no specific message,
            then this property will return the default error string that 
            corresponds to te <see cref="P:Leadtools.Wia.WiaException.Code" />.</p>
        <p>You can get the error string that corresponds to any 
            <see cref="P:Leadtools.Wia.WiaException.Code" /> by calling the <see cref="M:Leadtools.Wia.WiaException.GetCodeMessage(Leadtools.Wia.WiaExceptionCode)" /> method.</p>
        <p>You can change the error string that corresponds to 
            any <see cref="P:Leadtools.Wia.WiaException.Code" /> by using the <see cref="M:Leadtools.Wia.WiaException.SetCodeMessage(Leadtools.Wia.WiaExceptionCode,System.String)" /> method.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Wia.WiaException" /></example>
    </member>
    <member name="T:Leadtools.Wia.WiaEnumItemsEventArgs">
      <summary>
        <p>Provides data for the <see cref="E:Leadtools.Wia.WiaSession.EnumItemsEvent" /> event.</p>
      </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumChildItems(System.Object)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumItemsEventArgs.ItemsCount">
      <summary>
            Gets the count of the items being enumerated.
            </summary>
      <value>The number of items being enumerated.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumItemsEventArgs.Item">
      <summary>
            Gets the enumerated item.
            </summary>
      <value>An object that represents the enumerated item.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumItemsEventArgs.Stop">
      <summary>
            Enables or disables firing the <see cref="E:Leadtools.Wia.WiaSession.EnumItemsEvent" /> event.
            </summary>
      <value>true: continue firing <b>EnumItemsEvent</b> event, false: stop firing <b>EnumItemsEvent</b> event.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" />.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaCapabilityFlagValues">
      <summary>
        <p>Provides information about the <see cref="T:Leadtools.Wia.WiaPropertyAttributesFlags">WiaPropertyAttributesFlags.Flag</see> type enumerated WIA capabilities.</p>
      </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
      <seealso cref="T:Leadtools.Wia.WiaCapability">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityFlagValues.Empty">
      <summary>
            Returns a WiaCapabilityFlagValues structure with default values.
            </summary>
      <value>
            A WiaCapabilityFlagValues structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityFlagValues.FlagValues">
      <summary>
            Gets the retrieved flag capability values.
            </summary>
      <value>An integer that represents the flag values.</value>
      <remarks>
        <para>Use the received flags to get the available values of the received property ID through the 
            <see cref="T:Leadtools.Wia.WiaCapability" /> structure. Refer to the Microsoft SDK help for a list of available values for each received property ID.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityFlagValues.NominalValue">
      <summary>
            Gets the nominal value for the received flag values.
            </summary>
      <value>The nominal value for the received flag values.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="T:Leadtools.Wia.WiaCapabilityListValues">
      <summary>
            Provides information about the <see cref="T:Leadtools.Wia.WiaPropertyAttributesFlags">WiaPropertyAttributesFlags.List</see> type enumerated WIA capabilities.
            </summary>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
      <noremarks />
      <seealso cref="T:Leadtools.Wia.WiaCapability">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityListValues.Empty">
      <summary>
            Returns a WiaCapabilityListValues structure with default values.
            </summary>
      <value>
            A WiaCapabilityListValues structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityListValues.Values">
      <summary>
            Gets the received <see cref="T:Leadtools.Wia.WiaPropertyAttributesFlags">WiaPropertyAttributesFlags.List</see> type capability values.
            </summary>
      <value>The received <see cref="T:Leadtools.Wia.WiaPropertyAttributesFlags">WiaPropertyAttributesFlags.List</see> type capability values.</value>
      <remarks>
        <para>Use the received values to get the available list values of the received 
            property ID through the <see cref="T:Leadtools.Wia.WiaCapability" /> structure.
            Refer to the Microsoft SDK help for a list of available values for each received property ID.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityListValues.ValuesCount">
      <summary>
            Gets the count of the received list capability values.
            </summary>
      <value>The number of values in the received list of capability values.</value>
      <remarks>
        <para>Use this property to determine the number of the capabilities contained in the 
            <see cref="P:Leadtools.Wia.WiaCapabilityListValues.Values" /> collection in order to loop through them.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="T:Leadtools.Wia.WiaCapabilityRangeValues">
      <summary>
            Provides information about the enumerated <see cref="T:Leadtools.Wia.WiaPropertyAttributesFlags">WiaPropertyAttributesFlags.Range</see> type WIA capabilities.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
      <seealso cref="T:Leadtools.Wia.WiaCapability">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityRangeValues.Empty">
      <summary>
            Returns a WiaCapabilityRangeValues structure with default values.
            </summary>
      <value>
            A WiaCapabilityRangeValues structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityRangeValues.MaximumValue">
      <summary>
            Gets the maximum value for the received capability.
            </summary>
      <value>The maximum value for the received capability.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityRangeValues.MinimumValue">
      <summary>
            Gets the minimum value for the received capability.
            </summary>
      <value>The minimum value for the received capability.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityRangeValues.NominalValue">
      <summary>
            Gets the nominal value for the received capability.
            </summary>
      <value>The nominal value for the received capability.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityRangeValues.Step">
      <summary>
            Gets the increment or decrement between the received capability values.
            </summary>
      <value>The increment or decrement between the received capability values.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="T:Leadtools.Wia.WiaCapabilityValues">
      <summary>
            Provides information about each enumerated WIA capability value.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
      <seealso cref="T:Leadtools.Wia.WiaCapability">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityValues.Empty">
      <summary>
            Returns a WiaCapabilityValues structure with default values.
            </summary>
      <value>
            A WiaCapabilityValues structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityValues.FlagsValues">
      <summary>
            Gets the Flag values structure.
            </summary>
      <value>The Flag values structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityValues.ListValues">
      <summary>
            Gets the List values structure.
            </summary>
      <value>The List values structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapabilityValues.RangeValues">
      <summary>
            Gets the Range values structure.
            </summary>
      <value>The Range values structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="T:Leadtools.Wia.WiaCapability">
      <summary>
            Provides information about each enumerated WIA capability.
            </summary>
      <remarks>The <b>WiaCapability</b> structure is used with the <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /> method.</remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaCapability.Empty">
      <summary>
            Returns a WiaCapability structure with default values.
            </summary>
      <value>
            A WiaCapability structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaCapability.PropertyId">
      <summary>
            Gets the property ID for the enumerated capability .
            </summary>
      <value>The property ID for the enumerated capability. 
            Refer to the Microsoft SDK help for more information about property IDs.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapability.PropertyName">
      <summary>
            Gets the property name for the enumerated capability.
            </summary>
      <value>The property name for the enumerated capability.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapability.VariableType">
      <summary>
            Gets the type of the enumerated capability for use when casting the received capability values.
            </summary>
      <value>The type of the enumerated capability for use when casting the received capability values.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapability.PropertyAttributes">
      <summary>
            Gets the attributes for the enumerated capability.
            </summary>
      <value>The attributes for the enumerated capability.</value>
      <remarks>
            Gets the attributes for the enumerated capability like the capability value type (Flag value, List value or Range value) or
            the property access (Read, Write, Read/Write).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaCapability.Values">
      <summary>
            Gets the enumerated capability values structure.
            </summary>
      <value>The enumerated capability values structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="T:Leadtools.Wia.WiaEnumFormatsEventArgs">
      <summary>
        <p>Provides data for the <see cref="E:Leadtools.Wia.WiaSession.EnumFormatsEvent" /> event.</p>
      </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumFormatsEventArgs.FormatsCount">
      <summary>
            Gets the count of the formats being enumerated.
            </summary>
      <value>An integer that represents the number of formats being enumerated.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumFormatsEventArgs.Format">
      <summary>
            Gets the enumerated format.
            </summary>
      <value>A WiaFileFormats enumeration value that represents the format being enumerated.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumFormatsEventArgs.TransferMode">
      <summary>
            Gets the supported transfer mode for the enumerated format.
            </summary>
      <value>A WiaTransferMode value that 
            represents which transfer mode the format being enumerated supports.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumFormatsEventArgs.Stop">
      <summary>
            Enables or disables firing the <see cref="E:Leadtools.Wia.WiaSession.EnumFormatsEvent" /> event.
            </summary>
      <value>true: continue firing <b>EnumFormatsEvent</b> event, false: stop firing <b>EnumFormatsEvent</b> event.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumFormats(System.Object,Leadtools.Wia.WiaEnumFormatsFlags)" />.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaExceptionCode">
      <summary>
            Used as a value for <see cref="P:Leadtools.Wia.WiaException.Code">WiaException.Code</see> property.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.GeneralError">
      <summary>
            An unknown error has occurred with the Microsoft Windows Image Acquisition (WIA) device.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.PaperJam">
      <summary>
            Paper is jammed in the scanner's document feeder.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.PaperEmpty">
      <summary>
            The user requested a scan and there are no documents left in the document feeder.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.PaperProblem">
      <summary>
            An unspecified problem occurred with the scanner's document feeder.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.Offline">
      <summary>
            The WIA device is not online.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.Busy">
      <summary>
            The WIA device is busy.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.WarmingUp">
      <summary>
            The WIA device is warming up.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.UserIntervention">
      <summary>
            An unspecified error has occurred with the WIA device that requires user intervention. The user should ensure that the device is turned on, online, and any cables are properly connected.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.ItemDeleted">
      <summary>
            The WIA device was deleted. It can no longer be accessed.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.DeviceCommunication">
      <summary>
            An unspecified error occurred during an attempted communication with the WIA device.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.InvalidCommand">
      <summary>
            The device does not support this command.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.IncorrectHardwareSetting">
      <summary>
            There is an incorrect setting on the WIA device.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.Locked">
      <summary>
            The scanner head is locked.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.ExceptionInDriver">
      <summary>
            The device driver threw an exception.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.InvalidDriverResponse">
      <summary>
            The response from the driver is invalid.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.CoverOpen">
      <summary>
            No Description available.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.LampOff">
      <summary>
            No Description available.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.Destination">
      <summary>
            No Description available.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.NetwrokReservationFailed">
      <summary>
            No Description available.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.NoDeviceAvailable">
      <summary>
            There are no WIA hardware devices that match the given specifications.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.NoDeviceSelected">
      <summary>
            There is no device currently selected.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.InvalidStreamingVideoDevice">
      <summary>
            Selected device does not support streaming video.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.VideoStreamNotInitialized">
      <summary>
            WIA video stream not initialized.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.AccessDenied">
      <summary>
            Access denied.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.NoItemsAvailable">
      <summary>
            No child items available.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.UnknownError">
      <summary>
            Unknown WIA error occurred.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExceptionCode.InvalidWiaVersion">
      <summary>
            Invalid WIA Version.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaAcquireOptions">
      <summary>
        <p>Provides information about the options that affect the acquisition process.</p>
      </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /></example>
      <seealso cref="P:Leadtools.Wia.WiaSession.AcquireOptions">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireOptions.Empty">
      <summary>
            Returns a WiaAcquireOptions structure with default values.
            </summary>
      <value>
            A WiaAcquireOptions structure with default values.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireOptions.MemoryBufferSize">
      <summary>
            Gets or sets the memory buffer size to be used in data transfer.
            </summary>
      <value>An integer that represents the size of the memory buffer, 
            in bytes, to be used in data transfer.</value>
      <remarks>
        <para>
            This property is only valid when the WiaTransferMode value is Memory. 
            Also, this property is ignored when using WIA version 2.0.
            </para>
      </remarks>
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireOptions.DoubleBuffer">
      <summary>
            Gets or sets a flag that indicates whether to enable double buffering.
            </summary>
      <value>
            Flag that indicates whether to use double buffering while doing memory 
            transfer. Possible values are:
            true to enable double buffering, false to not enable double buffering. 
            
            </value>
      <remarks>
        <para>
            When true, the buffer specified with MemoryBufferSize will be multiplied
            by 2 internally. If MemoryBufferSize is 0 then the default buffer 
            size (64K) will be used internally and then it will be doubled. When false, no 
            double buffering is used. This is the default value.
            </para>
        <para>
          <strong>Note:</strong> This member is ignored when using WIA version 2.0.
            </para>
      </remarks>
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireOptions.OverwriteExisting">
      <summary>
            Gets or sets a flag that indicates whether to overwrite 
            any existing files found with the same name(s).
            </summary>
      <value>
            Flag that indicates whether to overwrite any existing files found with the same name(s). 
            Possible values are:
            true to overwrite the existing file, 
            false to generate new name(s) for the saved file(s) by adding an
            incremented number within braces. This is the default value.
            </value>
      <remarks>
        <para>
          <strong>Note:</strong> This member is ignored when using WIA version 2.0.
            </para>
      </remarks>
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireOptions.Append">
      <summary>
            Gets or sets a flag that indicates whether to append the acquired pages to the end of an 
            existing file that supports multi-page files.
            </summary>
      <value>Flag that indicates whether to append the acquired pages to the end of an 
            existing file that supports multi-page files.
            Possible values are:
            true to append pages to the end of the file, false to not append pages 
            to the end of the file. This is the default value.</value>
      <remarks>
        <para>
          <strong>Note:</strong> This member is ignored when using WIA version 2.0.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireOptions.SaveToOneFile">
      <summary>
            Gets or sets a flag that indicates whether to save multiple pages to a single file.
            </summary>
      <value>
            Flag that indicates whether to save multiple pages to a single file. Possible values are:
            true to save to a single file, false to save acquired pages to separate files. The default 
            value is false.
            </value>
      <remarks>
        <para>
          <strong>Note:</strong> This member is ignored when using WIA version 2.0.
            </para>
        <para>
            If the SaveToOneFile member is set to false and also the 
            <see cref="P:Leadtools.Wia.WiaAcquireOptions.OverwriteExisting">WiaAcquireOptions.OverwriteExisting</see> 
            member 
            is set to false, the acquire functions will generate a new file for each acquired 
            page from the device by generating new names of the name you specified through 
            the <see cref="P:Leadtools.Wia.WiaAcquireOptions.FileName">WiaAcquireOptions.FileName</see> 
            member by adding "(N)" to the end of the file name where N represents 
            an incremented number. If the new name currently exists it will keep generating 
            new names until it finds a new one. If the OverwriteExisting member is set 
            to true then the acquire functions will generate a new name and check whether 
            it exists. If it does it overwrites that file.
            </para>
      </remarks>
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireOptions.FileName">
      <summary>
            Gets or sets the filename.
            </summary>
      <value>
            A <see cref="T:System.String" /> that specifies the filename.
            </value>
      <remarks>
        <para>
            This member is only valid when the WiaTransferMode value is File.
            </para>
      </remarks>
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.AcquireToFile(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)" /> example.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaAcquireEventArgs">
      <summary>
        <p>Provides data for the <see cref="E:Leadtools.Wia.WiaSession.AcquireEvent" /> event.</p>
      </summary>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">
      </seealso>
      <seealso cref="M:Leadtools.Wia.WiaSession.Acquire(System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaAcquireFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireEventArgs.Image">
      <summary>
            Gets the IRasterImage which holds the image data acquired from the WIA Data Source.
            </summary>
      <value>The IRasterImage which holds the image data acquired from the WIA Data Source.</value>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireEventArgs.FileName">
      <summary>
            Indicates the full filename and path into which the current scanning operation is saving the page(s) that are being acquired.
            </summary>
      <value>The full filename and path into which the current scanning operation is saving the page(s) that are being acquired.</value>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireEventArgs.Percent">
      <summary>
            Indicates the percent completion of the acquisition process from the WIA source.
            </summary>
      <value>An integer that represents the percent completion of the acquisition process from the WIA source.</value>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireEventArgs.Flags">
      <summary>
            Indicates the start and the end of each acquired page.
            </summary>
      <value>Flags that indicate the start and the end of each acquired page.</value>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Wia~Topics.HowtoAcquireFromTheWIASource.html">How to Acquire from the WIA Source</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaAcquireEventArgs.Cancel">
      <summary>
            Aborts the acquire operation.
            </summary>
      <value>true to abort, false to continue normally.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
    </member>
    <member name="T:Leadtools.Wia.EnumClass">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_SSF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_APF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_AF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_IT">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_SMF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_DHCF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_DHSF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_PAF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_ITF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_VT">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_DT">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_VER">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_CM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_TM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_IDT">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_FF">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_ORIENT">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_ROT">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_EXPM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_FM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_FOCM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_PM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_EFFM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_CAPM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_EMM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_FMM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_WBM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_HBRM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_VBRM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_HSFRM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_PSM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_PREVM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_PCM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_IAR">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_IPM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_SPPM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_SIPM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_ADM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_FSM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_SLM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_PT">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_SISM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_SITCM">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.WIA_PID">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.EnumClass.L_ERROR_WIA">
      <exclude />
    </member>
    <member name="T:Leadtools.Wia.WiaSelectSourceFlags">
      <summary>
            Flags used with WiaSession.SelectDeviceDlg method
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see></example>
    </member>
    <member name="F:Leadtools.Wia.WiaSelectSourceFlags.None">
      <summary>
            Use the default behavior.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaSelectSourceFlags.NoDefault">
      <summary>
            Display the dialog box even if there is only one matching device. For more information please refer to WIA_SELECT_DEVICE_NODEFAULT property ID in Microsoft Windows SDK Documentation.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaAcquiredPageFlags">
      <summary>
            Flags used through the AcquireEvent and AcquireFileEvent events.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see></example>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquiredPageFlags.None">
      <summary>
            Default value when this is not the first transferred chunk or the last transferred chunk.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquiredPageFlags.StartOfPage">
      <summary>
            Indicates the start of the page being scanned.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquiredPageFlags.EndOfPage">
      <summary>
            Indicates the end of the page being scanned. Use this value to reset the progress bar.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaAcquireFlags">
      <summary>
            Flags used with the WiaSession.Acquire, WiaSession.AcquireToFile and WiaSession.AcquireSimple methods.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)">WiaSession.IsAvailable</see></example>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquireFlags.None">
      <summary>
            Default behavior for the device image acquisition dialog box.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquireFlags.NoDefault">
      <summary>
            WIA_SELECT_DEVICE_NODEFAULT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquireFlags.SingleImage">
      <summary>
            WIA_DEVICE_DIALOG_SINGLE_IMAGE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquireFlags.ShowUserInterface">
      <summary>
            If this flag is set then the image acquisition user interface dialog will be shown when call any 
            of the available acquire functions, otherwise the user interface dialog will not be shown.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaAcquireFlags.UseCommonUI">
      <summary>
            WIA_DEVICE_DIALOG_USE_COMMON_UI
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaImageType">
      <summary>
            Flags used within the <see cref="T:Leadtools.Wia.WiaProperties" /> structure.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see></example>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.None">
      <summary>
            WIA_INTENT_NONE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.Color">
      <summary>
            WIA_INTENT_IMAGE_TYPE_COLOR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.Grayscale">
      <summary>
            WIA_INTENT_IMAGE_TYPE_GRAYSCALE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.Text">
      <summary>
            WIA_INTENT_IMAGE_TYPE_TEXT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.Mask">
      <summary>
            WIA_INTENT_IMAGE_TYPE_MASK
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.MinimizeSize">
      <summary>
            WIA_INTENT_MINIMIZE_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.MaximizeQuality">
      <summary>
            WIA_INTENT_MAXIMIZE_QUALITY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.SizeMask">
      <summary>
            WIA_INTENT_SIZE_MASK
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageType.BestPreview">
      <summary>
            WIA_INTENT_BEST_PREVIEW
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaEnumCapabilitiesFlags">
      <summary>
            Reserved for future use.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaEnumCapabilitiesFlags.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaEnumFormatsFlags">
      <summary>
            Reserved for future use.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaEnumFormatsFlags.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaScanningModeFlags">
      <summary>
            Flags used within the <see cref="T:Leadtools.Wia.WiaProperties" /> structure.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)">WiaSession.GetRootItem</see></example>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.None">
      <summary>
            Use this value only to determine whether the <b>WiaProperties</b> structure is filled with a valid scanning mode.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.Feeder">
      <summary>
            Scan using the document feeder.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.Flatbed">
      <summary>
            Scan using the flatbed.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.Duplex">
      <summary>
            Scan using duplexer operations.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.AutoAdvance">
      <summary>
            Enables automatic feeding of the next document after a scan.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.FrontFirst">
      <summary>
            Scan the front of the document first. This value is valid when Duplex is set.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.BackFirst">
      <summary>
            Scan the back of the document first. This value is valid when Duplex is set.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.FrontOnly">
      <summary>
            Scan the front only. This value is valid when Duplex is set.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.BackOnly">
      <summary>
            Scan the back only. This value is valid when Duplex is set.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.NextPage">
      <summary>
            Scan the next page of the document.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.Prefeed">
      <summary>
            Enable pre-feed mode. Pre-position next document while scanning.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScanningModeFlags.AdvancedDuplex">
      <summary>
            Scan using individual settings configured for each child feeder item. Duplex and AdvancedDuplex cannot both be set.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags">
      <summary>
            Flags contains the scanner capabilities. For more information please refer to WIA_DPS_DOCUMENT_HANDLING_CAPABILITIES property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.Feeder">
      <summary>
            The scanner has an automatic document handler installed.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.Flatbed">
      <summary>
            The scanner has a flatbed platen.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectFlatbed">
      <summary>
            The scanner can detect a document on the flatbed platen.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectScan">
      <summary>
            The scanner can detect a document in the feeder only by scanning.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectFeed">
      <summary>
            The scanner can detect a document in the feeder.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectDuplex">
      <summary>
            The scanner can detect a duplex scan request from the user (not supported in Windows Vista or later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectFeedAvailable">
      <summary>
            The scanner can tell when the automatic document feeder is installed (not supported in Windows Vista or later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectDupAvailable">
      <summary>
            The scanner can tell when the duplexer is installed (not supported in Windows Vista or later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.Duplexer">
      <summary>
            The scanner has a duplexer.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.AdvancedDuplex">
      <summary>
            The device supports advanced duplex scan configuration (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.Tpa">
      <summary>
            The scanner is equipped with a transparency/film scanning adapter (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectTpa">
      <summary>
            The scanner can detect when the transparency/film adapter is ready to scan (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.Storage">
      <summary>
            The scanner is equipped with an internal image storage device (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingCapabilitiesFlags.DetectStorage">
      <summary>
            The scanner can detect when there are documents in the internal storage (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaDocumentHandlingStatusFlags">
      <summary>
            Flags contains current state of the scanner's installed flatbed, document feeder, or duplexer. For more information please refer to WIA_DPS_DOCUMENT_HANDLING_STATUS property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.FeederReady">
      <summary>
            The flatbed is ready for use.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.FlatbedReady">
      <summary>
            The scanner has a document on the flatbed platen.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.DuplexerReady">
      <summary>
            The duplexer is enabled and ready to be used.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.FlatbedCoverUp">
      <summary>
            The flat bed cover is up.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.PapaerPathCoverUp">
      <summary>
            The paper path is covered up and is preventing proper operation.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.PaperJam">
      <summary>
            A document is jammed in the document feeder.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.TpaReady">
      <summary>
            The transparency adapter is installed and ready for use (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.StorageReady">
      <summary>
            The internal storage device is ready (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.StorageFull">
      <summary>
            The storage is full, no upload operations possible (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.MultipleFeeder">
      <summary>
            A multiple feed condition occurred (usually with a PaperJam) (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.DeviceAttention">
      <summary>
            There is an error that requires user intervention on the device (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDocumentHandlingStatusFlags.LampError">
      <summary>
            The scanner is not ready due to a lamp problem (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaPropertyAttributesFlags">
      <summary>
            Flags used within <see cref="T:Leadtools.Wia.WiaCapability" /> structure. For more information please refer to "Property Attributes" topic in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.Read">
      <summary>
            The application can read the property's value.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.Write">
      <summary>
            The application can write the property's value.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.ReadWrite">
      <summary>
            The application can read and write the property's value.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.None">
      <summary>
            The property does not have any valid values associated with it.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.Range">
      <summary>
            The property has a range of valid values.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.List">
      <summary>
            The property has a list of legal values.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.Flag">
      <summary>
            The property has a list of legal flag values. Flag values are combined using a bitwise OR operation.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyAttributesFlags.Cashable">
      <summary>
            The device can cache the property's value.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaItemTypeFlags">
      <summary>
            Flags that specify the Microsoft Windows Image Acquisition (WIA) item type. For more information please refer to WIA_IPA_ITEM_FLAGS property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Analyze">
      <summary>
            WiaItemTypeAnalyze
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Audio">
      <summary>
            WiaItemTypeAudio
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Burst">
      <summary>
            WiaItemTypeBurst
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Deleted">
      <summary>
            WiaItemTypeDeleted
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Device">
      <summary>
            WiaItemTypeDevice
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Disconnected">
      <summary>
            WiaItemTypeDisconnected
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.File">
      <summary>
            WiaItemTypeFile
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Folder">
      <summary>
            WiaItemTypeFolder
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Free">
      <summary>
            WiaItemTypeFree
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Generated">
      <summary>
            WiaItemTypeGenerated
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.HasAttachments">
      <summary>
            WiaItemTypeHasAttachments
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.HorizontalPanorama">
      <summary>
            WiaItemTypeHPanorama
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Image">
      <summary>
            WiaItemTypeImage
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Root">
      <summary>
            WiaItemTypeRoot
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Storage">
      <summary>
            WiaItemTypeStorage
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Transfer">
      <summary>
            WiaItemTypeTransfer
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Video">
      <summary>
            WiaItemTypeVideo
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.VerticalPanorama">
      <summary>
            WiaItemTypeVPanorama
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Document">
      <summary>
            WiaItemTypeDocument
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.ProgrammableDataSource">
      <summary>
            WiaItemTypeProgrammableDataSource
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Removed">
      <summary>
            WiaItemTypeRemoved
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemTypeFlags.Mask">
      <summary>
            WiaItemTypeMask
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaVariableTypes">
      <summary>
            Flags used within <see cref="T:Leadtools.Wia.WiaCapability" /> structure. For more information please refer to VARENUM in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Empty">
      <summary>
            VT_EMPTY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Null">
      <summary>
            VT_NULL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.I2">
      <summary>
            VT_I2
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.I4">
      <summary>
            VT_I4
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.R4">
      <summary>
            VT_R4
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.R8">
      <summary>
            VT_R8
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Cy">
      <summary>
            VT_CY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Date">
      <summary>
            VT_DATE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Bstr">
      <summary>
            VT_BSTR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Dispatch">
      <summary>
            VT_DISPATCH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Error">
      <summary>
            VT_ERROR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Bool">
      <summary>
            VT_BOOL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Variant">
      <summary>
            VT_VARIANT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Unknown">
      <summary>
            VT_UNKNOWN
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Decimal">
      <summary>
            VT_DECIMAL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.I1">
      <summary>
            VT_I1
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.UI1">
      <summary>
            VT_UI1
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.UI2">
      <summary>
            VT_UI2
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.UI4">
      <summary>
            VT_UI4
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.I8">
      <summary>
            VT_I8
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.UI8">
      <summary>
            VT_UI8
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Int">
      <summary>
            VT_INT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.UInt">
      <summary>
            VT_UINT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Void">
      <summary>
            VT_VOID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.HResult">
      <summary>
            VT_HRESULT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Ptr">
      <summary>
            VT_PTR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.SafeArray">
      <summary>
            VT_SAFEARRAY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.CArray">
      <summary>
            VT_CARRAY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.UserDefined">
      <summary>
            VT_USERDEFINED
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Lpstr">
      <summary>
            VT_LPSTR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Lpwstr">
      <summary>
            VT_LPWSTR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Record">
      <summary>
            VT_RECORD
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.IntPtr">
      <summary>
            VT_INT_PTR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.UIntPtr">
      <summary>
            VT_UINT_PTR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.FileTime">
      <summary>
            VT_FILETIME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Blob">
      <summary>
            VT_BLOB
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Stream">
      <summary>
            VT_STREAM
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Storage">
      <summary>
            VT_STORAGE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.StreamedObject">
      <summary>
            VT_STREAMED_OBJECT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.StoredObject">
      <summary>
            VT_STORED_OBJECT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.BlobObject">
      <summary>
            VT_BLOB_OBJECT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.CF">
      <summary>
            VT_CF
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Clsid">
      <summary>
            VT_CLSID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.VersionedStream">
      <summary>
            VT_VERSIONED_STREAM
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.BstrBlob">
      <summary>
            VT_BSTR_BLOB
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Vector">
      <summary>
            VT_VECTOR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Array">
      <summary>
            VT_ARRAY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.ByRef">
      <summary>
            VT_BYREF
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Reserved">
      <summary>
            VT_RESERVED
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.Illegal">
      <summary>
            VT_ILLEGAL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.IllegalMasked">
      <summary>
            VT_ILLEGALMASKED
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVariableTypes.TypeMask">
      <summary>
            VT_TYPEMASK
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaItemAccessRights">
      <summary>
            This flag controls access to the item as well as whether the item is deleted. For more information please refer to WIA_IPA_ACCESS_RIGHTS property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaItemAccessRights.Read">
      <summary>
            Item has read-only access.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemAccessRights.Write">
      <summary>
            Item has write-only access.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemAccessRights.CanBeDeleted">
      <summary>
            Item has delete-only access.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemAccessRights.RD">
      <summary>
            Read | CanBeDeleted
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemAccessRights.RWD">
      <summary>
            Read | Write | CanBeDeleted
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaScannerItemTransferCapabilitiesMode">
      <summary>
            Specifies whether the driver is capable of transferring multiple child items in single transfer call. For more information please refer to WIA_IPS_TRANSFER_CAPABILITIES property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is supported only by Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaScannerItemTransferCapabilitiesMode.SingleScan">
      <summary>
            If this flag is set, then the driver is capable of transferring multiple child items in single transfer 
            call. If the flag is not set, the WIA Service will walk through the child items recursively and then 
            transfer each of those items.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaDeviceType">
      <summary>
            Used with <see cref="P:Leadtools.Wia.WiaSession.SelectedDeviceType" /> property and <see cref="M:Leadtools.Wia.WiaSession.SelectDeviceDlg(System.Windows.Forms.IWin32Window,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaSelectSourceFlags)" /> and <see cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)" /> methods.
            For more information please refer to WIA_DIP_DEV_TYPE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaDeviceType.Default">
      <summary>
            Generic WIA device. During device enumerations, this constant is used to enumerate all WIA devices. 
            This is the default value.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDeviceType.Scanner">
      <summary>
            Scanner device.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDeviceType.DigitalCamera">
      <summary>
            Camera device (not supported by Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaDeviceType.StreamingVideo">
      <summary>
            Video device (not supported by either Windows Server 2003, Windows Vista, or later).
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaVersion">
      <summary>
            Specifies the WIA version to use. Used with the <see cref="M:Leadtools.Wia.WiaSession.Startup(Leadtools.Wia.WiaVersion)" />, 
            <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /> and <see cref="M:Leadtools.Wia.WiaSession.AcquireSimple(Leadtools.Wia.WiaVersion,System.Windows.Forms.IWin32Window,System.Object,Leadtools.Wia.WiaDeviceType,Leadtools.Wia.WiaAcquireFlags)" /> methods.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.IsAvailable(Leadtools.Wia.WiaVersion)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaVersion.Version1">
      <summary>
            Use Microsoft WIA version 1.0
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVersion.Version2">
      <summary>
            Use Microsoft WIA version 2.0
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaCompressionMode">
      <summary>
            Compression to be used while performing data transfer from WIA source. For more information please refer to WIA_IPA_COMPRESSION property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.None">
      <summary>
            No compression is to be used.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Rle4">
      <summary>
            RLE4 compression.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Rle8">
      <summary>
            RLE8 compression.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Group3">
      <summary>
            Group 3 compression.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Group4">
      <summary>
            Group 4 compression.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Jpeg">
      <summary>
            JPEG compression.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Jbig">
      <summary>
            JBIG compression (only supported in Windows Vista or later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Jpeg2000">
      <summary>
            JPEG 2000 compression (only supported in Windows Vista or later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCompressionMode.Png">
      <summary>
            PNG compression (only supported in Windows Vista or later).
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaTransferMode">
      <summary>
            Transfer mode to be used by the WIA source.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaTransferMode.None">
      <summary>
            Indicates that there is no transfer mode currently set. The purpose of this member is to determine whether 
            the <see cref="T:Leadtools.Wia.WiaDataTransferProperties" /> structure has a valid transfer mode set.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaTransferMode.File">
      <summary>
            File transfer mode.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaTransferMode.Memory">
      <summary>
            Memory transfer mode.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaImageDataType">
      <summary>
            The data types to be used for the image when performing data transfer from WIA source. 
            For more information, please refer to the WIA_IPA_DATATYPE property ID in the Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.Threshold">
      <summary>
            Threshold.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.Dither">
      <summary>
            Dither.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.Grayscale">
      <summary>
            Grayscale.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.Color">
      <summary>
            Color.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.ColorThreshold">
      <summary>
            ColorThreshold.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.ColorDither">
      <summary>
            ColorDither.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.RawBgr">
      <summary>
            RawBgr.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.RawCmy">
      <summary>
            RawCmy.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.RawCmyk">
      <summary>
            RawCmyk.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.RawRgb">
      <summary>
            RawRgb.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.RawYuv">
      <summary>
            RawYuv.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaImageDataType.RawYuvk">
      <summary>
            RawYuvk.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaFileFormats">
      <summary>
            Preferred image format to use when performing data transfer from the WIA source. 
            For more information, please refer to the WIA_IPA_FORMAT property ID in the Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.None">
      <summary>
            Indicates that there is no transfer format currently set. The purpose of this member is to determine whether 
            the <see cref="T:Leadtools.Wia.WiaDataTransferProperties" /> structure has a valid transfer format set.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Bmp">
      <summary>
            Windows bitmap with a header file.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Ciff">
      <summary>
            Camera Image File format
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Emf">
      <summary>
            Extended Windows metafile.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Exif">
      <summary>
            Exchangeable File Format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Fpx">
      <summary>
            FlashPix format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Gif">
      <summary>
            GIF image format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Ico">
      <summary>
            Windows icon file format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Jbig">
      <summary>
            The Joint Bi-level Image Experts Group (JBIG) format (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Jpeg">
      <summary>
            JPEG compressed format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.J2k">
      <summary>
            JPEG 2000 compressed format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.J2kx">
      <summary>
            JPEG 2000 compressed format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.MemoryBmp">
      <summary>
            Windows bitmap without a header file (use this format when doing memory transfer).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Pcd">
      <summary>
            Eastman Kodak file format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Pct">
      <summary>
            Apple file format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Png">
      <summary>
            W3C PNG format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Raw">
      <summary>
            Raw format for data transfers only.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.RawRgb">
      <summary>
            Raw RGB format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Tiff">
      <summary>
            Tag Image File Format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Wmf">
      <summary>
            Windows metafile.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Rtf">
      <summary>
            Rich Text File format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Xml">
      <summary>
            XML file.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Html">
      <summary>
            HTML format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Txt">
      <summary>
            Text file.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Pdfa">
      <summary>
            The PDF/A (ISO/CD 19005-1) format (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Xps">
      <summary>
            XML Paper Specification (XPS) Package format (supported only in Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Mpg">
      <summary>
            MPEG video format (not supported in either Windows Server 2003 or Windows Vista).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Avi">
      <summary>
            AVI video format (not supported in either Windows Server 2003 or Windows Vista).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Wav">
      <summary>
            WAV audio format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Mp3">
      <summary>
            MP3 audio format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Aiff">
      <summary>
            AIFF audio format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Wma">
      <summary>
            WMA audio format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Asf">
      <summary>
            WMV video format (not supported in either Windows Server 2003 or Windows Vista).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Script">
      <summary>
            Script file.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Exec">
      <summary>
            Executable file.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Unicode16">
      <summary>
            UNICODE 16-bit encoding.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFileFormats.Dpof">
      <summary>
            DPOF printing format.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaOrientation">
      <summary>
            Original orientation of a page or image to be acquired. For more information please refer to WIA_IPS_ORIENTATION property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.GetRootItem(System.Object)" /></example>
    </member>
    <member name="F:Leadtools.Wia.WiaOrientation.Portrait">
      <summary>
            0 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaOrientation.Landscape">
      <summary>
            90-degree counter-clockwise rotation, relative to the Portrait orientation.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaOrientation.Rotate180">
      <summary>
            180-degree counter-clockwise rotation, relative to the Portrait orientation.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaOrientation.Rotate270">
      <summary>
            270-degree counter-clockwise rotation, relative to the Portrait orientation.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaScannerItemRotation">
      <summary>
            How much (if at all) to rotate the image before image data is sent back to the application. 
            For more information, please refer to the WIA_IPS_ROTATION property ID in the Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaScannerItemRotation.Portrait">
      <summary>
            The driver will not rotate the image.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScannerItemRotation.Landscape">
      <summary>
            The driver rotates the image 90 degrees counterclockwise.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScannerItemRotation.Rotate180">
      <summary>
            The driver rotates the image 180 degrees counterclockwise.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScannerItemRotation.Rotate270">
      <summary>
            The driver rotates the image 270 degrees counterclockwise.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaExposureMode">
      <summary>
            Indicates the camera's current exposure mode. For more information please refer to WIA_DPC_EXPOSURE_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMode.Manual">
      <summary>
            The shutter speed and aperture are set by the user.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMode.Auto">
      <summary>
            The shutter speed and aperture are automatically set by the camera.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMode.AperturePriority">
      <summary>
            The aperture is set by the user, and the camera automatically sets the shutter speed.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMode.Shutter_Priority">
      <summary>
            The shutter speed is set by the user, and the camera automatically sets the aperture.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMode.Creative">
      <summary>
            The shutter speed and aperture are automatically set by the camera, optimized for still subject matter.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMode.Action">
      <summary>
            The shutter speed and aperture are automatically set by the camera, optimized for scenes containing fast motion.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMode.Portrait">
      <summary>
            The shutter speed and aperture are automatically set by the camera, optimized for portrait photography.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaFlashMode">
      <summary>
            Defines the current flash mode setting for the camera device. For more information please refer to WIA_DPC_FLASH_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaFlashMode.Auto">
      <summary>
            The camera device determines the proper flash settings.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFlashMode.Fill">
      <summary>
            The camera device is configured to flash regardless of current lighting conditions.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFlashMode.Off">
      <summary>
            The camera device is configured not to flash for any picture taken.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFlashMode.RedeyeAuto">
      <summary>
            The camera device determines the proper flash settings using red-eye reduction, regardless of current lighting conditions.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFlashMode.RedeyeFill">
      <summary>
            The camera device is configured to use red-eye reduction and flash regardless of current lighting conditions.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFlashMode.ExternalSync">
      <summary>
            The camera device is configured to synchronize with external flash units.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaFocusMode">
      <summary>
            Defines the current focus mode setting for the camera device. For more information please refer to WIA_DPC_FOCUS_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaFocusMode.Manual">
      <summary>
            The camera device is configured to allow the user to focus manually.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFocusMode.Auto">
      <summary>
            The camera device is configured to focus automatically.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFocusMode.MacroAuto">
      <summary>
            The camera device is configured to focus automatically using short-range macro settings.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaPowerMode">
      <summary>
            Defines the current power source for the camera device. For more information please refer to WIA_DPC_POWER_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaPowerMode.Line">
      <summary>
            The camera device is operating on a power adapter.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPowerMode.Battery">
      <summary>
            The camera device is operating on battery power.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaEffectMode">
      <summary>
            Specifies the special image acquisition mode of the camera. For more information please refer to WIA_DPC_EFFECT_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaEffectMode.Standard">
      <summary>
            Capture an image in the standard mode for the camera.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaEffectMode.BlackWhite">
      <summary>
            Capture a grayscale image.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaEffectMode.Sepia">
      <summary>
            Capture a sepia image.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaCaptureMode">
      <summary>
            Sets the image capture mode. For more information please refer to WIA_DPC_CAPTURE_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaCaptureMode.Normal">
      <summary>
            Normal mode for the camera.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCaptureMode.Burst">
      <summary>
            Capture more than one image in quick succession as defined by the values of the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.CameraDeviceBurstNumber</see> and 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.CameraDeviceBurstInterval</see> properties.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCaptureMode.Timelapse">
      <summary>
            Capture more than one image in succession as defined by the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.CameraDeviceTimelapseNumber</see> and 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.CameraDeviceTimelapseInterval</see> properties.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaExposureMeteringMode">
      <summary>
            Specifies the mode the camera uses to automatically adjust the exposure setting. For more information please refer to WIA_DPC_EXPOSURE_METERING_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMeteringMode.Average">
      <summary>
            Set the exposure based on an average of the entire scene.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMeteringMode.CenterWeight">
      <summary>
            Set the exposure based on a center-weighted average.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMeteringMode.MultiSpot">
      <summary>
            Set the exposure based on a multispot pattern.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaExposureMeteringMode.CenterSpot">
      <summary>
            Set the exposure based on a center spot.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaFocusMeteringMode">
      <summary>
            Specifies the mode the camera uses to automatically adjust the focus. For more information please refer to WIA_DPC_FOCUS_METERING_MODE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaFocusMeteringMode.CenterSpot">
      <summary>
            Adjust the focus based on a center spot.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFocusMeteringMode.MultiSpot">
      <summary>
            Adjust the focus based on a multispot pattern.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaWhiteBalanceMode">
      <summary>
            Specifies how the digital camera weights color channels. For more information please refer to WIA_DPC_WHITE_BALANCE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaWhiteBalanceMode.Manual">
      <summary>
            The white balance is set directly using the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.CameraDeviceRGBGain</see> property.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaWhiteBalanceMode.Auto">
      <summary>
            The camera uses an automatic mechanism to set the white balance.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaWhiteBalanceMode.OnePushAuto">
      <summary>
            The camera determines the white balance setting when a user presses the capture button while pointing the camera at a white surface.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaWhiteBalanceMode.Daylight">
      <summary>
            The camera sets the white balance to a value appropriate for use in daylight conditions.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaWhiteBalanceMode.Florescent">
      <summary>
            The camera sets the white balance to a value appropriate for use with a fluorescent light source.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaWhiteBalanceMode.Tungsten">
      <summary>
            The camera sets the white balance to a value appropriate for use with a tungsten light source.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaWhiteBalanceMode.Flash">
      <summary>
            The camera sets the white balance to a value appropriate for use with an electronic flash.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaHorizontalBedRegistrationMode">
      <summary>
            Contains the registration, or horizontal alignment, for documents placed on the flatbed. For more information please refer to WIA_DPS_HORIZONTAL_BED_REGISTRATION property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is not supported with Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaHorizontalBedRegistrationMode.Left">
      <summary>
            The paper is left justified.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaHorizontalBedRegistrationMode.Centered">
      <summary>
            The paper is centered.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaHorizontalBedRegistrationMode.Right">
      <summary>
            The paper is right justified.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaVerticalBedRegistrationMode">
      <summary>
            Contains the registration, or vertical alignment and edge detection, for documents placed on the flatbed. 
            For more information please refer to WIA_DPS_VERTICAL_BED_REGISTRATION property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is not supported with Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaVerticalBedRegistrationMode.Top">
      <summary>
            The paper is top justified.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVerticalBedRegistrationMode.Centered">
      <summary>
            The paper is centered.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaVerticalBedRegistrationMode.Bottom">
      <summary>
            The paper is bottom justified.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaHorizontalSheetFeederRegistrationMode">
      <summary>
            Contains the registration, or alignment and edge detection, for documents that are placed on the flatbed. 
            For more information please refer to WIA_DPS_SHEET_FEEDER_REGISTRATION property ID for WIA 1.0 and WIA_IPS_SHEET_FEEDER_REGISTRATION for WIA 2.0 in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaHorizontalSheetFeederRegistrationMode.Left">
      <summary>
            The sheet is positioned to the left with respect to the scanning head.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaHorizontalSheetFeederRegistrationMode.Centered">
      <summary>
            The sheet is centered on the scanning head.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaHorizontalSheetFeederRegistrationMode.Right">
      <summary>
            The sheet is positioned to the right with respect to the scanning head.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaPageSizeMode">
      <summary>
            Contains the size of the page that is currently selected to be scanned. For more information please refer to WIA_DPS_PAGE_SIZE property ID for WIA 1.0 or WIA_IPS_PAGE_SIZE for WIA 2.0 in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaPageSizeMode.A4">
      <summary>
            8267 X 11692 (PORTRAIT orientation)
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPageSizeMode.Custom">
      <summary>
            Defined by the values of the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaDeviceType.ScannerDevicePageHeight</see>
            and 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaDeviceType.ScannerDevicePageWidth</see>
            properties.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPageSizeMode.Letter">
      <summary>
            8500 X 11000 (PORTRAIT orientation)
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPageSizeMode.Auto">
      <summary>
            Page size is automatically determined by the device.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPageSizeMode.CustomBase">
      <summary>
            A custom page size whose dimensions are already known to the application and the device driver.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaPreviewMode">
      <summary>
            Indicates the preview mode for a device. For more information please refer to WIA_IPS_PREVIEW property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is supported only by Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaPreviewMode.FinalScan">
      <summary>
            The application will perform a final scan.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPreviewMode.PreviewScan">
      <summary>
            The application will perform a preview scan.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaPreviewControlMode">
      <summary>
            Indicates whether an item needs a preview control displayed to the user. For more information please refer to WIA_IPS_SHOW_PREVIEW_CONTROL property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is supported only by Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaPreviewControlMode.ShowPreview">
      <summary>
            Show a preview control to the user, because this device can perform a preview.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPreviewControlMode.DontShowPreview">
      <summary>
            Do not show a preview control to the user, because this device cannot perform a preview.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaItemPlanarMode">
      <summary>
            Contains image data packing options. 
            For more information, please refer to the WIA_IPA_PLANAR property ID in the Microsoft Windows SDK Documentation.
            <para><b>This property is not supported in Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaItemPlanarMode.PackedPixel">
      <summary>
            Image data is in packed-pixel format.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaItemPlanarMode.Planar">
      <summary>
            Image data is in planar format.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaSuppressPropertyPageMode">
      <summary>
            Specifies whether to suppress the general property pages for items on the device. For more information please refer to WIA_IPA_SUPPRESS_PROPERTY_PAGE property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaSuppressPropertyPageMode.CameraItemGeneral">
      <summary>
            Suppress the general item property page for a camera (not valid with Windows Vista and later).
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaSuppressPropertyPageMode.ScannerItemGeneral">
      <summary>
            Suppress the general item property page for a scanner.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaScannerItemPhotometricMode">
      <summary>
            Contains the current setting for white and black pixels. For more information please refer to WIA_IPS_PHOTOMETRIC_INTERP property ID in Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaScannerItemPhotometricMode.White0">
      <summary>
            WHITE is 0, and BLACK is 1.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScannerItemPhotometricMode.White1">
      <summary>
            WHITE is 1, and BLACK is 0.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaCategories">
      <summary>
            WIA 2.0 available categories. For more information please refer to "WIA 2.0 Item Category GUIDs" topic in Microsoft Windows SDK Documentation.
            </summary>
      <remarks>In order to get the equivalent category GUID, see <see cref="M:Leadtools.Wia.WiaSession.GetCategoryGuid(Leadtools.Wia.WiaCategories)" /> method.</remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.FinishedFile">
      <summary>
            WIA_CATEGORY_FINISHED_FILE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.Flatbed">
      <summary>
            WIA_CATEGORY_FLATBED
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.Feeder">
      <summary>
            WIA_CATEGORY_FEEDER
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.Film">
      <summary>
            WIA_CATEGORY_FILM
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.Root">
      <summary>
            WIA_CATEGORY_ROOT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.Folder">
      <summary>
            WIA_CATEGORY_FOLDER
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.FeederFront">
      <summary>
            WIA_CATEGORY_FEEDER_FRONT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaCategories.FeederBack">
      <summary>
            WIA_CATEGORY_FEEDER_BACK
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaAutoDeskewMode">
      <summary>
            Turns automatic deskew on or off. For more information please refer to WIA_IPS_AUTO_DESKEW property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is supported only by Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaAutoDeskewMode.On">
      <summary>
            Turn on automatic deskew.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaAutoDeskewMode.Off">
      <summary>
            Turn off automatic deskew.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaFilmScanMode">
      <summary>
            Enables configuration of the current film scan. For more information please refer to WIA_IPS_FILM_SCAN_MODE property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is supported only by Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaFilmScanMode.ColorSlide">
      <summary>
            Scan for a color slide.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFilmScanMode.ColorNegative">
      <summary>
            Scan for a color negative.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaFilmScanMode.BlackWhiteNegative">
      <summary>
            Scan for a black and white negative.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaScannerLampMode">
      <summary>
            Turns the scanner lamp on or off. For more information please refer to WIA_IPS_LAMP property ID in Microsoft Windows SDK Documentation.
            <para><b>This property is supported only by Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaScannerLampMode.On">
      <summary>
            Turn on the lamp.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaScannerLampMode.Off">
      <summary>
            Turn off the lamp.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaPreviewType">
      <summary>
            Specifies whether the existing preview image can be 
            updated during an image preview (in response to a change in the 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemDatatype</see> or 
            <see cref="T:Leadtools.Wia.WiaPropertyId">WiaPropertyId.ItemDepth</see> properties).
            <para>For more information, please refer to the WIA_IPS_PREVIEW_TYPE property ID in the 
            Microsoft Windows SDK Documentation.</para><para><b>This property is supported only by Windows Vista and later.</b></para></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaPreviewType.AdvancedPreview">
      <summary>
            Updating the existing image is possible.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPreviewType.BasicPreview">
      <summary>
            Another preview scan must be executed because updating the existing image is not possible.
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaPropertyId">
      <summary>
            List of all available WIA properties. For more information about each of these properties please refer to Microsoft Windows SDK Documentation.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.None">
      <summary>
            Indicates that there is no property Id set, the purpose of this member is to check whether 
            there is valid property Id provided or not.
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoBaudRate">
      <summary>
            WIA_DIP_BAUDRATE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoDevDesc">
      <summary>
            WIA_DIP_DEV_DESC
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoDevId">
      <summary>
            WIA_DIP_DEV_ID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoDevName">
      <summary>
            WIA_DIP_DEV_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoDevType">
      <summary>
            WIA_DIP_DEV_TYPE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoDriverVersion">
      <summary>
            WIA_DIP_DRIVER_VERSION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoHwConfig">
      <summary>
            WIA_DIP_HW_CONFIG
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoPortName">
      <summary>
            WIA_DIP_PORT_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoRemoteDevId">
      <summary>
            WIA_DIP_REMOTE_DEV_ID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoServerName">
      <summary>
            WIA_DIP_SERVER_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoStiGenCapabilities">
      <summary>
            WIA_DIP_STI_GEN_CAPABILITIES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoUIClsid">
      <summary>
            WIA_DIP_UI_CLSID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoVendDesc">
      <summary>
            WIA_DIP_VEND_DESC
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoWiaVersion">
      <summary>
            WIA_DIP_WIA_VERSION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoPnpId">
      <summary>
            WIA_DIP_PNP_ID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceInfoStiDriverVersion">
      <summary>
            WIA_DIP_STI_DRIVER_VERSION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceConnectStatus">
      <summary>
            WIA_DPA_CONNECT_STATUS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceTime">
      <summary>
            WIA_DPA_DEVICE_TIME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.DeviceFirmwareVersion">
      <summary>
            WIA_DPA_FIRMWARE_VERSION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDevicePicturesTaken">
      <summary>
            WIA_DPC_PICTURES_TAKEN
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDevicePicturesRemaining">
      <summary>
            WIA_DPC_PICTURES_REMAINING
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceExposureMode">
      <summary>
            WIA_DPC_EXPOSURE_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceExposureComp">
      <summary>
            WIA_DPC_EXPOSURE_COMP
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceExposureTime">
      <summary>
            WIA_DPC_EXPOSURE_TIME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceFNumber">
      <summary>
            WIA_DPC_FNUMBER
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceFlashMode">
      <summary>
            WIA_DPC_FLASH_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceFocusMode">
      <summary>
            WIA_DPC_FOCUS_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceManualDist">
      <summary>
            WIA_DPC_FOCUS_MANUAL_DIST
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceZoomPosition">
      <summary>
            WIA_DPC_ZOOM_POSITION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDevicePanPosition">
      <summary>
            WIA_DPC_PAN_POSITION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceTiltPosition">
      <summary>
            WIA_DPC_TILT_POSITION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceTimerMode">
      <summary>
            WIA_DPC_TIMER_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceTimerValue">
      <summary>
            WIA_DPC_TIMER_VALUE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDevicePowerMode">
      <summary>
            WIA_DPC_POWER_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceBatteryStatus">
      <summary>
            WIA_DPC_BATTERY_STATUS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceThumbWidth">
      <summary>
            WIA_DPC_THUMB_WIDTH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceThumbHeight">
      <summary>
            WIA_DPC_THUMB_HEIGHT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDevicePictWidth">
      <summary>
            WIA_DPC_PICT_WIDTH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDevicePictHeight">
      <summary>
            WIA_DPC_PICT_HEIGHT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceDimention">
      <summary>
            WIA_DPC_DIMENSION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceCompressionSetting">
      <summary>
            WIA_DPC_COMPRESSION_SETTING
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceFocusMetering">
      <summary>
            WIA_DPC_FOCUS_METERING
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceTimelapseInterval">
      <summary>
            WIA_DPC_TIMELAPSE_INTERVAL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceTimelapseNumber">
      <summary>
            WIA_DPC_TIMELAPSE_NUMBER
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceBurstInterval">
      <summary>
            WIA_DPC_BURST_INTERVAL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceBurstNumber">
      <summary>
            WIA_DPC_BURST_NUMBER
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceEffectMode">
      <summary>
            WIA_DPC_EFFECT_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceDigitalZoom">
      <summary>
            WIA_DPC_DIGITAL_ZOOM
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceSharpness">
      <summary>
            WIA_DPC_SHARPNESS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceContrast">
      <summary>
            WIA_DPC_CONTRAST
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceCaptureMode">
      <summary>
            WIA_DPC_CAPTURE_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceCaptureDelay">
      <summary>
            WIA_DPC_CAPTURE_DELAY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceExposureIndex">
      <summary>
            WIA_DPC_EXPOSURE_INDEX
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceExposureMeteringMode">
      <summary>
            WIA_DPC_EXPOSURE_METERING_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceFocusMeteringMode">
      <summary>
            WIA_DPC_FOCUS_METERING_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceFocusDistance">
      <summary>
            WIA_DPC_FOCUS_DISTANCE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceFocalLength">
      <summary>
            WIA_DPC_FOCAL_LENGTH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceRGBGain">
      <summary>
            WIA_DPC_RGB_GAIN
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceWhiteBalance">
      <summary>
            WIA_DPC_WHITE_BALANCE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceUploadURL">
      <summary>
            WIA_DPC_UPLOAD_URL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceArtist">
      <summary>
            WIA_DPC_ARTIST
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraDeviceCopyrightInfo">
      <summary>
            WIA_DPC_COPYRIGHT_INFO
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceDeviceId">
      <summary>
            WIA_DPS_DEVICE_ID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceDitherPatternData">
      <summary>
            WIA_DPS_DITHER_PATTERN_DATA
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceDitherSelect">
      <summary>
            WIA_DPS_DITHER_SELECT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceDocumentHandlingCapabilities">
      <summary>
            WIA_DPS_DOCUMENT_HANDLING_CAPABILITIES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceDocumentHandlingSelect">
      <summary>
            WIA_DPS_DOCUMENT_HANDLING_SELECT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceDocumentHandlingStatus">
      <summary>
            WIA_DPS_DOCUMENT_HANDLING_STATUS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceEndorserCharacters">
      <summary>
            WIA_DPS_ENDORSER_CHARACTERS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceEndorserString">
      <summary>
            WIA_DPS_ENDORSER_STRING
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceFilterSelect">
      <summary>
            WIA_DPS_FILTER_SELECT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceHorizontalBedRegistration">
      <summary>
            WIA_DPS_HORIZONTAL_BED_REGISTRATION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceHorizontalBedSize">
      <summary>
            WIA_DPS_HORIZONTAL_BED_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceHorizontalSheetFeedSize">
      <summary>
            WIA_DPS_HORIZONTAL_SHEET_FEED_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceMaxScanTime">
      <summary>
            WIA_DPS_MAX_SCAN_TIME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceOpticalXRes">
      <summary>
            WIA_DPS_OPTICAL_XRES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceOpticalYRes">
      <summary>
            WIA_DPS_OPTICAL_YRES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceOrientation">
      <summary>
            WIA_IPS_ORIENTATION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDevicePadColor">
      <summary>
            WIA_DPS_PAD_COLOR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDevicePageHeight">
      <summary>
            WIA_DPS_PAGE_HEIGHT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDevicePageSize">
      <summary>
            WIA_DPS_PAGE_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDevicePageWidth">
      <summary>
            WIA_DPS_PAGE_WIDTH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDevicePages">
      <summary>
            WIA_DPS_PAGES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDevicePlatenColor">
      <summary>
            WIA_DPS_PLATEN_COLOR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDevicePreview">
      <summary>
            WIA_DPS_PREVIEW
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceScanAheadPages">
      <summary>
            WIA_DPS_SCAN_AHEAD_PAGES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceGlobalIdentity">
      <summary>
            WIA_DPS_GLOBAL_IDENTITY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceServiceId">
      <summary>
            WIA_DPS_SERVICE_ID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceUserName">
      <summary>
            WIA_DPS_USER_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceTransparency">
      <summary>
            WIA_DPS_TRANSPARENCY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceTransparencySelect">
      <summary>
            WIA_DPS_TRANSPARENCY_SELECT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceSheetFeederRegistration">
      <summary>
            WIA_DPS_SHEET_FEEDER_REGISTRATION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceShowPreviewControl">
      <summary>
            WIA_DPS_SHOW_PREVIEW_CONTROL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceVerticalBedRegistration">
      <summary>
            WIA_DPS_VERTICAL_BED_REGISTRATION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceVerticalBedSize">
      <summary>
            WIA_DPS_VERTICAL_BED_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerDeviceVerticalSheetFeedSize">
      <summary>
            WIA_DPS_VERTICAL_SHEET_FEED_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemAccessRights">
      <summary>
            WIA_IPA_ACCESS_RIGHTS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemAppColorMapping">
      <summary>
            WIA_IPA_APP_COLOR_MAPPING
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemBitsPerChannel">
      <summary>
            WIA_IPA_BITS_PER_CHANNEL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemBufferSize">
      <summary>
            WIA_IPA_BUFFER_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemBytesPerLine">
      <summary>
            WIA_IPA_BYTES_PER_LINE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemChannelsPerPixel">
      <summary>
            WIA_IPA_CHANNELS_PER_PIXEL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemColorProfile">
      <summary>
            WIA_IPA_COLOR_PROFILE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemCompression">
      <summary>
            WIA_IPA_COMPRESSION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemDatatype">
      <summary>
            WIA_IPA_DATATYPE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemDepth">
      <summary>
            WIA_IPA_DEPTH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemFilenameExtension">
      <summary>
            WIA_IPA_FILENAME_EXTENSION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemFormat">
      <summary>
            WIA_IPA_FORMAT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemFullItemName">
      <summary>
            WIA_IPA_FULL_ITEM_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemGammaCurves">
      <summary>
            WIA_IPA_GAMMA_CURVES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemIcmProfileName">
      <summary>
            WIA_IPA_ICM_PROFILE_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemCategory">
      <summary>
            WIA_IPA_ITEM_CATEGORY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemsStored">
      <summary>
            WIA_IPA_ITEMS_STORED
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemRawBitsPerChannel">
      <summary>
            WIA_IPA_RAW_BITS_PER_CHANNEL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemUploadItemSize">
      <summary>
            WIA_IPA_UPLOAD_ITEM_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.VideoDeviceLastPictureTaken">
      <summary>
            WIA_DPV_LAST_PICTURE_TAKEN
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.VideoDeviceImagesDirectory">
      <summary>
            WIA_DPV_IMAGES_DIRECTORY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.VideoDeviceDShowDevicePath">
      <summary>
            WIA_DPV_DSHOW_DEVICE_PATH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemFlags">
      <summary>
            WIA_IPA_ITEM_FLAGS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemName">
      <summary>
            WIA_IPA_ITEM_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemSize">
      <summary>
            WIA_IPA_ITEM_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemTime">
      <summary>
            WIA_IPA_ITEM_TIME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemNumberOfLines">
      <summary>
            WIA_IPA_NUMBER_OF_LINES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemPixelsPerLine">
      <summary>
            WIA_IPA_PIXELS_PER_LINE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemPlanar">
      <summary>
            WIA_IPA_PLANAR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemPreferredFormat">
      <summary>
            WIA_IPA_PREFERRED_FORMAT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemPropStreamCompatId">
      <summary>
            WIA_IPA_PROP_STREAM_COMPAT_ID
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemRegionType">
      <summary>
            WIA_IPA_REGION_TYPE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemSuppressPropertyPage">
      <summary>
            WIA_IPA_SUPPRESS_PROPERTY_PAGE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ItemTymed">
      <summary>
            WIA_IPA_TYMED
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemThumbnail">
      <summary>
            WIA_IPC_THUMBNAIL
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemThumbWidth">
      <summary>
            WIA_IPC_THUMB_WIDTH
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemThumbHeight">
      <summary>
            WIA_IPC_THUMB_HEIGHT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemAudioAvailable">
      <summary>
            WIA_IPC_AUDIO_AVAILABLE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemAudioDataFormat">
      <summary>
            WIA_IPC_AUDIO_DATA_FORMAT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemAudioData">
      <summary>
            WIA_IPC_AUDIO_DATA
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemNumberOfPicturesPerRow">
      <summary>
            WIA_IPC_NUM_PICT_PER_ROW
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemSequence">
      <summary>
            WIA_IPC_SEQUENCE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.CameraItemTimedelay">
      <summary>
            WIA_IPC_TIMEDELAY
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemAutoDeskew">
      <summary>
            WIA_IPS_AUTO_DESKEW
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemDeskewX">
      <summary>
            WIA_IPS_DESKEW_X
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemDeskewY">
      <summary>
            WIA_IPS_DESKEW_Y
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemFilmNodeName">
      <summary>
            WIA_IPS_FILM_NODE_NAME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemFilmScanMode">
      <summary>
            WIA_IPS_FILM_SCAN_MODE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemLamp">
      <summary>
            WIA_IPS_LAMP
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemLampAutoOff">
      <summary>
            WIA_IPS_LAMP_AUTO_OFF
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemMaxHorizontalSize">
      <summary>
            WIA_IPS_MAX_HORIZONTAL_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemMaxVerticalSize">
      <summary>
            WIA_IPS_MAX_VERTICAL_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemMinHorizontalSize">
      <summary>
            WIA_IPS_MIN_HORIZONTAL_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemMinVerticalSize">
      <summary>
            WIA_IPS_MIN_VERTICAL_SIZE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemPreviewType">
      <summary>
            WIA_IPS_PREVIEW_TYPE
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemSegmentation">
      <summary>
            WIA_IPS_SEGMENTATION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemSupportsChildItemCreation">
      <summary>
            WIA_IPS_SUPPORTS_CHILD_ITEM_CREATION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemTransferCapabilities">
      <summary>
            WIA_IPS_TRANSFER_CAPABILITIES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemXScaling">
      <summary>
            WIA_IPS_XSCALING
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemYScaling">
      <summary>
            WIA_IPS_YSCALING
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemBrightness">
      <summary>
            WIA_IPS_BRIGHTNESS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemContrast">
      <summary>
            WIA_IPS_CONTRAST
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemCurIntent">
      <summary>
            WIA_IPS_CUR_INTENT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemInvert">
      <summary>
            WIA_IPS_INVERT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemMirror">
      <summary>
            WIA_IPS_MIRROR
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemPhotometricInterp">
      <summary>
            WIA_IPS_PHOTOMETRIC_INTERP
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemRotation">
      <summary>
            WIA_IPS_ROTATION
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemThreshold">
      <summary>
            WIA_IPS_THRESHOLD
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemWarmUpTime">
      <summary>
            WIA_IPS_WARM_UP_TIME
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemXExtent">
      <summary>
            WIA_IPS_XEXTENT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemXPos">
      <summary>
            WIA_IPS_XPOS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemXRes">
      <summary>
            WIA_IPS_XRES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemYExtent">
      <summary>
            WIA_IPS_YEXTENT
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemYPos">
      <summary>
            WIA_IPS_YPOS
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.ScannerItemYRes">
      <summary>
            WIA_IPS_YRES
            </summary>
    </member>
    <member name="F:Leadtools.Wia.WiaPropertyId.FileDeviceMountPoint">
      <summary>
            WIA_DPF_MOUNT_POINT
            </summary>
    </member>
    <member name="T:Leadtools.Wia.WiaEnumDevicesEventArgs">
      <summary>
        <p>Provides data for the <see cref="E:Leadtools.Wia.WiaSession.EnumDevicesEvent" /> event.</p>
      </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumDevices">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumDevicesEventArgs.DeviceID">
      <summary>
            Gets the ID string for the enumerated device.
            </summary>
      <value>The ID string for the enumerated device.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumDevicesEventArgs.DeviceName">
      <summary>
            Gets the name of the enumerated device.
            </summary>
      <value>The name of the enumerated device.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumDevicesEventArgs.DeviceDesc">
      <summary>
            Gets the description of the device being enumerated.
            </summary>
      <value>A string that represents the description of the device being enumerated.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumDevicesEventArgs.Stop">
      <summary>
            Enables or disables firing the <see cref="E:Leadtools.Wia.WiaSession.EnumDevicesEvent" /> event.
            </summary>
      <value>true: continue firing <b>EnumDevicesEvent</b> event, false: stop firing <b>EnumDevicesEvent</b> event.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumDevices" />.
            </example>
    </member>
    <member name="T:Leadtools.Wia.WiaEnumCapabilitiesEventArgs">
      <summary>
        <p>Provides data for the <see cref="E:Leadtools.Wia.WiaSession.EnumCapabilitiesEvent" /> event.</p>
      </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
      <seealso cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)">
      </seealso>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumCapabilitiesEventArgs.CapabilitiesCount">
      <summary>
            Gets a count of the enumerated capabilities.
            </summary>
      <value>An integer that represents the number of capabilities being enumerated.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumCapabilitiesEventArgs.Capability">
      <summary>
            Gets information about the enumerated capabilities of the selected WIA item.
            </summary>
      <value>Information about the enumerated capabilities of the selected WIA item.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" /></example>
    </member>
    <member name="P:Leadtools.Wia.WiaEnumCapabilitiesEventArgs.Stop">
      <summary>
            Enables or disables firing the 
            <see cref="E:Leadtools.Wia.WiaSession.EnumCapabilitiesEvent" /> event.
            </summary>
      <value>true to continue firing the <b>EnumCapabilitiesEvent</b> event; false to stop firing the 
            <b>EnumCapabilitiesEvent</b> event.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Wia.WiaSession.EnumCapabilities(System.Object,Leadtools.Wia.WiaEnumCapabilitiesFlags)" />.
            </example>
    </member>
  </members>
</doc>